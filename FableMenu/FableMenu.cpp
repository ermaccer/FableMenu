#include "imgui/imgui.h"
#include "IniReader.h"
#include <iostream>
#include <Windows.h>
#include "FableMenu.h"
#include "Fable.h"
#include "eDirectX9Hook.h"
#include "utils/MemoryMgr.h"
#include "helper/eKeyboardMan.h"
#include "eSettingsManager.h"
#include "helper/eMouse.h"
#include "plugin/FreeCamera.h"
#include "eNotifManager.h"

using namespace Memory::VP;
FableMenu* TheMenu = new FableMenu();

bool FableMenu::ms_bFreeCam = false;
bool FableMenu::m_bCustomCameraPos = false;
bool FableMenu::ms_bDisableHUD = false;
bool FableMenu::m_bCustomCameraFOV = false;
bool FableMenu::ms_bChangeTime = false;
bool FableMenu::ms_bDisableCreateParticle = false;
float FableMenu::m_fTime = 0.0f;
std::vector<CThing*> FableMenu::m_createdParticles;
std::vector<CThing*> FableMenu::m_attachedCameraParticles;

static void ShowHelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }

}

static void ShowWarnMarker(const char* desc)
{
    ImGui::TextColored({ 1,0,0,1 }, "(!)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}
const char* szFactions[] = {
    "NULLDEF_FACTION",
    "FACTION_HERO",
    "FACTION_MONSTERS",
    "FACTION_VILLAGERS",
    "FACTION_BANDITS",
    "FACTION_TWINBLADE_CAMP_BANDITS",
    "FACTION_TWINBLADE_CAMP_NEUTRALS",
    "FACTION_TRADERS",
    "FACTION_NEUTRALS",
    "FACTION_FARM_HANDS",
    "FACTION_GUILD_APPRENTICES_GOOD",
    "FACTION_GUILD_APPRENTICES_EVIL",
    "FACTION_GUILD_SERVANTS",
    "FACTION_GUILD_MEMBERS",
    "FACTION_BANDITS_FRIENDLY",
    "FACTION_MAP_KEEPER",
    "FACTION_CTF_FLAG",
    "FACTION_CTF_BLUE_TEAM",
    "FACTION_CTF_RED_TEAM",
    "FACTION_HTE_BANDIT",
    "FACTION_HTE_PRISONER",
    "FACTION_HTE_GUARD",
    "FACTION_RIVAL_HERO",
    "FACTION_RIVAL_HERO_ALLY",
    "FACTION_GUARDS_ENEMY",
    "FACTION_PRISON_GUARD",
    "FACTION_PRISONER",
    "FACTION_BODYGUARD",
    "FACTION_PICNIC_AREA",
    "FACTION_SCRIPT_NEUTRAL"
};

const char* szBrainNames[] = {
    "BRAIN_NULL",
    "BRAIN_GOOD_VILLAGER_BASE_NO_MELEE",
    "BRAIN_BANDIT_VILLAGER_BASE_NO_MELEE",
    "BRAIN_GOOD_VILLAGER_BASE",
    "BRAIN_BANDIT_VILLAGER_BASE",
    "BRAIN_BANDIT_ARCHER",
    "BRAIN_GOOD_VILLAGER_MARKET_TRADER",
    "BRAIN_BANDIT_VILLAGER_MARKET_TRADER",
    "BRAIN_GOOD_VILLAGER_SHOP_KEEPER",
    "BRAIN_GOOD_VILLAGER_WAREHOUSE_WORKER",
    "BRAIN_GOOD_VILLAGER_BARMAID",
    "BRAIN_GOOD_VILLAGER_BARMAN",
    "BRAIN_BOWERSTONE_POSH_VILLAGER",
    "BRAIN_BOWERSTONE_POSH_VILLAGER_SHOP_KEEPER",
    "BRAIN_NECROPOLIS_VILLAGER",
    "BRAIN_GUILD_APPRENTICE",
    "BRAIN_GUILD_APPRENTICE_EVIL",
    "BRAIN_GUILD_SERVANT",
    "BRAIN_GUILD_SHOPKEEPER",
    "BRAIN_GUILD_BARMAN",
    "BRAIN_GUILD_BARMAID",
    "BRAIN_GUARD_BASE",
    "BRAIN_GUARD",
    "BRAIN_MELEE_GUARD",
    "BRAIN_BANDIT_GUARD",
    "BRAIN_MONSTER_GUARD",
    "BRAIN_GHOST_SWORD",
    "BRAIN_GUILDKEEPER",
    "BRAIN_GUILDKEEPER_BOSS",
    "BRAIN_SCARLET_ROBE",
    "BRAIN_GOOD_VILLAGER_GAME_MASTER",
    "BRAIN_WIFE",
    "BRAIN_DIVORCED_WIFE",
    "BRAIN_BODY_GUARD",
    "BRAIN_STAND_AROUND_LIKE_A_MORON",
    "BRAIN_BOWERSTONE_VILLAGER_TEST_BUYER",
    "BRAIN_BOWERSTONE_VILLAGER_TEST_WORKER",
    "BRAIN_FOLLOW_PLAYER",
    "BRAIN_PLAYER_UNDEAD_SERVANT",
    "BRAIN_BANDIT_STEALTH_GUARD",
    "BRAIN_QUEENS_GUARD_BASIC",
    "BRAIN_GENERIC_HUMAN",
    "BRAIN_BOWERSTONE_VILLAGER",
    "BRAIN_KNOTHOLE_VILLAGER",
    "BRAIN_FARMERS_WIFE",
    "BRAIN_CHILD",
    "BRAIN_BOWERSTONE_CHILD",
    "BRAIN_KNOTHOLE_CHILD",
    "BRAIN_KNOTHOLE_VILLAGER_BASE",
    "BRAIN_KNOTHOLE_WAREHOUSE_WORKER",
    "BRAIN_KNOTHOLE_SHOP_KEEPER",
    "BRAIN_KNOTHOLE_BARMAID",
    "BRAIN_BAR_STAFF",
    "BRAIN_PROSTITUTE",
    "BRAIN_SHEEP",
    "BRAIN_CHICKEN",
    "BRAIN_SMALL_BIRD",
    "BRAIN_BUTTERFLY",
    "BRAIN_FIREFLY",
    "BRAIN_IC_INVENTOR",
    "BRAIN_ARENA_CELLS",
    "BRAIN_PASSIVE_OVERRIDE",
    "BRAIN_NULL_OVERRIDE",
    "BRAIN_UNDEAD",
    "BRAIN_EARTH_TROLL",
    "BRAIN_EARTH_TROLL_NEW",
    "BRAIN_TROLL_ROCK",
    "BRAIN_TROLL_ICE",
    "BRAIN_BALVERINE",
    "BRAIN_WHITE_BALVERINE",
    "BRAIN_NYMPH",
    "BRAIN_HORNET",
    "BRAIN_SCORPION",
    "BRAIN_SCORPION_KING_SUMMONED_SCORPION",
    "BRAIN_SCORPION_KING",
    "BRAIN_BEETLE",
    "BRAIN_HOBBE_GRUNT",
    "BRAIN_HOBBE_LIEUTENANT",
    "BRAIN_HOBBE_SPELLCASTER",
    "BRAIN_HORNET_PICNIC",
    "BRAIN_HORNET_PICNIC_QUEEN",
    "BRAIN_BOSS_BANDIT_KING",
    "BRAIN_WHISPER",
    "BRAIN_WHISPER_STANDARD_MELEE",
    "BRAIN_THUNDER",
    "BRAIN_MINION",
    "BRAIN_MINION_DREADWINGS",
    "BRAIN_SUMMONER",
    "BRAIN_BRIAR_ROSE",
    "BRAIN_BRIAR_ROSE_BOSS",
    "BRAIN_BRIAR_ROSE_IMPOSTER",
    "BRAIN_BRIAR_ROSE_FOCAL_SITES",
    "BRAIN_MAZE",
    "BRAIN_MAZE_TUTORIAL",
    "BRAIN_SCYTHE",
    "BRAIN_JACK_OF_BLADES",
    "BRAIN_DRAGON",
    "BRAIN_JACK_DRAGON",
    "BRAIN_SCREAMER",
    "BRAIN_KRAKEN",
    "BRAIN_KRAKEN_TENTACLE",
    "BRAIN_SUMMONED_BANDIT_VILLAGER_BASE",
    "BRAIN_SUMMONED_BALVERINE",
    "BRAIN_SUMMONED_HORNET",
    "BRAIN_SUMMONED_BEETLE",
    "BRAIN_SUMMONED_SCORPION",
    "BRAIN_SUMMONED_HOBBE_GRUNT",
    "BRAIN_SUMMONED_HOBBE_LIEUTENANT",
    "BRAIN_SUMMONED_SCREAMER",
    "BRAIN_SUMMONED_UNDEAD",
    "BRAIN_SUMMONED_NYMPH",
    "BRAIN_SUMMONED_THUNDER",
    "BRAIN_SUMMONED_MINION"
};

const char* szCreatureList[] = {
    "CREATURE_BASE_TEMPLATE",
    "CREATURE_AI_BASE_TEMPLATE",
    "CREATURE_VILLAGER_TEMPLATE",
    "CREATURE_GENERIC_ADULT_MALE_VILLAGER_TEMPLATE",
    "CREATURE_GENERIC_ADULT_FEMALE_VILLAGER_TEMPLATE",
    "CREATURE_GENERIC_CHILD_VILLAGER_TEMPLATE",
    "CREATURE_COMBAT_ENEMY_HUMANOID_TEMPLATE",
    "CREATURE_BANDIT_SKELETON_COMMON_BASE",
    "CREATURE_BANDIT_BASE",
    "CREATURE_RIVAL_HERO_BASE",
    "CREATURE_GUARD_BASE",
    "CREATURE_OK_UNDEAD_TEMPLATE",
    "CREATURE_HOBBE_TEMPLATE",
    "CREATURE_COMBAT_ENEMY_ANIMAL_TEMPLATE",
    "CREATURE_SCORPION_TEMPLATE",
    "CREATURE_LIVESTOCK_TEMPLATE",
    "CREATURE_MOUNT_TEMPLATE",
    "CREATURE_SCRIPTED_TEMPLATE",
    "CREATURE_MINION_TEMPLATE",
    "CREATURE_SUMMONER_TEMPLATE",
    "CREATURE_STAG_BEETLE_BASE",
    "CREATURE_HORNET_TEMPLATE",
    "CREATURE_RIVAL_HERO_WHISPER_BASE",
    "CREATURE_RIVAL_HERO_JACK_OF_BLADES_BASE",
    "CREATURE_BANDIT_FOOTSOLDIER_BASE",
    "CREATURE_BANDIT_FOOTSOLDIER_TBG_BASE",
    "CREATURE_BANDIT_FOOTSOLDIER_BLG_BASE",
    "CREATURE_GHOST_VILLAGER_MALE",
    "CREATURE_GHOST_VILLAGER_FEMALE",
    "FODDER_CREATURE_ATTACK_STYLE_EASY-COMBAT_TYPE",
    "FODDER_CREATURE_ATTACK_STYLE-COMBAT_TYPE",
    "FODDER_CREATURE_ATTACK_STYLE_NASTY-COMBAT_TYPE",
    "CREATURE_ABILITY_ATTACK",
    "CREATURE_ABILITY_FLOURISH",
    "CREATURE_ABILITY_FLOURISH_360_CLOCKWISE_ATTACK",
    "CREATURE_ABILITY_FLOURISH_360_ANTICLOCKWISE_ATTACK",
    "CREATURE_ABILITY_FLOURISH_UPTHRUST_RIGHT",
    "CREATURE_ABILITY_FLOURISH_UPTHRUST_LEFT",
    "CREATURE_ABILITY_FLOURISH_MAXIMUM_DAMAGE",
    "CREATURE_ABILITY_BREAK_BLOCK",
    "CREATURE_BANDIT_ARCHER_BASE",
    "CREATURE_BANDIT_ARCHER_TBG_BASE",
    "CREATURE_BANDIT_ARCHER_BLG_BASE",
    "CREATURE_BANDIT_GRUNT",
    "CREATURE_BANDIT_GRUNT_TALKING",
    "CREATURE_BANDIT_IN_HOBBE_CAVE",
    "CREATURE_BANDIT_LIEUTENANT",
    "CREATURE_BANDIT_KING_ARMOURED",
    "CREATURE_BANDIT_LEADER",
    "CREATURE_BANDIT_BOUNTYHUNT",
    "CREATURE_BANDIT_ARCHER",
    "CREATURE_BANDIT_ARCHER_TBG",
    "CREATURE_BANDIT_ARCHER_BLG",
    "CREATURE_BANDIT_FIRE_ARCHER",
    "CREATURE_BANDIT_FIRE_ARCHER_TBG",
    "CREATURE_BANDIT_FIRE_ARCHER_BLG",
    "CREATURE_ASSASSIN",
    "CREATURE_MURDER_TWIST_ASSASSIN",
    "CREATURE_RANSOM_VICTIM_ASSASSIN",
    "CREATURE_BANDIT_MAULED",
    "CREATURE_BANDIT_CAMP_BANDIT",
    "CREATURE_MURDER_TWIST_BANDIT",
    "CREATURE_BREAKSIEGE_PRISONER_BANDIT",
    "CREATURE_BANDIT_CAMP_GUARD",
    "CREATURE_BANDIT_GRUNT_LEVEL1",
    "CREATURE_BANDIT_GRUNT_LEVEL1_A",
    "CREATURE_BANDIT_GRUNT_LEVEL1_B",
    "CREATURE_BANDIT_GRUNT_LEVEL1_C",
    "CREATURE_BANDIT_GRUNT_LEVEL1_D",
    "CREATURE_BANDIT_GRUNT_LEVEL2",
    "CREATURE_BANDIT_GRUNT_LEVEL2_A",
    "CREATURE_BANDIT_GRUNT_LEVEL2_B",
    "CREATURE_BANDIT_GRUNT_LEVEL2_C",
    "CREATURE_BANDIT_GRUNT_LEVEL2_D",
    "CREATURE_BANDIT_GRUNT_LEVEL3",
    "CREATURE_BANDIT_GRUNT_LEVEL3_A",
    "CREATURE_BANDIT_GRUNT_LEVEL3_B",
    "CREATURE_BANDIT_GRUNT_LEVEL3_C",
    "CREATURE_BANDIT_GRUNT_LEVEL3_D",
    "CREATURE_BANDIT_ARCHER_LEVEL1",
    "CREATURE_BANDIT_ARCHER_LEVEL2",
    "CREATURE_BANDIT_ARCHER_LEVEL3",
    "CREATURE_BANDIT_ARCHER_LEVEL1_NO_DROP",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL1",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL2",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL3",
    "CREATURE_BANDIT_LEADER_LEVEL1",
    "CREATURE_BANDIT_LEADER_LEVEL2",
    "CREATURE_BANDIT_LEADER_LEVEL3",
    "CREATURE_BANDIT_LEADER_LEVEL1_GUARD",
    "CREATURE_BANDIT_LEADER_LEVEL2_GUARD",
    "CREATURE_BANDIT_LEADER_LEVEL3_GUARD",
    "CREATURE_BANDIT_GRUNT_LEVEL1_VILLAGER",
    "CREATURE_BANDIT_GRUNT_LEVEL2_VILLAGER",
    "CREATURE_BANDIT_GRUNT_LEVEL3_VILLAGER",
    "CREATURE_BANDIT_ARCHER_LEVEL1_VILLAGER",
    "CREATURE_BANDIT_ARCHER_LEVEL2_VILLAGER",
    "CREATURE_BANDIT_ARCHER_LEVEL3_VILLAGER",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL1_VILLAGER",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL2_VILLAGER",
    "CREATURE_BANDIT_FIRE_ARCHER_LEVEL3_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL1_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL2_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL3_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL1_GUARD_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL2_GUARD_VILLAGER",
    "CREATURE_BANDIT_LEADER_LEVEL3_GUARD_VILLAGER",
    "CREATURE_TEMPORARY_HACKED_FRIENDLY_BANDIT",
    "CREATURE_BOSS_BANDIT_KING",
    "CREATURE_KRAKEN_01",
    "CREATURE_KRAKEN_TENTACLE_01",
    "CREATURE_KRAKEN_TENTACLE_02",
    "CREATURE_SPIRIT_TEMPLATE",
    "CREATURE_EARTH_TROLL_BASE",
    "CREATURE_EARTH_TROLL",
    "CREATURE_EARTH_TROLL_START_STANDING",
    "CREATURE_ROCK_TROLL_BASE",
    "CREATURE_ROCK_TROLL",
    "CREATURE_ROCK_TROLL_START_STANDING",
    "CREATURE_ICE_TROLL_BASE",
    "CREATURE_ICE_TROLL",
    "CREATURE_ICE_TROLL_START_STANDING",
    "CREATURE_ICE_TROLL_FIRST_ENCOUNTER",
    "CREATURE_MINION_DREADWINGS",
    "CREATURE_MINION_CAMP_MINION_DREADWINGS",
    "CREATURE_MINION_WARDOG",
    "CREATURE_MINION_CAMP_MINION_WARDOG",
    "CREATURE_SUMMONER_01",
    "CREATURE_SUMMONER_02",
    "CREATURE_SUMMONER_FLAME_SLICE_DUMMY",
    "CREATURE_INVISIBLE_BODGE",
    "CREATURE_DRAGON_BASE",
    "CREATURE_DRAGON_01",
    "CREATURE_DRAGON_01_HOVER",
    "CREATURE_DRAGON_01_FLY",
    "CREATURE_BALVERINE_01",
    "CREATURE_BALVERINE_EASY",
    "CREATURE_FULLMOON_BALVERINE",
    "CREATURE_NW_BALVERINE_01",
    "CREATURE_HOBBE_GRUNT_BASE",
    "CREATURE_HOBBE_GRUNT",
    "CREATURE_HOBBE_GRUNT_HAMMER",
    "CREATURE_HOBBE_GRUNT_SPIKE",
    "CREATURE_HOBBE_LIEUTENANT",
    "CREATURE_HOBBE_SPELLCASTER_BASE",
    "CREATURE_HOBBE_SPELLCASTER",
    "CREATURE_HOBBE_GRUNT_TALKING",
    "CREATURE_HOBBE_BASIC",
    "CREATURE_HOBBE_BASIC_HAMMER",
    "CREATURE_HOBBE_BASIC_SPIKE",
    "CREATURE_HOBBE_BASIC_SPELLCASTER",
    "CREATURE_WOOD_NYMPH_01",
    "CREATURE_LAKE_NYMPH_01",
    "CREATURE_HAUNTED_POOL_NYMPH",
    "CREATURE_SUCCUBUS_NYMPH_01",
    "CREATURE_ICE_NYMPH_01",
    "CREATURE_QUEEN_NYMPH_01",
    "CREATURE_LAKE_NYMPH_01_TALKING",
    "CREATURE_SCREAMER_01",
    "CREATURE_NW_SCREAMER_01",
    "CREATURE_OK_UNDEAD_SOLDIER_SWORD_NO_FX",
    "CREATURE_OK_UNDEAD_SOLDIER_SWORD",
    "CREATURE_OK_UNDEAD_SOLDIER_AXE_NO_FX",
    "CREATURE_OK_UNDEAD_SOLDIER_AXE",
    "CREATURE_OK_UNDEAD_LIEUTENANT_NO_FX",
    "CREATURE_OK_UNDEAD_LIEUTENANT",
    "CREATURE_OK_UNDEAD_LIEUTENANT_AXE_NO_FX",
    "CREATURE_OK_UNDEAD_LIEUTENANT_AXE",
    "CREATURE_OK_UNDEAD_GENERAL_NO_FX",
    "CREATURE_OK_UNDEAD_GENERAL",
    "CREATURE_OK_UNDEAD_GENERAL_MINUS_SUMMONING",
    "CREATURE_UNDEAD_NOSTRO_MINION",
    "CREATURE_OK_UNDEAD_SOLDIER_AXE_LOW_DETAIL",
    "CREATURE_OK_UNDEAD_SOLDIER_SWORD_LOW_DETAIL",
    "CREATURE_OK_UNDEAD_LIEUTENANT_LOW_DETAIL",
    "CREATURE_OK_UNDEAD_LIEUTENANT_AXE_LOW_DETAIL",
    "CREATURE_OK_UNDEAD_GENERAL_LOW_DETAIL",
    "CREATURE_OK_UNDEAD_GENERAL_GTHC",
    "CREATURE_OK_UNDEAD_LIEUTENANT_GTHC",
    "CREATURE_OK_UNDEAD_SOLDIER_SWORD_GTHC",
    "CREATURE_OK_UNDEAD_LIEUTENANT_AXE_GTHC",
    "CREATURE_OK_UNDEAD_SOLDIER_SWORD_HH",
    "CREATURE_OK_UNDEAD_SOLDIER_AXE_HH",
    "CREATURE_NW_ICE_HORDE_01",
    "CREATURE_NW_ICE_HORDE_02",
    "CREATURE_NOSTRO_01",
    "CREATURE_ROCK_CUBE",
    "CREATURE_ROCK_LAVA_CUBE",
    "CREATURE_HORNET_01",
    "CREATURE_HORNET_PICNIC",
    "CREATURE_HORNET_FIRST_SUMMON",
    "CREATURE_HORNET_LEV_02",
    "CREATURE_HORNET_LEV_03",
    "CREATURE_HORNET_QUEEN_01",
    "CREATURE_SCORPION_BLACK",
    "CREATURE_SCORPION_KING_SUMMONED_SCORPION",
    "CREATURE_SCORPION_BROWN",
    "CREATURE_SCORPION_QUEEN",
    "CREATURE_SCORPION_KING",
    "CREATURE_LOBSTER_01",
    "CREATURE_OAKVALE_STAG_BEETLE",
    "CREATURE_GUILD_STAG_BEETLE",
    "CREATURE_STAG_BEETLE",
    "CREATURE_STAG_BEETLE_QUEEN",
    "CREATURE_MONSTER_GUARD",
    "CREATURE_GENERATOR_JUMPOUT_TEMPLATE",
    "CREATURE_GENERATOR_DROP_IN_TEMPLATE",
    "CREATURE_GENERATOR_NORMAL_TEMPLATE",
    "CREATURE_GENERATOR_UNDEAD_TEMPLATE",
    "WASPS_01",
    "WASPS_02",
    "WASPS_03",
    "WASPS_04",
    "WASPS_05",
    "BEETLES_01",
    "BEETLES_02",
    "BASIC_BANDITS_01_A",
    "BASIC_BANDITS_01_B",
    "BASIC_BANDITS_01_C",
    "BASIC_BANDITS_01_D",
    "BASIC_BANDITS_02_A",
    "BASIC_BANDITS_02_B",
    "BASIC_BANDITS_02_C",
    "BASIC_BANDITS_02_D",
    "BASIC_BANDITS_03_A",
    "BASIC_BANDITS_03_B",
    "BASIC_BANDITS_03_C",
    "BASIC_BANDITS_03_D",
    "BASIC_BANDITS_04_A",
    "BASIC_BANDITS_04_B",
    "BASIC_BANDITS_04_C",
    "BASIC_BANDITS_04_D",
    "TWINBLADE_BANDITS_01_A",
    "TWINBLADE_BANDITS_01_B",
    "TWINBLADE_BANDITS_01_C",
    "TWINBLADE_BANDITS_01_D",
    "TWINBLADE_BANDITS_02_A",
    "TWINBLADE_BANDITS_02_B",
    "TWINBLADE_BANDITS_02_C",
    "TWINBLADE_BANDITS_02_D",
    "TWINBLADE_BANDITS_03_A",
    "TWINBLADE_BANDITS_03_B",
    "TWINBLADE_BANDITS_03_C",
    "TWINBLADE_BANDITS_03_D",
    "TWINBLADE_BANDITS_04_A",
    "TWINBLADE_BANDITS_04_B",
    "TWINBLADE_BANDITS_04_C",
    "TWINBLADE_BANDITS_04_D",
    "ASSASSIN_BANDITS_01_A",
    "ASSASSIN_BANDITS_01_B",
    "ASSASSIN_BANDITS_01_C",
    "ASSASSIN_BANDITS_01_D",
    "ASSASSIN_BANDITS_02_A",
    "ASSASSIN_BANDITS_02_B",
    "ASSASSIN_BANDITS_02_C",
    "ASSASSIN_BANDITS_02_D",
    "ASSASSIN_BANDITS_03_A",
    "ASSASSIN_BANDITS_03_B",
    "ASSASSIN_BANDITS_03_C",
    "ASSASSIN_BANDITS_03_D",
    "ASSASSIN_BANDITS_04_A",
    "ASSASSIN_BANDITS_04_B",
    "ASSASSIN_BANDITS_04_C",
    "ASSASSIN_BANDITS_04_D",
    "HOBBES_01_A",
    "HOBBES_01_B",
    "HOBBES_01_C",
    "HOBBES_02_A",
    "HOBBES_02_B",
    "HOBBES_02_C",
    "HOBBES_03_A",
    "HOBBES_03_B",
    "HOBBES_03_C",
    "HOBBES_04_A",
    "HOBBES_04_B",
    "HOBBES_04_C",
    "HOBBES_05_A",
    "HOBBES_05_B",
    "HOBBES_05_C",
    "UNDEADS_01",
    "UNDEADS_02",
    "UNDEADS_03",
    "UNDEADS_04",
    "UNDEADS_05",
    "BALVERINES_01",
    "BALVERINES_02",
    "BALVERINES_03",
    "BALVERINES_04",
    "WOOD_NYMPHS_01",
    "WOOD_NYMPHS_02",
    "WATER_NYMPHS_01",
    "WATER_NYMPHS_02",
    "SUCCUBUS_NYMPHS_01",
    "SUCCUBUS_NYMPHS_02",
    "EARTH_TROLLS_01",
    "EARTH_TROLLS_02",
    "ROCK_TROLLS_01",
    "ROCK_TROLLS_02",
    "ICE_TROLLS_01",
    "ICE_TROLLS_02",
    "ICE_TROLLS_FIRST_ENC_01",
    "SCREAMERS_01",
    "SCREAMERS_02",
    "MINIONS_01",
    "MINIONS_02",
    "FROSTY_BALVERINES_01",
    "FROSTY_BALVERINES_02",
    "NYMPH_QUEEN_01",
    "FROSTY_BALVS_AND_NYMPH_QUEEN",
    "ICE_HORDE_01",
    "ICE_HORDE_02",
    "ICE_HORDE_AND_BALVS_01",
    "SCRIPT_DARKWOOD8_UNDEAD",
    "SCRIPT_HAUNTEDHOUSE_UNDEAD",
    "SCRIPT_MCC_MINION",
    "SCRIPT_ORACLE_1",
    "SCRIPT_ORACLE_2",
    "SCRIPT_ORACLE_3",
    "SCRIPT_ORACLE_4",
    "NYMPH_ICE_FAMILY_01",
    "NYMPH_SUCCUBUS_FAMILY_01",
    "NYMPH_WATER_FAMILY_01",
    "NYMPH_WOOD_FAMILY_01",
    "BANDIT_FAMILY_01",
    "BANDIT_FAMILY_02",
    "BANDIT_FAMILY_03",
    "BANDIT_FAMILY_04",
    "BANDIT_FAMILY_05",
    "TROLL_EARTH_FAMILY_01",
    "TROLL_EARTH_FAMILY_02",
    "TROLL_EARTH_FAMILY_03",
    "BALVERINE_FAMILY_01",
    "BALVERINE_FAMILY_02",
    "BALVERINE_FAMILY_03",
    "BALVERINE_FAMILY_04",
    "INSECT_FAMILY_01",
    "INSECT_FAMILY_02",
    "INSECT_FAMILY_03",
    "INSECT_FAMILY_04",
    "HOBBE_FAMILY_01",
    "HOBBE_FAMILY_02",
    "HOBBE_FAMILY_03",
    "HOBBE_FAMILY_04",
    "HOBBE_FAMILY_05",
    "HOBBE_FAMILY_06",
    "UNDEAD_FAMILY_01",
    "UNDEAD_FAMILY_02",
    "GRAVEYARD_PATH_FAMILY",
    "PRISON_SP_FAMILY_01",
    "PRISON_SP_FAMILY_02",
    "PRISON_SP_FAMILY_03",
    "PRISON_SP_FAMILY_04",
    "MINION_FAMILY_01",
    "END_BATTLE_MINION_FAMILY",
    "END_BATTLE_GUARD_FAMILY",
    "END_BATTLE_APPRENTICE_FAMILY",
    "END_BATTLE_UNDEAD_SWORD_FAMILY",
    "END_BATTLE_UNDEAD_AXE_FAMILY",
    "END_BATTLE_UNDEAD_LIEUTENANT_SWORD_FAMILY",
    "END_BATTLE_UNDEAD_LIEUTENANT_AXE_FAMILY",
    "END_BATTLE_SCREAMER_FAMILY",
    "JACK_BATTLE_PHASE_1_MINIONS_FAMILY",
    "JACK_BATTLE_PHASE_2_MINIONS_FAMILY",
    "KING_SCORPION_SUMMON_FAMILY",
    "QUEEN_NYMPH_SUMMON_FAMILY",
    "CREATURE_GENERATOR_BASE_TEMPLATE-OBJECT",
    "CREATURE_GENERATOR_TEMPLATE-OBJECT",
    "CREATURE_GENERATOR_DESTROYABLE_TEMPLATE-OBJECT",
    "CREATURE_GENERATOR_WASP_NEST_01-OBJECT",
    "CREATURE_GENERATOR_TEST_BED_01-OBJECT",
    "CREATURE_HERO_TEMPLATE",
    "CREATURE_HERO_HUMAN_BASE",
    "CREATURE_HERO",
    "CREATURE_HERO_TRAINING",
    "CREATURE_HERO_CHILD",
    "CREATURE_HERO_BALVERINE",
    "CREATURE_NEW_CHICKEN_01",
    "CREATURE_NEW_CHICKEN_02",
    "CREATURE_NEW_CHICKEN_03",
    "CREATURE_NEW_CHICKEN_04",
    "CREATURE_KICKING_CHICKEN_01",
    "CREATURE_CHICK_01",
    "CREATURE_BIRD_GUILD_SPARROW",
    "CREATURE_BIRD_RAVEN",
    "CREATURE_RAVEN_WHITE",
    "CREATURE_BIRD_SEAGULL",
    "CREATURE_BIRD_GUILD_SEAGULL",
    "CREATURE_BUTTERFLY_TORTOISESHELL",
    "CREATURE_BUTTERFLY_COMMONBLUE",
    "CREATURE_BUTTERFLY_RANDOM",
    "CREATURE_RAT_01",
    "CREATURE_MAGGOT",
    "CREATURE_SPIDER_BLACK",
    "CREATURE_SPIDER_BLUE",
    "CREATURE_SPIDER_RED",
    "CREATURE_SPIDER_WHITE",
    "CREATURE_SPIDER_HAIRY_BLACK-OBJECT",
    "CREATURE_SPIDER_HAIRY_BROWN-OBJECT",
    "CREATURE_SPIDER_HAIRY_REDSPOT-OBJECT",
    "CREATURE_SPIDER_HAIRY_WHITE-OBJECT",
    "CREATURE_SPIDER_HAIRY_WHITESPOT-OBJECT",
    "CREATURE_BEETLE_REDSPOT-OBJECT",
    "CREATURE_BEETLE_BROWN-OBJECT",
    "CREATURE_BEETLE_BLACK-OBJECT",
    "CREATURE_BEETLE_GREENSPOT-OBJECT",
    "CREATURE_FIREFLY",
    "CREATURE_CHICKEN",
    "CREATURE_YOURE_ONLY_INTERESTED_IN_ME_FOR_MY_NAVIGATION_PLEASE_DONT_DELETE_ME",
    "CREATURE_RIVAL_HERO_WHISPER_APPRENTICE_BASE",
    "CREATURE_RIVAL_HERO_JACK_OF_BLADES",
    "CREATURE_RIVAL_HERO_JACK_OF_BLADES_UNARMED",
    "CREATURE_RIVAL_HERO_JACK_OF_BLADES_NOSCALE",
    "CREATURE_RIVAL_HERO_JACK_OF_BLADES_NO_AEONS",
    "CREATURE_RIVAL_HERO_MAZE",
    "CREATURE_RIVAL_HERO_MAZE_TUTORIAL",
    "CREATURE_RIVAL_HERO_MAZE_CUTSCENE",
    "CREATURE_RIVAL_HERO_SCYTHE",
    "CREATURE_RIVAL_HERO_SCYTHE_CUTSCENE",
    "CREATURE_RIVAL_HERO_THUNDER",
    "CREATURE_RIVAL_HERO_THUNDER_TLC",
    "CREATURE_RIVAL_HERO_WHISPER",
    "CREATURE_RIVAL_HERO_WHISPER_HOODED",
    "CREATURE_RIVAL_HERO_WHISPER_ARENA",
    "CREATURE_RIVAL_HERO_WHISPER_ORCHARD_FARM",
    "CREATURE_RIVAL_HERO_WHISPER_HOBBE_TEETH_CONTEST",
    "CREATURE_RIVAL_HERO_WHISPER_APPRENTICE",
    "CREATURE_RIVAL_HERO_WHISPER_TEEN_APPRENTICE",
    "CREATURE_RIVAL_HERO_BRIAR_ROSE",
    "CREATURE_BRIAR_ROSE_MINION_CAMP",
    "CREATURE_RIVAL_HERO_BRIAR_ROSE_BOSS",
    "CREATURE_RIVAL_HERO_BRIAR_ROSE_IMPOSTER",
    "CREATURE_BRIAR",
    "CREATURE_RIVAL_HERO_BRIAR_ROSE_VILLAGER",
    "CREATURE_RIVAL_HERO_BRIAR_ROSE_02",
    "CREATURE_HERO_RIVAL_GOOD_01",
    "CREATURE_HERO_RIVAL_GOOD_01_FRIENDLY",
    "CREATURE_HERO_RIVAL_EVIL_01",
    "CREATURE_BODY_GUARD_BASE",
    "CREATURE_DOMINATRIX",
    "CREATURE_MADAME_MINCHE",
    "CREATURE_EXOTIC_PROSTITUTE",
    "CREATURE_NORMAL_PROSTITUTE",
    "CREATURE_HIGHCLASS_PROSTITUTE",
    "CREATURE_CHEAP_PROSTITUTE",
    "CREATURE_GRANNY",
    "CREATURE_WITCH",
    "CREATURE_TEEN_CAPTIVE",
    "CREATURE_KHG_CHIEFS_SON",
    "CREATURE_LUNA",
    "CREATURE_TRADER_01",
    "CREATURE_TRADER_02",
    "CREATURE_TRADER_FRIENDLY",
    "CREATURE_TRADER_INFECTED",
    "CREATURE_TRADER_SCARED",
    "CREATURE_TRADER_WITH_BANDITS_01",
    "CREATURE_TRADER_WITH_BANDITS_02",
    "CREATURE_TRADER_ARENA_EXTERIOR_MARKET_TRADER",
    "CREATURE_TRADER_BANDIT_CAMP_MARKET_TRADER",
    "CREATURE_TRADER_STOCKED_BASE",
    "CREATURE_TRADER_STOCKED_01",
    "CREATURE_TRADER_STOCKED_02",
    "CREATURE_TRADER_STOCKED_03",
    "CREATURE_TRADER_STOCKED_04",
    "CREATURE_TRADER_STOCKED_TATTOOIST_01",
    "CREATURE_TRADER_STOCKED_TATTOOIST_02",
    "CREATURE_TRADER_STOCKED_TATTOOIST_03",
    "CREATURE_TRADER_STOCKED_BARBER_01",
    "CREATURE_TRADER_STOCKED_BARBER_02",
    "CREATURE_BANDIT_CAMP_VILLAGER_GAME_MASTER",
    "CREATURE_HERO_FATHER",
    "CREATURE_BEGGAR_01",
    "CREATURE_FEARLESS_MAN",
    "CREATURE_PRISONER",
    "CREATURE_PRISON_GUARD_TORTURER",
    "CREATURE_PRISON_GUARD",
    "CREATURE_PRISON_GUARD_SMALL",
    "CREATURE_GUILDKEEPER",
    "CREATURE_GUILDKEEPER_FIGHT",
    "CREATURE_SCARLET_ROBE",
    "CREATURE_SCARLET_ROBE_GHOST",
    "CREATURE_SCARLET_ROBE_JOB",
    "CREATURE_SISTER",
    "CREATURE_YOUNG_SISTER",
    "CREATURE_YOUNG_HERO",
    "CREATURE_LADY_GREY",
    "CREATURE_LADY_GREYS_SISTER",
    "CREATURE_BODY_GUARD",
    "CREATURE_BODY_GUARD_WEAK",
    "CREATURE_BODY_GUARD_GOOD",
    "CREATURE_BODY_GUARD_GOOD_WEAK",
    "CREATURE_GRAVEYARD_CARETAKER",
    "CREATURE_FISHERMAN",
    "CREATURE_GUARDIAN",
    "CREATURE_MAPKEEPER",
    "CREATURE_TROPHYDEALER",
    "CREATURE_EXECUTIONER",
    "CREATURE_MADBOMBER",
    "CREATURE_PUNCH_CLUB_CHAMPION_01",
    "CREATURE_ARENA_CHAMPION_01",
    "CREATURE_BS_PUNCH_CLUB_CHAMPION_01",
    "CREATURE_OV_PUNCH_CLUB_CHAMPION_01",
    "CREATURE_BC_PUNCH_CLUB_CHAMPION_01",
    "CREATURE_KHG_PUNCH_CLUB_CHAMPION_01",
    "CREATURE_GUILD_APPRENTICE_MALE",
    "CREATURE_GUILD_APPRENTICE_MALE_ARMED",
    "CREATURE_GUILD_APPRENTICE_MALE_ARMED_ENDGAME",
    "CREATURE_GUILD_EVIL_APPRENTICE_MALE",
    "CREATURE_GUILD_EVIL_APPRENTICE_MALE_ARMED",
    "CREATURE_PROPHET_01",
    "CREATURE_PROPHET_02",
    "CREATURE_PROPHET_03",
    "CREATURE_PROPHET_04",
    "CREATURE_PROPHET_05",
    "CREATURE_BS_ARMED_VILLAGER_BULLY_MALE_ADULT",
    "CREATURE_BIGASS_CHICKEN",
    "CREATURE_GUILD_GOOD_APPRENTICE_MALE",
    "CREATURE_GUILD_APPRENTICE_FEMALE",
    "CREATURE_GUILD_EVIL_APPRENTICE_FEMALE",
    "CREATURE_GUILD_GOOD_APPRENTICE_FEMALE",
    "CREATURE_OAKVALE_VILLAGER_MALE_FEARLESS",
    "CREATURE_BS_FISTICUFFS_TYLER",
    "CREATURE_BANDIT_FISTICUFFS_TYLER",
    "CREATURE_FEMALE_APPRENTICE_FIGHTER",
    "CREATURE_CONDEMNED_MAN",
    "CREATURE_GUARD",
    "CREATURE_BS_GUARD_RED",
    "CREATURE_MURDER_TWIST_GUARD",
    "CREATURE_BS_GUARD_BLACK",
    "CREATURE_MURDER_TWIST_SHERIFF",
    "CREATURE_GUILDMASTER_BODYGUARD",
    "CREATURE_KNOTHOLE_CHIEFS_GUARD",
    "CREATURE_BOWERSTONE_BARD",
    "CREATURE_BS_VILLAGER_INNKEEPER",
    "CREATURE_BS_VILLAGER_BULLY_MALE",
    "CREATURE_BS_VILLAGER_BULLY_MALE_ADULT",
    "CREATURE_BOWERSTONE_TAILOR",
    "CREATURE_BOWERSTONE_BARBER",
    "CREATURE_ARENA_SHOPKEEPER",
    "CREATURE_BOWERSTONE_SMITH",
    "CREATURE_BS_VILLAGER_MALE",
    "CREATURE_BS_VILLAGER_FEMALE",
    "CREATURE_CAGED_VILLAGER_FEMALE",
    "CREATURE_BS_VILLAGER_BOY",
    "CREATURE_BS_VILLAGER_GIRL",
    "CREATURE_BS_VILLAGER_DEAD_MALE",
    "CREATURE_BS_VILLAGER_MARKET_TRADER",
    "CREATURE_BS_VILLAGER_GREENGROCER",
    "CREATURE_BS_VILLAGER_BUTCHER",
    "CREATURE_BS_VILLAGER_ARMOURER",
    "CREATURE_BS_VILLAGER_GIFTSELLER",
    "CREATURE_BS_VILLAGER_BLACK_MARKETEER",
    "CREATURE_BS_VILLAGER_OFF_LICENCE_MARKETEER",
    "CREATURE_BS_VILLAGER_SHOP_KEEPER",
    "CREATURE_VILLAGER_BASE",
    "CREATURE_BS_VILLAGER_GAME_MASTER",
    "CREATURE_BS_SHERIFF",
    "CREATURE_BS_GUARD",
    "CREATURE_BS_GUARD_CROSSBOW",
    "CREATURE_BS_GUARD_BLUE",
    "CREATURE_BS_GUARD_BLUE_CROSSBOW",
    "CREATURE_ORCHARD_FARM_GUARD",
    "CREATURE_BS_FISTICUFFS_MEMBER",
    "CREATURE_BS_FISTICUFFS_FIGHTER_01",
    "CREATURE_BS_FISTICUFFS_FIGHTER_02",
    "CREATURE_BS_FISTICUFFS_FIGHTER_03",
    "CREATURE_BS_FISTICUFFS_FIGHTER_04",
    "CREATURE_BS_FISTICUFFS_FIGHTER_05",
    "CREATURE_OV_FISTICUFFS_MEMBER",
    "CREATURE_OV_FISTICUFFS_FIGHTER_01",
    "CREATURE_OV_FISTICUFFS_FIGHTER_02",
    "CREATURE_OV_FISTICUFFS_FIGHTER_03",
    "CREATURE_OV_FISTICUFFS_FIGHTER_04",
    "CREATURE_OV_FISTICUFFS_FIGHTER_05",
    "CREATURE_BC_FISTICUFFS_MEMBER",
    "CREATURE_BC_FISTICUFFS_FIGHTER_01",
    "CREATURE_BC_FISTICUFFS_FIGHTER_02",
    "CREATURE_BC_FISTICUFFS_FIGHTER_03",
    "CREATURE_BC_FISTICUFFS_FIGHTER_04",
    "CREATURE_BC_FISTICUFFS_FIGHTER_05",
    "CREATURE_KHG_FISTICUFFS_MEMBER",
    "CREATURE_KHG_FISTICUFFS_FIGHTER_01",
    "CREATURE_KHG_FISTICUFFS_FIGHTER_02",
    "CREATURE_KHG_FISTICUFFS_FIGHTER_03",
    "CREATURE_KHG_FISTICUFFS_FIGHTER_04",
    "CREATURE_KHG_FISTICUFFS_FIGHTER_05",
    "CREATURE_BANDIT_FISTICUFFS_MEMBER",
    "CREATURE_KHG_GUARD",
    "CREATURE_KN_VILLAGER_MALE",
    "CREATURE_KN_VILLAGER_FEMALE",
    "CREATURE_KN_GUARD",
    "CREATURE_KG_CHIEF",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_BASE",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_NORMAL_MESH",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_FEMALE_BASE",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_FEMALE_NORMAL_MESH",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_SHOPKEEPER",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_BLACKSMITH",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_TATTOOIST",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_BARMAN",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_WAREHOUSE_WORKER",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_GAME_MASTER",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_FEMALE_BARMAID",
    "CREATURE_KNOTHOLE_GLADE_VILLAGER_FEMALE_UNEMPLOYED",
    "CREATURE_TEMPORARY_HACKED_ENEMY_GUARD",
    "CREATURE_TEMPORARY_HACKED_ENEMY_GUARD_CROSSBOW",
    "CREATURE_ORCHARD_FARMHAND",
    "CREATURE_BS_VILLAGER_TEST_BUYER",
    "CREATURE_BS_VILLAGER_TEST_WORKER",
    "CREATURE_OAKVALE_VILLAGER_MALE_BASE",
    "CREATURE_OAKVALE_VILLAGER_MALE_NORMAL_MESH",
    "CREATURE_OAKVALE_VILLAGER_FEMALE_BASE",
    "CREATURE_OAKVALE_VILLAGER_FEMALE_NORMAL_MESH",
    "CREATURE_OAKVALE_VILLAGER_MALE_SHOPKEEPER",
    "CREATURE_OAKVALE_VILLAGER_MALE_FAKE_SHOPKEEPER",
    "CREATURE_OAKVALE_VILLAGER_MALE_BLACKSMITH",
    "CREATURE_OAKVALE_VILLAGER_MALE_BARMAN",
    "CREATURE_OAKVALE_VILLAGER_MALE_WAREHOUSE_WORKER",
    "CREATURE_OAKVALE_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_OAKVALE_VILLAGER_FEMALE_BARMAID",
    "CREATURE_OAKVALE_VILLAGER_FEMALE_UNEMPLOYED",
    "CREATURE_OAKVALE_VILLAGER_GAME_MASTER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_BASE",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_NORMAL_MESH",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_BASE",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_NORMAL_MESH",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_SHOPKEEPER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_SHOPKEEPER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_BLACKSMITH",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_MARKET_TRADER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_TAILOR",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_BARBER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_BARMAN",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_WAREHOUSE_WORKER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_MALE_TEACHER",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_BARMAID",
    "CREATURE_BOWERSTONE_SLUMS_VILLAGER_FEMALE_UNEMPLOYED",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_MALE_BASE",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_MALE_NORMAL_MESH",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_FEMALE_BASE",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_FEMALE_NORMAL_MESH",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_MALE_SHOPKEEPER",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_FEMALE_UNEMPLOYED",
    "CREATURE_BOWERSTONE_POSH_VILLAGER_FEMALE_HELPFUL",
    "CREATURE_DARKWOOD_TRADER_CAMP_SHOPKEEPER",
    "CREATURE_DARKWOOD_TRADER_CAMP_GAME_MASTER",
    "CREATURE_GUILD_VILLAGER_MALE",
    "CREATURE_GUILD_VILLAGER_FEMALE",
    "CREATURE_GUILD_VILLAGER_SERVANT_MALE",
    "CREATURE_GUILD_VILLAGER_SERVANT_FEMALE",
    "CREATURE_GUILD_VILLAGER_INNKEEPER",
    "CREATURE_GUILD_VILLAGER_BARMAID",
    "CREATURE_GUILD_VILLAGER_LIBRARIAN",
    "CREATURE_GUILD_VILLAGER_SHOPKEEPER",
    "CREATURE_GUILD_VILLAGER_TITLE_VENDOR",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_BASE",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_NORMAL_MESH",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_BASE",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_NORMAL_MESH",
    "CREATURE_HOOK_COAST_VILLAGER_MALE",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_SHOPKEEPER",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_SHOPKEEPER",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_BLACKSMITH",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_TAILOR",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_BARMAN",
    "CREATURE_HOOK_COAST_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_BARMAID",
    "CREATURE_HOOK_COAST_VILLAGER_FEMALE_UNEMPLOYED",
    "CREATURE_HOOK_COAST_GAMES_MASTER",
    "CREATURE_KNOTHOLE_ARCHERY_OWNER",
    "CREATURE_HOOK_COAST_WANDERING_TRADER_TEST",
    "CREATURE_SS_VILLAGER_FEMALE",
    "CREATURE_SS_VILLAGER_MALE",
    "CREATURE_SS_VILLAGER_INNKEEPER",
    "CREATURE_SS_VILLAGER_BARMAID",
    "CREATURE_SS_VILLAGER_SMITH",
    "CREATURE_SS_ORACLE_GUARD",
    "CREATURE_SS_GAMES_MASTER",
    "CREATURE_SS_ORACLE_GAMES_MASTER",
    "CREATURE_SS_TAILOR",
    "CREATURE_SS_CHARITY_WORKER",
    "CREATURE_SS_TRADER",
    "CREATURE_SS_VILLAGER_MALE_WAREHOUSE_WORKER",
    "CREATURE_BORDELLO_VILLAGER_BARMAID",
    "CREATURE_BORDELLO_VILLAGER_INNKEEPER",
    "CREATURE_NECROPOLIS_VILLAGER_MALE_UNEMPLOYED",
    "CREATURE_NECROPOLIS_VILLAGER_FEMALE_UNEMPLOYED",
    "EXPLOSIONEARTH_TROLL_RISE_CREATURE_BASE",
    "HIT_LOCATION_CREATURE_DEFAULT",
    "HIT_LOCATION_CREATURE_HEAD",
    "MARKER_CREATURE_GENERATOR-MARKER",
    "MARKER_GLOBAL_CREATURE_GENERATOR",
    "MARKER_CREATURE_GENERATOR_INVISIBLE",
    "MARKER_SET_BAD_CREATURE_GENERATION_AREA",
    "CREATURE_DEMON_DOOR_FACE_01",
    "CREATURE_NW_DEMON_DOOR_FACE_01",
    "CREATURE_ORACLE_HEAD_01",
};

const char* szObjectsList[] = {
    "OBJECT_BASE",
    "OBJECT_FENCE_TEMPLATE",
    "OBJECT_FENCE_PLACEABLE_TEMPLATE",
    "OBJECT_TREE_TEMPLATE",
    "OBJECT_BUILDING_DOOR_TEMPLATE",
    "OBJECT_LOCKABLE_DOOR_TEMPLATE",
    "OBJECT_BED_BASE_TEMPLATE",
    "OBJECT_BED_NORMAL_TEMPLATE",
    "OBJECT_ANIMATING_BED_TEMPLATE",
    "OBJECT_BED_FLOOR_TEMPLATE",
    "OBJECT_CUPBOARD_TEMPLATE",
    "OBJECT_CLOCKHAND_TEMPLATE",
    "OBJECT_GRAPHICAL_FEEDBACK_TEMPLATE",
    "OBJECT_DEGRADABLE_BARRIER_TEMPLATE",
    "OBJECT_SMASHABLE_WINDOW_TEMPLATE",
    "OBJECT_FLORA_TEMPLATE",
    "OBJECT_ITEM_NONHOLDABLE_TEMPLATE",
    "OBJECT_VILLAGE_SOLID_FURNITURE_BASE_TEMPLATE",
    "OBJECT_VILLAGE_SOLID_FURNITURE_TEMPLATE",
    "OBJECT_VILLAGE_SOLID_FURNITURE_SMALL_TEMPLATE",
    "OBJECT_VILLAGE_TAVERN_BAR_TEMPLATE",
    "OBJECT_GRAVE",
    "OBJECT_VILLAGE_SOLID_FURNITURE_REPLACEABLE_TEMPLATE",
    "OBJECT_LANDSCAPE_SOLID_FURNITURE_TEMPLATE",
    "OBJECT_CAVE_TEMPLATE",
    "OBJECT_ROCK_WALKABLE_TEMPLATE",
    "OBJECT_ROCK_IMPASSABLE_TEMPLATE",
    "OBJECT_TREESTUMP_TEMPLATE",
    "OBJECT_STREETLAMP_BASE_TEMPLATE",
    "OBJECT_STREETLAMP_GLOW_TEMPLATE",
    "OBJECT_STREETLAMP_FLAME_TEMPLATE",
    "OBJECT_STREETLAMP_GLOW_UNLIT_TEMPLATE",
    "OBJECT_STREETLAMP_GLOW_LIT_TEMPLATE",
    "OBJECT_STREETLAMP_FLAME_UNLIT_TEMPLATE",
    "OBJECT_STREETLAMP_FLAME_LIT_TEMPLATE",
    "OBJECT_VILLAGE_TAVERN_TABLE_TEMPLATE",
    "OBJECT_VILLAGE_HOME_TABLE_TEMPLATE",
    "OBJECT_VILLAGE_SAWHORSE_TEMPLATE",
    "OBJECT_VILLAGE_ANVIL_TEMPLATE",
    "OBJECT_LANDSCAPE_INTANGIBLE_FURNITURE_TEMPLATE",
    "OBJECT_HOLDABLE_TEMPLATE",
    "OBJECT_HOLDABLE_CLOTHING_TEMPLATE",
    "OBJECT_QUEST_CARD_TEMPLATE",
    "OBJECT_VIGNETTE_CARD_TEMPLATE",
    "OBJECT_SHOT_TEMPLATE",
    "OBJECT_BRIDGE_TEMPLATE",
    "OBJECT_LARGE_STRUCTURE_TEMPLATE",
    "OBJECT_AUTOPICKUP_ITEM_TEMPLATE",
    "OBJECT_TRAP_TEMPLATE",
    "OBJECT_MELEE_WEAPON_TEMPLATE",
    "OBJECT_PROJECTILE_WEAPON_TEMPLATE",
    "OBJECT_PROJECTILE_WEAPON_CROSSBOW_TEMPLATE",
    "OBJECT_PROJECTILE_MISSILE_TEMPLATE",
    "OBJECT_BOW_TEMPLATE",
    "OBJECT_GENERAL_TROPHY_TEMPLATE",
    "OBJECT_CHEST_OPENABLE_TPL",
    "OBJECT_SARCOPHAGUS_OPENABLE_TPL",
    "OBJECT_DEEDS_TEMPLATE",
    "OBJECT_SCRIPT_OBJECT_TEMPLATE",
    "OBJECT_TREASURE_CLUE_BASE",
    "OBJECT_CRATE_TEMPLATE",
    "OBJECT_CRATE_HERO_USABLE_TEMPLATE",
    "OBJECT_SIGNPOST_TEMPLATE",
    "OBJECT_BREAKABLE_BARREL_TEMPLATE",
    "OBJECT_AUGMENTATION_TEMPLATE",
    "OBJECT_HEAD_DECAP_TEMPLATE",
    "OBJECT_BOOK_STORY_TEMPLATE",
    "OBJECT_NAME_TEMPLATE",
    "OBJECT_POTION_TEMPLATE",
    "OBJECT_ARENA_AUDIENCE_TEMPLATE",
    "OBJECT_TATTOO_CARD_TEMPLATE",
    "OBJECT_BUILDING_DESTROYABLE_DOOR_TEMPLATE",
    "OBJECT_VILLAGE_SEAT_TEMPLATE",
    "OBJECT_CHAMPIONS_SEAL_01",
    "OBJECT_HERO_ARENA_LEADERBOARD_01",
    "OBJECT_HERO_ARENA_CENTRE_GATE_01",
    "OBJECT_ARENA_DOORWAY_01",
    "OBJECT_ARENA_EXTERIOR_ENTRANCE_GATE_01",
    "OBJECT_ARENA_HOH_INTERNAL_DOORS_01",
    "OBJECT_ARENA_CELLS_WEAPON_STALL_01",
    "OBJECT_ARENA_AUDIENCE_01",
    "OBJECT_ARENA_AUDIENCE_02",
    "OBJECT_ARENA_AUDIENCE_03",
    "OBJECT_ARENA_AUDIENCE_04",
    "OBJECT_ARENA_AUDIENCE_05",
    "OBJECT_ARENA_AUDIENCE_FLAT_01",
    "OBJECT_ARENA_AUDIENCE_LOPOLY_01",
    "OBJECT_ARENA_AUDIENCE_NOPOLY_01",
    "OBJECT_HERO_ARENA_STATUE_01",
    "OBJECT_HERO_ARENA_STATUE_02",
    "OBJECT_HERO_ARENA_STATUE_03",
    "OBJECT_HERO_ARENA_STATUE_04",
    "OBJECT_HERO_ARENA_STATUE_05",
    "OBJECT_HERO_ARENA_STATUE_SCARLET_ROBE",
    "OBJECT_ARROW_TRAP_01",
    "OBJECT_HERO_ARENA_SPEAR_TRAP_01",
    "OBJECT_HERO_ARENA_BLADES_TRAP_01",
    "OBJECT_GRAVEYARD_COTTAGE_DOOR",
    "OBJECT_BUILDING_WINDOW_HOOKCOAST_01",
    "OBJECT_BUILDING_WINDOW_HOOKCOAST_BROKEN_01",
    "OBJECT_BUILDING_WINDOW_HOOKCOAST_SHOP",
    "OBJECT_BUILDING_WINDOW_HOOKCOAST_BROKEN_SHOP",
    "OBJECT_PRISON_EXTERIOR_LOWPOLY_01",
    "OBJECT_PRISON_COURTYARD_02",
    "OBJECT_PRISON_COURTYARD_03",
    "OBJECT_PRISON_COURTYARD_04",
    "OBJECT_PRISON_COURTYARD_05",
    "OBJECT_PRISON_COURTYARD_06",
    "OBJECT_PRISON_COURTYARD_07",
    "OBJECT_PRISON_COURTYARD_08",
    "OBJECT_PRISON_COURTYARD_09",
    "OBJECT_PRISON_COURTYARD_10",
    "OBJECT_PRISON_COURTYARD_11",
    "OBJECT_PRISON_COURTYARD_12",
    "OBJECT_PRISON_COURTYARD_13",
    "OBJECT_PRISON_EXTERIOR_01",
    "OBJECT_PRISON_EXTERIOR_02",
    "OBJECT_PRISON_EXTERIOR_03",
    "OBJECT_PRISON_EXTERIOR_04",
    "OBJECT_PRISON_EXTERIOR_05",
    "OBJECT_PRISON_EXTERIOR_06",
    "OBJECT_WW_SWORD_IN_STONE_01",
    "OBJECT_WW_SWORD_IN_STONE_BASE_01",
    "OBJECT_WW_SWORD_IN_STONE_PLACEHOLDER_01",
    "OBJECT_SUMMONER_LIGHTNING_ORB_BASE",
    "OBJECT_EARTH_TROLL_TEAR",
    "OBJECT_EARTH_TROLL_PROJECTILE",
    "OBJECT_ROCK_TROLL_ROCK",
    "OBJECT_ROCK_TROLL_ROCK_SMALL",
    "OBJECT_ROCK_TROLL_TRAP",
    "OBJECT_ICE_TROLL_TRAP",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_01",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_02",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_03",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_04",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_05",
    "OBJECT_ROCK_TROLL_CAMOUFLAGE_06",
    "OBJECT_ICE_TROLL_ICICLE_TRAP",
    "OBJECT_SUMMONER_LIGHTNING_ORB",
    "OBJECT_SUMMONER_LIGHTNING_ORB_ATTACK_FIREHEART",
    "OBJECT_DRAGON_SCALE_TEST",
    "OBJECT_WOOD_NYMPH_THORN_TRAP",
    "OBJECT_WATER_NYMPH_ICE_TRAP",
    "OBJECT_SUCCUBUS_NYMPH_TRAP",
    "OBJECT_QUEEN_NYMPH_TRAP",
    "OBJECT_SCORPION_KING_TAIL_TRAP",
    "OBJECT_TROLL_GEM",
    "OBJECT_AMBIENT_BIRD_SPARROW",
    "OBJECT_JACK_OF_BLADES_SHIELD",
    "OBJECT_MINION_WARDOG",
    "GOLD_FAMILY_01",
    "REWARD_GUARD_01",
    "REWARD_GUARD_02",
    "REWARD_GUARD_03",
    "REWARD_VILLAGER_01",
    "REWARD_VILLAGER_02",
    "REWARD_VILLAGER_03",
    "REWARD_TRADER_01",
    "REWARD_TRADER_02",
    "REWARD_TRADER_03",
    "REWARD_BANDIT_01",
    "REWARD_BANDIT_02",
    "REWARD_BANDIT_03",
    "REWARD_BANDIT_LEADER_01",
    "REWARD_BANDIT_LEADER_02",
    "REWARD_BANDIT_LEADER_03",
    "REWARD_WASP_01",
    "REWARD_WASP_02",
    "REWARD_WASP_03",
    "REWARD_BEETLE_01",
    "REWARD_BEETLE_02",
    "REWARD_BALVERINE_01",
    "REWARD_BALVERINE_02",
    "REWARD_NYMPH_01",
    "REWARD_NYMPH_02",
    "REWARD_NYMPH_03",
    "REWARD_TROLL_01",
    "REWARD_TROLL_02",
    "REWARD_TROLL_03",
    "REWARD_HOBBE_01",
    "REWARD_HOBBE_02",
    "REWARD_HOBBE_03",
    "REWARD_HOBBE_04",
    "REWARD_HOBBE_05",
    "REWARD_UNDEAD_01",
    "REWARD_UNDEAD_02",
    "REWARD_UNDEAD_03",
    "REWARD_MINION_01",
    "REWARD_MINION_02",
    "REWARD_SCORPION_01",
    "OBJECT_MARKER",
    "OBJECT_ABILITY_DUMMY_TEMPLATE",
    "OBJECT_ABILITY_FORCE_PUSH_DUMMY",
    "OBJECT_ABILITY_TIME_SPELL_DUMMY",
    "OBJECT_ABILITY_ENFLAME_SPELL_DUMMY",
    "OBJECT_ABILITY_PHYSICAL_SHIELD_SPELL_DUMMY",
    "OBJECT_ABILITY_TURNCOAT_SPELL_DUMMY",
    "OBJECT_ABILITY_DRAIN_LIFE_SPELL_DUMMY",
    "OBJECT_ABILITY_RAISE_DEAD_SPELL_DUMMY",
    "OBJECT_ABILITY_BERSERK_DUMMY",
    "OBJECT_ABILITY_DOUBLE_STRIKE_DUMMY",
    "OBJECT_ABILITY_SUMMON_SPELL_DUMMY",
    "OBJECT_ABILITY_LIGHTNING_SPELL_DUMMY",
    "OBJECT_ABILITY_BATTLE_CHARGE_DUMMY",
    "OBJECT_ABILITY_ASSASSIN_RUSH_DUMMY",
    "OBJECT_ABILITY_HEAL_LIFE_SPELL_DUMMY",
    "OBJECT_ABILITY_GHOST_SWORD_SPELL_DUMMY",
    "OBJECT_ABILITY_FIREBALL_SPELL_DUMMY",
    "OBJECT_ABILITY_MULTI_ARROW_DUMMY",
    "OBJECT_ABILITY_DIVINE_WRATH_SPELL_DUMMY",
    "OBJECT_ABILITY_UNHOLY_POWER_SPELL_DUMMY",
    "OBJECT_SHARPENING_AUGMENTATION",
    "OBJECT_PIERCING_AUGMENTATION",
    "OBJECT_SILVER_AUGMENTATION",
    "OBJECT_FLAME_AUGMENTATION",
    "OBJECT_HOBBE_KILLER_AUGMENTATION",
    "OBJECT_LIGHTNING_AUGMENTATION",
    "OBJECT_EXPERIENCE_AUGMENTATION",
    "OBJECT_HEALTH_AUGMENTATION",
    "OBJECT_MANA_AUGMENTATION",
    "OBJECT_BANDIT_SLAYER_AUGMENTATION",
    "OBJECT_BANDIT_RING_GATE_DOOR_01",
    "OBJECT_BANDIT_RING_GATE_WALL_01",
    "OBJECT_BANDIT_GATE_01",
    "OBJECT_BANDIT_GATE_02",
    "OBJECT_BANDIT_GATE_SURROUND_01",
    "OBJECT_BANDIT_GATE_SURROUND_02",
    "OBJECT_BANDIT_GATE_PINS_01",
    "OBJECT_BLOODSTONE_TAVERN_BUCKET_01",
    "OBJECT_BANDIT_TAVERN_STOOL_01",
    "OBJECT_BANDIT_TAVERN_STOOL_02",
    "OBJECT_BANDIT_TAVERN_STOOL_03",
    "OBJECT_BANDIT_TAVERN_TABLE_01",
    "OBJECT_BANDIT_TAVERN_TABLE_02",
    "OBJECT_BANDIT_FISTICUFFS_RING",
    "OBJECT_BANDIT_BLANKET_01",
    "OBJECT_BANDIT_BLANKET_02",
    "OBJECT_BANDIT_PRISON_CART",
    "OBJECT_BANDIT_FIREWOOD_01",
    "OBJECT_BANDIT_FIREWOOD_02",
    "OBJECT_BANDIT_LOGSEAT_01",
    "OBJECT_BANDIT_LOGSEAT_02",
    "OBJECT_BANDIT_LOGSEAT_03",
    "OBJECT_BANDIT_TREASURE_TROVE_01",
    "OBJECT_BANDIT_BED_01",
    "OBJECT_BANDIT_BED_02",
    "OBJECT_BANDIT_CAGE_01",
    "OBJECT_BANDIT_CAGE_02",
    "OBJECT_BANDIT_CAGE_DOOR_01",
    "OBJECT_BANDIT_MARKET_STALL_CLOSED_01",
    "OBJECT_BANDIT_MARKET_STALL_OPEN_01",
    "OBJECT_BANDIT_BAR_01",
    "OBJECT_BANDIT_ROOTED_STUMP_01",
    "OBJECT_BANDIT_PLUNDER_01",
    "OBJECT_BANDIT_PLUNDER_02",
    "OBJECT_BANDIT_PLUNDER_03",
    "OBJECT_BANDIT_CHICKEN_ON_STICK_01",
    "OBJECT_BANDIT_CAMP_PATH_FENCE_01",
    "OBJECT_BANDIT_BANNER_01",
    "OBJECT_BANDIT_BANNER_02",
    "OBJECT_BANDIT_BANNER_SMALL_01",
    "OBJECT_BANDIT_BANNER_SMALL_02",
    "OBJECT_BANDIT_BANNER_TALL_01",
    "OBJECT_BANDIT_BANNER_TALL_02",
    "OBJECT_BANDIT_COOKING_FIRE_UNLIT",
    "OBJECT_BANDIT_CAMPFIRE_TEMPLATE",
    "OBJECT_BANDIT_CAMPFIRE_NOFIRE",
    "OBJECT_BANDIT_CAMPFIRE",
    "OBJECT_BANDIT_CAMPFIRE_MEDIUM",
    "OBJECT_BANDIT_CAMPFIRE_MEDIUM_NONSITTING",
    "OBJECT_BANDIT_BONFIRE_01",
    "OBJECT_LIT_BRAZIER_TORCH",
    "OBJECT_UNLIT_BRAZIER_TORCH",
    "OBJECT_BANDIT_RAG_TORCH_LIT",
    "OBJECT_BANDIT_RAG_TORCH_UNLIT",
    "OBJECT_BANDIT_TORCH_LIT",
    "OBJECT_BANDIT_TORCH_UNLIT",
    "OBJECT_BANDIT_BARREL_01",
    "OBJECT_BANDIT_BARREL_BROKEN_01",
    "OBJECT_BANDIT_BARREL_BROKEN_02",
    "OBJECT_BANDIT_BARREL_SMASHED_01",
    "OBJECT_BANDIT_BARREL_SMASHED_02",
    "OBJECT_BANDIT_CRATE_01",
    "OBJECT_BANDIT_CRATE_BROKEN_01",
    "OBJECT_BANDIT_CRATE_BROKEN_02",
    "OBJECT_BANDIT_CRATE_SMASHED_01",
    "OBJECT_BANDIT_CRATE_SMASHED_02",
    "OBJECT_BANDIT_PALISADES_01",
    "OBJECT_BANDIT_PALISADES_02",
    "OBJECT_BANDIT_PALISADES_SMALL_01",
    "OBJECT_BANDIT_PALISADES_SMALL_02",
    "OBJECT_BANDIT_HEAD_DECAP_01",
    "OBJECT_OAKVALE_FENCEGATE_01",
    "OBJECT_OAKVALE_FENCEGATE_02",
    "OBJECT_OAKVALE_FENCEGATE_03",
    "OBJECT_OAKVALE_FENCEGATE_04",
    "OBJECT_OAKVALE_FENCEGATE_05",
    "OBJECT_OAKVALE_FENCE_01",
    "OBJECT_OAKVALE_FENCE_02",
    "OBJECT_OAKVALE_FENCE_BROKEN_01",
    "OBJECT_OAKVALE_FENCEPOST_01",
    "OBJECT_OAKVALE_FENCEPOST_02",
    "OBJECT_OAKVALE_FENCETRIPLE_01",
    "OBJECT_OAKVALE_FENCETRIPLE_BROKEN_01",
    "OBJECT_OAKVALE_FENCETRIPLE_02",
    "OBJECT_ROPEFENCE",
    "OBJECT_ROPEPOST",
    "OBJECT_RAILING_01",
    "OBJECT_RAILING_02",
    "OBJECT_ARCHBRIDGE_MEDIUM",
    "OBJECT_ARCHBRIDGE_SHORT",
    "OBJECT_WALL_01",
    "OBJECT_WALL_02",
    "OBJECT_WALL_BROKEN_01",
    "OBJECT_WALL_END_01",
    "OBJECT_RAILING_MID",
    "OBJECT_RAILING_END",
    "OBJECT_BRIDGE_MID",
    "OBJECT_BRIDGE_END",
    "OBJECT_BRIDGE",
    "OBJECT_BS_FLAGS_01",
    "OBJECT_BS_NORTH_FOUNTAIN_01",
    "OBJECT_BS_NORTH_ARCH_01",
    "OBJECT_BS_SLUM_INN_BAR_01",
    "OBJECT_BS_SLUM_HAPENNY_BOARD_01",
    "OBJECT_BS_SLUM_HAPENNY_BOARD_COIN_GOLD_01",
    "OBJECT_BS_SLUM_HAPENNY_BOARD_COIN_SILVER_01",
    "OBJECT_HAPENNY_BOARD_ARROW",
    "OBJECT_GOLF_BOARD_ARROW",
    "OBJECT_BS_SLUM_CRATE_UNBREAKABLE_01",
    "OBJECT_BS_NORTH_POSH_SHOP_COUNTER_01",
    "OBJECT_BS_SLUMS_GIFT_SHOP_COUNTER_01",
    "OBJECT_BS_CHAIR_01",
    "OBJECT_BS_CHAIR_KID_01",
    "OBJECT_BS_CHAIR_KID_02",
    "OBJECT_BS_NORTH_GATEHOUSE_JAIL_DOOR_01",
    "OBJECT_BS_SLUM_BLACKSMITH_ANVIL_01",
    "OBJECT_BS_SLUM_BLACKSMITH_FORGE_01",
    "OBJECT_BS_SLUM_BLACKSMITH_WEAPON_RACK_01",
    "OBJECT_BS_GIBBET_HILL_BRIDGE_01",
    "OBJECT_BS_SLUM_INN_CELLAR_DOORS_01",
    "OBJECT_BS_SLUM_INN_CELLAR_HATCH_01",
    "OBJECT_BS_SWORD_PARTIAL_01",
    "OBJECT_BS_GATEHOUSE_MAIN_DOORS_01",
    "OBJECT_BS_SLUM_WALL_TOWER_01",
    "OBJECT_BS_SLUM_WALL_CORNER_01",
    "OBJECT_BS_SLUM_WALL_STRAIGHT_10M_01",
    "OBJECT_BS_SLUM_WALL_STRAIGHT_20M_01",
    "OBJECT_BS_SLUM_WALL_INCLINE_10M_01",
    "OBJECT_BS_SLUM_WALL_BUTT_01",
    "OBJECT_BS_WASHINGLINE_01",
    "OBJECT_BS_WASHINGLINE_02",
    "OBJECT_BS_WASHINGLINE_03",
    "OBJECT_BS_WASHINGLINE_04",
    "OBJECT_BS_WASHINGLINE_05",
    "OBJECT_BS_RUBBISH_PILE_01",
    "OBJECT_BS_RUBBISH_PILE_02",
    "OBJECT_BS_RUBBISH_PILE_03",
    "OBJECT_BS_NORTH_TOPIARY_BUSH_BALL",
    "OBJECT_BS_NORTH_TOPIARY_BUSH_CONE",
    "OBJECT_BS_NORTH_TOPIARY_HEDGE_CURVED",
    "OBJECT_BS_NORTH_TOPIARY_HEDGE_STRAIGHT",
    "OBJECT_BS_TOPIARY_BALL_STACKED_01",
    "OBJECT_BS_TOPIARY_BALL_TALL_01",
    "OBJECT_BS_TOPIARY_BALL_SHORT_01",
    "OBJECT_BS_TOPIARY_BALL_01",
    "OBJECT_BS_TOPIARY_CONE_01",
    "OBJECT_BS_TOPIARY_SQUARE_01",
    "OBJECT_BS_TOPIARY_HEDGE_CORNER_01",
    "OBJECT_BS_TOPIARY_HEDGE_CURVE_90_01",
    "OBJECT_BS_TOPIARY_HEDGE_CURVE_90_SMALL",
    "OBJECT_BS_TOPIARY_HEDGE_CURVE_180_01",
    "OBJECT_BS_TOPIARY_HEDGE_STRAIGHT_LONG_01",
    "OBJECT_BS_TOPIARY_HEDGE_STRAIGHT_SHORT_01",
    "OBJECT_BS_BANNER_01",
    "OBJECT_BS_BANNER_02",
    "OBJECT_BS_BANNER_03",
    "OBJECT_BS_BANNER_04",
    "OBJECT_BS_BANNER_WEAPON_STORE_01",
    "OBJECT_MARKETSTALL_BLUE_OPEN_01",
    "OBJECT_MARKETSTALL_BLUE_CLOSED_01",
    "OBJECT_MARKETSTALL_GREEN_OPEN_01",
    "OBJECT_MARKETSTALL_GREEN_CLOSED_01",
    "OBJECT_MARKETSTALL_PURPLE_OPEN_01",
    "OBJECT_MARKETSTALL_PURPLE_CLOSED_01",
    "OBJECT_MARKETSTALL_RED_OPEN_01",
    "OBJECT_MARKETSTALL_RED_CLOSED_01",
    "OBJECT_STREETLAMP_LIT_DOUBLE_01",
    "OBJECT_STREETLAMP_UNLIT_DOUBLE_01",
    "OBJECT_STREETLAMP_LIT_SINGLE_01",
    "OBJECT_STREETLAMP_UNLIT_SINGLE_01",
    "OBJECT_BS_GROG_BARREL_01",
    "OBJECT_BS_GROG_BOTTLES_01",
    "OBJECT_BS_GROG_BOTTLE_BLUE_01",
    "OBJECT_BS_GROG_BOTTLE_GREEN_01",
    "OBJECT_BS_GROG_BOTTLE_WHISKY_01",
    "OBJECT_BS_GROG_BOTTLE_WINE_01",
    "OBJECT_BS_RUG_ROUND_BLACKSUN_01",
    "OBJECT_BS_RUG_ROUND_DIAMONDS_01",
    "OBJECT_BS_RUG_ROUND_REDSUN_01",
    "OBJECT_BS_RUG_ROUND_SWIRLS_01",
    "OBJECT_BS_RUG_SQUARE_BLUE_01",
    "OBJECT_BS_RUG_SQUARE_BROWN_01",
    "OBJECT_BS_RUG_SQUARE_RAVEN_01",
    "OBJECT_BS_RUG_SQUARE_SCALES_01",
    "OBJECT_BS_FLOORGLOBE_01",
    "OBJECT_BS_BOOKCUPBOARD_01",
    "OBJECT_BS_SLUM_TABLE_01",
    "OBJECT_BS_SLUM_TABLE_02",
    "OBJECT_BS_SLUM_TABLE_03",
    "OBJECT_BS_SLUM_BED_BROWN_01",
    "OBJECT_BS_SLUM_BED_GREY_01",
    "OBJECT_BS_TABLELAMP_LIT_01",
    "OBJECT_BS_TABLELAMP_UNLIT_01",
    "OBJECT_BS_TABLELAMP_LIT_02",
    "OBJECT_BS_TABLELAMP_UNLIT_02",
    "OBJECT_BS_TEACHERS_DESK_01",
    "OBJECT_BS_CASTLE_STATUE_01",
    "OBJECT_BS_CASTLE_STATUE_02",
    "OBJECT_BS_CASTLE_STATUE_03",
    "OBJECT_BS_CASTLE_STATUE_04",
    "OBJECT_BS_CASTLE_STATUE_05",
    "OBJECT_BS_DOOR_SMASHED_01",
    "OBJECT_BUILDING_WINDOW_BOWERSTONE_01",
    "OBJECT_BUILDING_WINDOW_BOWERSTONE_02",
    "OBJECT_BUILDING_WINDOW_BS_BROKEN",
    "OBJECT_CASTLE_LOWPOLY",
    "OBJECT_BS_DOOR_MAYORESS_01",
    "OBJECT_BS_DOOR_MAYORESS_METAL_01",
    "OBJECT_BS_CASTLE_ENTRANCE_DOOR_01",
    "OBJECT_BS_MAYORESS_BED",
    "OBJECT_BS_MALE_DECAP_HEAD_01",
    "OBJECT_BS_FEMALE_DECAP_HEAD_01",
    "OBJECT_BS_GUARD_HEAD_DECAP_01",
    "OBJECT_BS_BARBERS_BOTTLES_01",
    "OBJECT_BS_BARBERS_CHAIR_01",
    "OBJECT_BS_BARBERS_HAT_STAND_01",
    "OBJECT_BS_BARBERS_TABLE_01",
    "OBJECT_BS_BARBERS_SHELF_01",
    "OBJECT_BS_BARBERS_SINK_01",
    "OBJECT_BS_BARBERS_STOVE_01",
    "OBJECT_BS_BARBERS_PICTURE_FRAME_01",
    "OBJECT_DEAD_VILLAGER_01",
    "OBJECT_DEAD_VILLAGER_02",
    "OBJECT_DEAD_VILLAGER_03",
    "OBJECT_BARRICADE",
    "OBJECT_TREE_DUMMY_COLLISION",
    "OBJECT_ORCHARD_FARM_MAIN_GATE",
    "OBJECT_ORCHARD_BARN_PANEL_01",
    "OBJECT_ORCHARD_FARM_MAIN_GATE_GATES",
    "OBJECT_ORCHARD_FARM_MINE_BLOCKED",
    "OBJECT_ORCHARD_FARM_MINE_BLOCKAGE_01",
    "OBJECT_ORCHARD_FARM_MINE_ENTRANCE_UNBLOCKED_01",
    "OBJECT_VILLAGE_GATE_GREEN",
    "OBJECT_SCARECROW_SCARY",
    "OBJECT_SCARECROW_HAPPY",
    "OBJECT_SCARECROW_HAPPY_WITH_HAT",
    "OBJECT_ORCHARD_SCRUMPY_JUG_01",
    "OBJECT_ORCHARD_CRATE_SMALL_01",
    "OBJECT_ORCHARD_CRATE_SMALL_FLAT_01",
    "OBJECT_ORCHARD_SCRUMPY_CRATE_01",
    "OBJECT_ORCHARD_SCRUMPY_CRATE_OPEN_01",
    "OBJECT_ORCHARD_SCRUMPY_CRATE_EMPTY_01",
    "OBJECT_ORCHARD_SCRUMPY_CRATE_CLOSED_01",
    "OBJECT_ORCHARD_CHICKEN_COOP_01",
    "OBJECT_ORCHARD_WICKER_BASKET_APPLES_01",
    "OBJECT_ORCHARD_WICKER_BASKET_EMPTY_01",
    "OBJECT_PICNIC_BASKET_01",
    "OBJECT_PICNIC_RUG_BLUE_01",
    "OBJECT_PICNIC_RUG_PINK_01",
    "OBJECT_PICNIC_RUG_WHITE_01",
    "OBJECT_PICNIC_RUG_YELLOW_01",
    "OBJECT_BENCH",
    "OBJECT_HORNETS_NEST_01",
    "OBJECT_GENERIC_BARTAP_01",
    "OBJECT_LOOKOUT_POINT_STATUE",
    "OBJECT_LOOKOUT_POINT_KNIGHT_STATUE_01",
    "OBJECT_LOOKOUT_POINT_GRIFFON_STATUE_01",
    "OBJECT_WINDMILL_SAILS",
    "OBJECT_BRIGHTWOOD_STEPPING_BRIDGE_SHORT",
    "OBJECT_BRIGHTWOOD_STEPPING_BRIDGE_MEDIUM",
    "OBJECT_BRIGHTWOOD_STEPPING_BRIDGE_LONG",
    "OBJECT_BRIGHTWOOD_STEPPING_BRIDGE_LONG_BLOCKED",
    "OBJECT_BRIGHTWOOD_JETTY",
    "OBJECT_BRIGHTWOOD_JETTY_02",
    "OBJECT_WOODEN_BRIDGE_01",
    "OBJECT_BW_BRIDGE_WOODEN_CRANKY_BROKEN",
    "OBJECT_BW_BRIDGE_WOODEN_CRANKY_DOUBLE",
    "OBJECT_BW_BRIDGE_WOODEN_CRANKY_SINGLE",
    "OBJECT_BW_BRIDGE_WOODEN_RAVINE_01",
    "OBJECT_BW_BRIDGE_WOODEN_RAVINE_BROKEN_01",
    "OBJECT_STONE_BRIDGE_02",
    "OBJECT_STONE_BRIDGE_BROKEN_02",
    "OBJECT_STONE_BRIDGE_LONG_02",
    "OBJECT_STONE_BRIDGE_SHORT_02",
    "OBJECT_WALL_SMALL_STRAIGHT_01",
    "OBJECT_WALL_SMALL_BROKEN_01",
    "OBJECT_WALL_SMALL_BROKEN_END_01",
    "OBJECT_WALL_SMALL_STRAIGHT_BIG_01",
    "OBJECT_WALL_SMALL_STRAIGHT_BIG_BROKEN_01",
    "OBJECT_WALL_SMALL_STRAIGHT_BIG_BROKEN_02",
    "OBJECT_WALL_SMALL_CURVED_01",
    "OBJECT_WALL_SMALL_CURVED_02",
    "OBJECT_WALL_SMALL_CURVED_BIG_01",
    "OBJECT_WALL_SMALL_CURVED_BIG_BROKEN_01",
    "OBJECT_WALL_SMALL_CURVED_180",
    "OBJECT_WALL_SMALL_CURVED_180_BROKEN",
    "OBJECT_WALL_SMALL_RIGHTANGLE_SMALL_01",
    "OBJECT_WALL_SMALL_RIGHTANGLE_BIG_01",
    "OBJECT_WALL_SMALL_POST_01",
    "OBJECT_WALL_SMALL_POST_02",
    "OBJECT_WALL_SMALL_POST_03",
    "OBJECT_GREATWOOD_FALLEN_TREE",
    "OBJECT_GREATWOOD_TREESTUMP_01",
    "OBJECT_GREATWOOD_TREESTUMP_02",
    "OBJECT_GREATWOOD_TREESTUMP_03",
    "OBJECT_GREATWOOD_TREESTUMP_04",
    "OBJECT_GREATWOOD_TREESTUMP_05",
    "OBJECT_BOWERSTONE_TREE_NO_COLLISION",
    "OBJECT_BW_SHOP_COUNTER_GENERIC_01_TO_06",
    "OBJECT_BW_SHOP_COUNTER_GENERIC_07",
    "OBJECT_BW_SHOP_COUNTER_GENERIC_08",
    "OBJECT_BW_SHOP_COUNTER_GENERIC_09_TO_10",
    "OBJECT_BW_SHOP_TABLE_01_TO_02",
    "OBJECT_BW_SHOP_TABLE_03",
    "OBJECT_BW_SHOP_TABLE_04",
    "OBJECT_BW_SHOP_TABLE_05_TO_06",
    "OBJECT_BW_SHOP_TABLE_07_TO_09",
    "OBJECT_BW_SHOP_TABLE_10",
    "OBJECT_OAKVALE_TAVERN_BAR",
    "OBJECT_BED_GRANNIES_CAVE_01",
    "OBJECT_VILLAGER_CORPSE_01",
    "OBJECT_VILLAGER_CORPSE_02",
    "OBJECT_VILLAGER_CORPSE_03",
    "OBJECT_OAKVALE_FIREPLACE_01",
    "OBJECT_OAKVALE_FIREPLACE_02",
    "OBJECT_FLOWER_JUG_01",
    "OBJECT_FLOWER_JUG_EMPTY_01",
    "OBJECT_FLOWER_JUG_02",
    "OBJECT_FLOWER_JUG_EMPTY_02",
    "OBJECT_BOOKSHELF_01",
    "OBJECT_BOOKSHELF_02",
    "OBJECT_RUG_01",
    "OBJECT_RUG_02",
    "OBJECT_RUG_BEARSKIN",
    "OBJECT_RUG_BEARSKIN_POLAR",
    "OBJECT_BED",
    "OBJECT_BED_01",
    "OBJECT_BED_02",
    "OBJECT_BED_03",
    "OBJECT_TEST_BED",
    "OBJECT_BED_FLOOR",
    "OBJECT_CHAIR_01",
    "OBJECT_TABLE_SMALL_CROPPED_01",
    "OBJECT_TABLE_LARGE_RECTANGULAR_01",
    "OBJECT_TABLE_MEDIUM_RECTANGULAR_01",
    "OBJECT_TABLE_MEDIUM_RECTANGULAR_01D",
    "OBJECT_TABLE_SMALL_SQUARE_01",
    "OBJECT_TABLE_SMALL_SQUARE_01D",
    "OBJECT_TABLE_LARGE_ROUND_01",
    "OBJECT_TABLE_SMALL_ROUND_01",
    "OBJECT_CUPBOARD_MEDIUM",
    "OBJECT_CUPBOARD_TALL",
    "OBJECT_CUPBOARD_TALL_SPLIT",
    "OBJECT_CABINET_SMALL",
    "OBJECT_PICTURE_CIRCULAR_01",
    "OBJECT_PICTURE_CIRCULAR_02",
    "OBJECT_PICTURE_CIRCULAR_03",
    "OBJECT_PICTURE_CIRCULAR_04",
    "OBJECT_PICTURE_CIRCULAR_05",
    "OBJECT_PICTURE_FRAMED_01",
    "OBJECT_PICTURE_FRAMED_02",
    "OBJECT_PICTURE_FRAMED_03",
    "OBJECT_PICTURE_FRAMED_04",
    "OBJECT_PICTURE_FRAMED_05",
    "OBJECT_PICTURE_FRAMED_06",
    "OBJECT_PICTURE_FRAMED_07",
    "OBJECT_PICTURE_FRAMED_08",
    "OBJECT_SHOP_COUNTER_LEFT_01",
    "OBJECT_SHOP_COUNTER_RIGHT_01",
    "OBJECT_SHOP_COUNTER_STRAIGHT_01",
    "OBJECT_TABLE_SMALL",
    "OBJECT_SHOP_TABLE",
    "OBJECT_BHF_SIGNPOST_01",
    "OBJECT_BHF_BED_LEVEL_01",
    "OBJECT_BHF_BED_LEVEL_02",
    "OBJECT_BHF_BED_LEVEL_03",
    "OBJECT_BHF_BED_LEVEL_04",
    "OBJECT_BHF_BOOKSHELF_LEVEL_01",
    "OBJECT_BHF_BOOKSHELF_LEVEL_02",
    "OBJECT_BHF_BOOKSHELF_LEVEL_03",
    "OBJECT_BHF_BOOKSHELF_LEVEL_04",
    "OBJECT_BHF_CHAIR_LEVEL_01",
    "OBJECT_BHF_CHAIR_LEVEL_02",
    "OBJECT_BHF_CHAIR_LEVEL_03",
    "OBJECT_BHF_CHAIR_LEVEL_04",
    "OBJECT_BHF_CABINET_HIGH_LEVEL_01",
    "OBJECT_BHF_CABINET_HIGH_LEVEL_02",
    "OBJECT_BHF_CABINET_HIGH_LEVEL_03",
    "OBJECT_BHF_CABINET_HIGH_LEVEL_04",
    "OBJECT_BHF_CABINET_LOW_LEVEL_01",
    "OBJECT_BHF_CABINET_LOW_LEVEL_02",
    "OBJECT_BHF_CABINET_LOW_LEVEL_03",
    "OBJECT_BHF_CABINET_LOW_LEVEL_04",
    "OBJECT_BHF_DOOR_BS_LEVEL_02",
    "OBJECT_BHF_DOOR_BS_LEVEL_03",
    "OBJECT_BHF_DOOR_BS_LEVEL_04",
    "OBJECT_BHF_DOOR_HKC_LEVEL_02",
    "OBJECT_BHF_DOOR_HKC_LEVEL_03",
    "OBJECT_BHF_DOOR_HKC_LEVEL_04",
    "OBJECT_BHF_DOOR_SS_LEVEL_02",
    "OBJECT_BHF_DOOR_SS_LEVEL_03",
    "OBJECT_BHF_DOOR_SS_LEVEL_04",
    "OBJECT_BHF_TABLELAMP_LIT_LEVEL_01",
    "OBJECT_BHF_TABLELAMP_UNLIT_LEVEL_01",
    "OBJECT_BHF_TABLELAMP_LIT_LEVEL_02",
    "OBJECT_BHF_TABLELAMP_UNLIT_LEVEL_02",
    "OBJECT_BHF_TABLELAMP_LIT_LEVEL_03",
    "OBJECT_BHF_TABLELAMP_UNLIT_LEVEL_03",
    "OBJECT_BHF_TABLELAMP_LIT_LEVEL_04",
    "OBJECT_BHF_TABLELAMP_UNLIT_LEVEL_04",
    "OBJECT_BHF_ORNAMENT_LEVEL_02",
    "OBJECT_BHF_ORNAMENT_LEVEL_03",
    "OBJECT_BHF_ORNAMENT_LEVEL_04_A",
    "OBJECT_BHF_ORNAMENT_LEVEL_04_B",
    "OBJECT_BHF_PICFRAME_LEVEL_03_A",
    "OBJECT_BHF_PICFRAME_LEVEL_03_B",
    "OBJECT_BHF_PICFRAME_LEVEL_03_C",
    "OBJECT_BHF_PICFRAME_LEVEL_03_D",
    "OBJECT_BHF_PICFRAME_LEVEL_03_E",
    "OBJECT_BHF_PICFRAME_LEVEL_03_F",
    "OBJECT_BHF_PICFRAME_LEVEL_04_A",
    "OBJECT_BHF_PICFRAME_LEVEL_04_B",
    "OBJECT_BHF_PICFRAME_LEVEL_04_C",
    "OBJECT_BHF_PICFRAME_LEVEL_04_D",
    "OBJECT_BHF_PICFRAME_LEVEL_04_E",
    "OBJECT_BHF_PICFRAME_LEVEL_04_F",
    "OBJECT_BHF_RUG_LEVEL_03_A",
    "OBJECT_BHF_RUG_LEVEL_03_B",
    "OBJECT_HAIR_TEMPLATE",
    "OBJECT_CLOTHING_FOOTWEAR",
    "OBJECT_CLOTHING_TROUSERS",
    "OBJECT_CLOTHING_SHIRT",
    "OBJECT_CLOTHING_GLOVES",
    "OBJECT_CLOTHING_HAT",
    "OBJECT_HERO_HAIR",
    "OBJECT_HERO_HAIR_SHORT_01",
    "OBJECT_HERO_HAIR_PONYTAIL_01",
    "OBJECT_HERO_HAIR_YOUNG_01",
    "OBJECT_HERO_HAIR_MOHAWK_01",
    "OBJECT_HERO_HAIR_PLATS_01",
    "OBJECT_HERO_HAIR_BASIN_01",
    "OBJECT_HERO_HAIR_BUZZ_01",
    "OBJECT_HERO_NO_HAIR_01",
    "OBJECT_HERO_BEARD_01",
    "OBJECT_HERO_BEARD_02",
    "OBJECT_HERO_BEARD_03",
    "OBJECT_HERO_BEARD_MUTTON_01",
    "OBJECT_HERO_BEARD_LONG_01",
    "OBJECT_HERO_BEARD_CHIN_01",
    "OBJECT_HERO_BEARD_STRIP_01",
    "OBJECT_HERO_BEARD_TRAMP_01",
    "OBJECT_HERO_BEARD_WATSON_01",
    "OBJECT_HERO_NO_BEARD_OR_TASH",
    "OBJECT_HERO_TASHTRADER_01",
    "OBJECT_HERO_TASHKHG_01",
    "OBJECT_HERO_TASHSHERIFF_01",
    "OBJECT_HERO_TASHCHINESE_01",
    "OBJECT_HERO_TASHSMALL_01",
    "OBJECT_HERO_TASHSMITH_01",
    "OBJECT_HERO_BOOTS",
    "OBJECT_HERO_BOOTS_GOOD",
    "OBJECT_HERO_BOOTS_EVIL",
    "OBJECT_HERO_BOOTS_STEALTH",
    "OBJECT_HERO_BOOTS_STEALTH_RED",
    "OBJECT_HERO_BOOTS_PLATINUM",
    "OBJECT_HERO_BOOTS_ARMOUR",
    "OBJECT_HERO_BOOTS_BANDITCAMP",
    "OBJECT_HERO_BOOTS_ARMOUR_EVIL",
    "OBJECT_HERO_BOOTS_ARMOUR_GOOD",
    "OBJECT_HERO_BOOTS_WILLROBE",
    "OBJECT_HERO_BOOTS_WILLROBE_GOOD",
    "OBJECT_HERO_BOOTS_WILLROBE_EVIL",
    "OBJECT_HERO_BOOTS_LEATHERARMOUR",
    "OBJECT_HERO_BOOTS_LEATHERARMOUR_GOOD",
    "OBJECT_HERO_BOOTS_LEATHERARMOUR_EVIL",
    "OBJECT_HERO_BOOTS_GUARD",
    "OBJECT_HERO_BOOTS_APPRENTICE",
    "OBJECT_HERO_BOOTS_CHAINMAIL",
    "OBJECT_HERO_BOOTS_CHAINMAIL_GOOD",
    "OBJECT_HERO_BOOTS_CHAINMAIL_EVIL",
    "OBJECT_HERO_NO_BOOTS",
    "OBJECT_HERO_TROUSERS",
    "OBJECT_HERO_TROUSERS_GOOD",
    "OBJECT_HERO_TROUSERS_EVIL",
    "OBJECT_HERO_TROUSERS_STEALTH",
    "OBJECT_HERO_TROUSERS_STEALTH_RED",
    "OBJECT_HERO_TROUSERS_PLATINUM",
    "OBJECT_HERO_TROUSERS_ARMOUR",
    "OBJECT_HERO_TROUSERS_BANDITCAMP",
    "OBJECT_HERO_TROUSERS_ARMOUR_EVIL",
    "OBJECT_HERO_TROUSERS_ARMOUR_GOOD",
    "OBJECT_HERO_TROUSERS_WILLROBE",
    "OBJECT_HERO_TROUSERS_WILLROBE_GOOD",
    "OBJECT_HERO_TROUSERS_WILLROBE_EVIL",
    "OBJECT_HERO_TROUSERS_LEATHERARMOUR",
    "OBJECT_HERO_TROUSERS_LEATHERARMOUR_GOOD",
    "OBJECT_HERO_TROUSERS_LEATHERARMOUR_EVIL",
    "OBJECT_HERO_TROUSERS_GUARD",
    "OBJECT_HERO_TROUSERS_APPRENTICE",
    "OBJECT_HERO_TROUSERS_CHAINMAIL",
    "OBJECT_HERO_TROUSERS_CHAINMAIL_GOOD",
    "OBJECT_HERO_TROUSERS_CHAINMAIL_EVIL",
    "OBJECT_HERO_TROUSERS_DRESS",
    "OBJECT_HERO_TROUSERS_DRESS_GOOD",
    "OBJECT_HERO_TROUSERS_DRESS_EVIL",
    "OBJECT_HERO_NO_TROUSERS",
    "OBJECT_HERO_SHIRT",
    "OBJECT_HERO_SHIRT_GOOD",
    "OBJECT_HERO_SHIRT_EVIL",
    "OBJECT_HERO_SHIRT_STEALTH",
    "OBJECT_HERO_SHIRT_STEALTH_RED",
    "OBJECT_HERO_SHIRT_PLATINUM",
    "OBJECT_HERO_SHIRT_ARMOUR",
    "OBJECT_HERO_SHIRT_BANDITCAMP",
    "OBJECT_HERO_SHIRT_ARMOUR_EVIL",
    "OBJECT_HERO_SHIRT_ARMOUR_GOOD",
    "OBJECT_HERO_SHIRT_WILLROBE",
    "OBJECT_HERO_SHIRT_WILLROBE_GOOD",
    "OBJECT_HERO_SHIRT_WILLROBE_EVIL",
    "OBJECT_HERO_SHIRT_LEATHERARMOUR",
    "OBJECT_HERO_SHIRT_LEATHERARMOUR_GOOD",
    "OBJECT_HERO_SHIRT_LEATHERARMOUR_EVIL",
    "OBJECT_HERO_SHIRT_GUARD",
    "OBJECT_HERO_SHIRT_APPRENTICE_HOODUP",
    "OBJECT_HERO_SHIRT_APPRENTICE",
    "OBJECT_HERO_SHIRT_CHAINMAIL",
    "OBJECT_HERO_SHIRT_CHAINMAIL_GOOD",
    "OBJECT_HERO_SHIRT_CHAINMAIL_EVIL",
    "OBJECT_HERO_SHIRT_DRESS",
    "OBJECT_HERO_SHIRT_DRESS_GOOD",
    "OBJECT_HERO_SHIRT_DRESS_EVIL",
    "OBJECT_HERO_NO_SHIRT",
    "OBJECT_HERO_GLOVES",
    "OBJECT_HERO_GLOVES_GOOD",
    "OBJECT_HERO_GLOVES_EVIL",
    "OBJECT_HERO_GLOVES_STEALTH",
    "OBJECT_HERO_GLOVES_STEALTH_RED",
    "OBJECT_HERO_GLOVES_PLATINUM",
    "OBJECT_HERO_GLOVES_ARMOUR",
    "OBJECT_HERO_GLOVES_BANDITCAMP",
    "OBJECT_HERO_GLOVES_ARMOUR_EVIL",
    "OBJECT_HERO_GLOVES_ARMOUR_GOOD",
    "OBJECT_HERO_GLOVES_WILLROBE",
    "OBJECT_HERO_GLOVES_WILLROBE_GOOD",
    "OBJECT_HERO_GLOVES_WILLROBE_EVIL",
    "OBJECT_HERO_GLOVES_LEATHERARMOUR",
    "OBJECT_HERO_GLOVES_LEATHERARMOUR_GOOD",
    "OBJECT_HERO_GLOVES_LEATHERARMOUR_EVIL",
    "OBJECT_HERO_GLOVES_GUARD",
    "OBJECT_HERO_GLOVES_APPRENTICE",
    "OBJECT_HERO_GLOVES_CHAINMAIL",
    "OBJECT_HERO_GLOVES_CHAINMAIL_GOOD",
    "OBJECT_HERO_GLOVES_CHAINMAIL_EVIL",
    "OBJECT_HERO_GLOVES_DRESS",
    "OBJECT_HERO_GLOVES_DRESS_GOOD",
    "OBJECT_HERO_GLOVES_DRESS_EVIL",
    "OBJECT_HERO_NO_GLOVES",
    "OBJECT_HERO_HAT_BANDITCAMP",
    "OBJECT_HERO_HAT_PIMP",
    "OBJECT_HERO_HAT_JOB_MASK",
    "OBJECT_HERO_HAT_WIZARD",
    "OBJECT_HERO_HAT_WIZARD_EVIL",
    "OBJECT_HERO_HAT_WIZARD_GOOD",
    "OBJECT_HERO_HAT_CHICKEN",
    "OBJECT_HERO_HAT_FISHERMAN",
    "OBJECT_HERO_HAT_WHOREWIG",
    "OBJECT_HERO_HAT_GUARD",
    "OBJECT_HERO_HELMET_PLATINUM",
    "OBJECT_HERO_HELMET_DEMONIC_HELM",
    "OBJECT_HERO_HELMET_DEMONIC_HELM_GOOD",
    "OBJECT_HERO_HELMET_CHAINMAIL",
    "OBJECT_HERO_HELMET_CHAINMAIL_GOOD",
    "OBJECT_HERO_HELMET_CHAINMAIL_EVIL",
    "OBJECT_HERO_NO_HAT",
    "OBJECT_HERO_HORNS",
    "OBJECT_CHAPEL_EVIL_FONT",
    "OBJECT_DARKWOOD_SPIDERSWEB_01",
    "OBJECT_DARKWOOD_BURROW_01",
    "OBJECT_DARKWOOD_BURROW_02",
    "OBJECT_DARKWOOD_BURROW_03",
    "OBJECT_DARKWOOD_FENCE_GATE",
    "OBJECT_DARKWOOD_FENCE_POST",
    "OBJECT_DARKWOOD_FENCE_SINGLE",
    "OBJECT_DARKWOOD_FENCE_TRIPLE",
    "OBJECT_DARKWOOD_CAVE_ENTRANCE_01",
    "OBJECT_DW_BULBSTOOL_SINGLE",
    "OBJECT_DW_BULBSTOOL_CLUMP_BIG",
    "OBJECT_DW_BULBSTOOL_CLUMP_MEDIUM",
    "OBJECT_DW_BULBSTOOL_CLUMP_SMALL",
    "OBJECT_DW_THORNBUSH",
    "OBJECT_DW_THORNBUSH_SMALL",
    "OBJECT_DARKWOOD_TREE_HOLLOW",
    "OBJECT_DARKWOOD_TREESTUMP_01",
    "OBJECT_DARKWOOD_TREESTUMP_02",
    "OBJECT_DARKWOOD_TREESTUMP_03",
    "OBJECT_DARKWOOD_TREESTUMP_04",
    "OBJECT_DARKWOOD_TREESTUMP_05",
    "OBJECT_DW_TREE_01",
    "OBJECT_DW_TREE_02",
    "OBJECT_DW_TREE_03",
    "OBJECT_DW_WHIPPYBRANCHES",
    "OBJECT_DW_TREE_SMALL",
    "OBJECT_DW_ROOTS_01",
    "OBJECT_DW_ROOTS_02",
    "OBJECT_DW_ROOTS_03",
    "OBJECT_DW_ROOTS_04",
    "OBJECT_DW_ROOTS_05",
    "OBJECT_DW_ROOTS_06",
    "OBJECT_DW_ROOTS_07",
    "OBJECT_DW_ROOTS_08",
    "OBJECT_BORDELLO_BAR_01",
    "OBJECT_BORDELLO_BED_01",
    "OBJECT_BORDELLO_CHANDELIER",
    "OBJECT_BORDELLO_IRON_MAIDEN",
    "OBJECT_BORDELLO_SIGN",
    "OBJECT_BORDELLO_SOFA_01",
    "OBJECT_BORDELLO_STATUE_01",
    "OBJECT_BORDELLO_STATUE_02",
    "OBJECT_BORDELLO_STATUE_03",
    "OBJECT_BORDELLO_STATUE_SEARCHABLE",
    "OBJECT_BORDELLO_STOOL_01",
    "OBJECT_BORDELLO_TORTURE_SHACKLES_01",
    "OBJECT_BORDELLO_TORTURE_TABLE_STRETCHING",
    "OBJECT_BORDELLO_LAMP_LIT_01",
    "OBJECT_BORDELLO_LAMP_UNLIT_01",
    "OBJECT_BORDELLO_SCONCE_01",
    "OBJECT_BORDELLO_SCONCE_OFF_01",
    "OBJECT_BORDELLO_TABLE_01",
    "OBJECT_BORDELLO_ROPEFENCE_01",
    "OBJECT_BORDELLO_ROPEFENCE_POST_01",
    "OBJECT_SPOOKY_WOOD_HOLLOW_TREE",
    "OBJECT_SPOOKY_WOOD_BURROW_01",
    "OBJECT_SPOOKY_WOOD_BURROW_02",
    "OBJECT_SPOOKY_WOOD_BURROW_03",
    "OBJECT_SPOOKY_WOOD_TREESTUMP_01",
    "OBJECT_SPOOKY_WOOD_TREESTUMP_02",
    "OBJECT_SPOOKY_WOOD_TREESTUMP_03",
    "OBJECT_SPOOKY_WOOD_TREESTUMP_04",
    "OBJECT_SPOOKY_WOOD_TREESTUMP_05",
    "OBJECT_SPOOKY_WOOD_FENCE_GATE",
    "OBJECT_SPOOKY_WOOD_FENCE_POST",
    "OBJECT_SPOOKY_WOOD_FENCE_SINGLE",
    "OBJECT_SPOOKY_WOOD_FENCE_TRIPLE",
    "OBJECT_CAVE_ENTRANCE_SPOOKY_WOODS",
    "OBJECT_SPOOKY_BULBSTOOL_SINGLE",
    "OBJECT_SPOOKY_BULBSTOOL_CLUMP_BIG",
    "OBJECT_SPOOKY_BULBSTOOL_CLUMP_MEDIUM",
    "OBJECT_SPOOKY_BULBSTOOL_CLUMP_SMALL",
    "OBJECT_SPOOKY_TOADSTOOL_SINGLE",
    "OBJECT_SPOOKY_TOADSTOOL_CLUMP_MEDIUM",
    "OBJECT_SPOOKY_TOADSTOOL_CLUMP_SMALL",
    "OBJECT_SPOOKY_ROOTS_01",
    "OBJECT_SPOOKY_ROOTS_02",
    "OBJECT_SPOOKY_ROOTS_03",
    "OBJECT_SPOOKY_ROOTS_04",
    "OBJECT_SPOOKY_ROOTS_05",
    "OBJECT_SPOOKY_ROOTS_06",
    "OBJECT_SPOOKY_ROOTS_07",
    "OBJECT_SPOOKY_ROOTS_08",
    "OBJECT_SPOOKY_THORNBUSH",
    "OBJECT_SPOOKY_THORNBUSH_SMALL",
    "OBJECT_SPOOKY_TREE_01",
    "OBJECT_SPOOKY_TREE_02",
    "OBJECT_SPOOKY_TREE_03",
    "OBJECT_SPOOKY_WHIPPYBRANCHES",
    "OBJECT_SPOOKY_TREE_SMALL",
    "OBJECT_SPOOKY_NIGHTSHADE_01",
    "OBJECT_SPOOKY_NIGHTSHADE_02",
    "OBJECT_EXPRESSION_DUMMY_TEMPLATE",
    "OBJECT_EXPRESSION_OPINION_DUMMY",
    "OBJECT_EXPRESSION_OFFENSIVE_DUMMY",
    "OBJECT_EXPRESSION_ATTRACTIVE_DUMMY",
    "OBJECT_EXPRESSION_SCARY_DUMMY",
    "OBJECT_EXPRESSION_AGREEABLE_DUMMY",
    "OBJECT_EXPRESSION_UGLY_DUMMY",
    "OBJECT_EXPRESSION_RIDICULOUS_DUMMY",
    "OBJECT_EXPRESSION_FOLLOW_DUMMY",
    "OBJECT_EXPRESSION_WAIT_DUMMY",
    "OBJECT_EXPRESSION_BANDIT_WAVE_1_DUMMY",
    "OBJECT_EXPRESSION_BANDIT_WAVE_2_DUMMY",
    "OBJECT_EXPRESSION_INSULT_01_DUMMY",
    "OBJECT_EXPRESSION_INSULT_02_DUMMY",
    "OBJECT_EXPRESSION_INSULT_03_DUMMY",
    "OBJECT_EXPRESSION_INSULT_04_DUMMY",
    "OBJECT_EXPRESSION_HEROIC_STANCE_DUMMY",
    "OBJECT_EXPRESSION_FLIRT_DUMMY",
    "OBJECT_EXPRESSION_APOLOGY_DUMMY",
    "OBJECT_EXPRESSION_SNEER_DUMMY",
    "OBJECT_EXPRESSION_EVIL_LAUGH_DUMMY",
    "OBJECT_EXPRESSION_BATTLE_CRY_DUMMY",
    "OBJECT_EXPRESSION_PELVIC_THRUST_DUMMY",
    "OBJECT_EXPRESSION_MIDDLE_FINGER_DUMMY",
    "OBJECT_EXPRESSION_BELCH_DUMMY",
    "OBJECT_EXPRESSION_FART_DUMMY",
    "OBJECT_EXPRESSION_VICTORY_PUMP_DUMMY",
    "OBJECT_EXPRESSION_GIGGLE_DUMMY",
    "OBJECT_EXPRESSION_SHIT_DUMMY",
    "OBJECT_EXPRESSION_THANKS_DUMMY",
    "OBJECT_EXPRESSION_COCK_A_DOODLE_DO_DUMMY",
    "OBJECT_EXPRESSION_CROTCH_GRAB_DUMMY",
    "OBJECT_EXPRESSION_KISS_MY_ASS_DUMMY",
    "OBJECT_EXPRESSION_FLAMENCO_DUMMY",
    "OBJECT_EXPRESSION_COSSACK_DUMMY",
    "OBJECT_EXPRESSION_AIR_GUITAR_DUMMY",
    "OBJECT_EXPRESSION_BALLET_DUMMY",
    "OBJECT_EXPRESSION_SATURDAY_NIGHT_FEVER_DUMMY",
    "OBJECT_EXPRESSION_TAP_DUMMY",
    "OBJECT_EXPRESSION_Y_DUMMY",
    "OBJECT_EXPRESSION_M_DUMMY",
    "OBJECT_EXPRESSION_C_DUMMY",
    "OBJECT_EXPRESSION_A_DUMMY",
    "OBJECT_EXPRESSION_PICKPOCKET_DUMMY",
    "OBJECT_EXPRESSION_PICKLOCK_DUMMY",
    "OBJECT_EXPRESSION_STEAL_DUMMY",
    "OBJECT_FISHING_SPOT_DUMMY",
    "OBJECT_QUEST_CARD",
    "OBJECT_ACTIVATION_RECEPTOR_DOOR_TEMPLATE",
    "OBJECT_WALL_MOUNT_TEMPLATE",
    "OBJECT_PATROL_MARKER",
    "OBJECT_DEAD_BANDIT",
    "OBJECT_LPDD_FIREHEART_01",
    "OBJECT_LPDD_FIREHEART_CS",
    "OBJECT_LPDD_FIREHEART_FX",
    "OBJECT_JACK_MASK_CUTSCENE",
    "OBJECT_LPDD_CRYSTAL_01",
    "OBJECT_LPDD_TILE_MOON_01",
    "OBJECT_LPDD_TILE_SUN_01",
    "OBJECT_DD_PUZZLE_CUBE_01",
    "OBJECT_DD_PUZZLE_CUBE_02",
    "OBJECT_DD_PUZZLE_CUBE_03",
    "OBJECT_DD_PUZZLE_CUBE_04",
    "OBJECT_DD_PUZZLE_CUBE_05",
    "OBJECT_BARREL_BREAKABLE",
    "OBJECT_BARREL_EXPLODING",
    "OBJECT_BARREL_UNBREAKABLE",
    "OBJECT_BARREL_UNBREAKABLE_BARRIER",
    "OBJECT_CHEST_OPENABLE",
    "OBJECT_SILVERKEY_CHEST_5",
    "OBJECT_SILVERKEY_CHEST_10",
    "OBJECT_SILVERKEY_CHEST_25",
    "OBJECT_SILVERKEY_CHEST_50",
    "OBJECT_SILVERKEY_CHEST_75",
    "OBJECT_SILVERKEY_CHEST_100",
    "OBJECT_CHEST_REWARD_ON_DEATH",
    "OBJECT_TELEPORTER_BUYABLE_HOUSE_01",
    "OBJECT_TELEPORTER_GRIFFONS_01",
    "OBJECT_GENERATOR",
    "OBJECT_BS_SIGN_POST_DIRECTION_01",
    "OBJECT_BS_SIGNPOST_PLAQUE_01",
    "OBJECT_BW_SIGN_POST_DIRECTION_01",
    "OBJECT_BW_SIGN_POST_DIRECTION_02",
    "OBJECT_BW_SIGNPOST_PLAQUE_01",
    "OBJECT_OK_SIGNPOST_DIRECTION_01",
    "OBJECT_OK_SIGNPOST_PLAQUE_01",
    "OBJECT_BUYABLE_HOUSE_MAIN_SIGNPOST",
    "OBJECT_BUYABLE_HOUSE_DRESSING_SIGNPOST",
    "OBJECT_BUYABLE_HOUSE_OWNED_SIGNPOST",
    "OBJECT_BUYABLE_HOUSE_RENT_SIGNPOST",
    "OBJECT_QUEST_CARD_OAKVALE_INTRO",
    "OBJECT_QUEST_CARD_PROTECT_FARM",
    "OBJECT_QUEST_CARD_PROTECT_FARM_EVIL",
    "OBJECT_QUEST_CARD_WASP_MENACE",
    "OBJECT_QUEST_CARD_WHITE_BALVERINE_KNOTHOLE_GLADE",
    "OBJECT_QUEST_CARD_ARENA",
    "OBJECT_QUEST_CARD_ASK_ORACLE",
    "OBJECT_QUEST_CARD_DARKWOOD_TRADER_ESCORT",
    "OBJECT_QUEST_CARD_FIRE_HEART",
    "OBJECT_QUEST_CARD_HOBBE_CONTEST",
    "OBJECT_QUEST_CARD_COMBAT_MELEE",
    "OBJECT_QUEST_CARD_COMBAT_SKILL",
    "OBJECT_QUEST_CARD_COMBAT_WILL",
    "OBJECT_QUEST_CARD_TRADER_PATH",
    "OBJECT_QUEST_CARD_COMBAT_MELEE_EVIL",
    "OBJECT_QUEST_CARD_BOUNTY_HUNT",
    "OBJECT_QUEST_CARD_MAD_BOMBER",
    "OBJECT_QUEST_CARD_BREAK_SIEGE",
    "OBJECT_QUEST_CARD_TALENTLESS_BARD",
    "OBJECT_QUEST_CARD_BANDIT_CAMP",
    "OBJECT_QUEST_CARD_BANDIT_CAMP_TWO",
    "OBJECT_QUEST_CARD_MINION_CLIFFTOP_CHASE",
    "OBJECT_QUEST_CARD_GUARDIAN_SISTER_INFO_FIRST",
    "OBJECT_QUEST_CARD_GUARDIAN_SISTER_INFO_SECOND",
    "OBJECT_QUEST_CARD_SCYTHE_INFO",
    "OBJECT_QUEST_CARD_GUARDIAN_TROPHY_DEALER_INFO",
    "OBJECT_QUEST_CARD_FIND_TROPHY_DEALER",
    "OBJECT_QUEST_CARD_FINALGRAVEYARD",
    "OBJECT_QUEST_CARD_AMBUSH_TRADERS",
    "OBJECT_QUEST_CARD_ARENA_REVISITED",
    "OBJECT_QUEST_CARD_BANDIT_CAMP_PATH_JOURNEY",
    "OBJECT_QUEST_CARD_HANGING_TREE_EVIL",
    "OBJECT_QUEST_CARD_MINION_CAMP",
    "OBJECT_QUEST_CARD_HANGING_TREE_GOOD",
    "OBJECT_QUEST_CARD_HERO_SOULS",
    "OBJECT_QUEST_CARD_HERO_SOULS_BRIAR",
    "OBJECT_QUEST_CARD_HERO_SOULS_MOTHER",
    "OBJECT_QUEST_CARD_HERO_SOULS_GUILDMASTER",
    "OBJECT_QUEST_CARD_HERO_SOULS_NOSTRO",
    "OBJECT_QUEST_CARD_HERO_SOULS_ARENA",
    "OBJECT_QUEST_CARD_HERO_SOULS_THUNDER",
    "OBJECT_QUEST_CARD_HEROS_OLD_HOUSE",
    "OBJECT_QUEST_CARD_HOBBE_CAVE",
    "OBJECT_QUEST_CARD_LOST_TRADER",
    "OBJECT_QUEST_CARD_GATEWAY_TO_HOOK_COAST",
    "OBJECT_QUEST_CARD_GRAVEYARD_SECRET_PASSAGE",
    "OBJECT_QUEST_CARD_PRISON_SECRET_PASSAGE",
    "OBJECT_QUEST_CARD_RANSOM_VICTIM",
    "OBJECT_QUEST_CARD_ACTIVATE_FOCAL_SITES",
    "OBJECT_QUEST_CARD_TRADER_CONFLICT_EVIL",
    "OBJECT_QUEST_CARD_TRADER_CONFLICT_GOOD",
    "OBJECT_QUEST_CARD_SUMMONING_THE_SHIP",
    "OBJECT_QUEST_CARD_BOOK_COLLECTION",
    "OBJECT_QUEST_CARD_FISHING_COMPETITION",
    "OBJECT_DUMMY_QUEST_CARD_BASE_TEMPLATE",
    "OBJECT_DUMMY_QUEST_CARD_DEFEAT_SNOW_TROLL",
    "OBJECT_DUMMY_QUEST_CARD_SUPPRESS_UPRISING",
    "OBJECT_DUMMY_QUEST_CARD_MINION_CAMP",
    "OBJECT_FEAT_CARD_DUMMY",
    "OBJECT_QUEST_CARD_TRAINING_MELEE",
    "OBJECT_QUEST_CARD_TRAINING_MELEE_MORE",
    "OBJECT_QUEST_CARD_TRAINING_ADVANCE",
    "OBJECT_QUEST_CARD_TRAINING_SKILL",
    "OBJECT_QUEST_CARD_TRAINING_WILL",
    "OBJECT_QUEST_CARD_TRAINING_WOODS_DEPARTURE_A",
    "OBJECT_QUEST_CARD_TRAINING_WOODS_DEPARTURE_B",
    "OBJECT_QUEST_CARD_TRAINING_WOODS_DEPARTURE_C",
    "OBJECT_QUEST_CARD_TRAINING_KILL_BEETLES",
    "OBJECT_QUEST_CARD_TRAINING_KILL_BANDITS",
    "OBJECT_QUEST_CARD_SWORD_IN_THE_STONE",
    "OBJECT_QUEST_CARD_HERO_DOLLS",
    "OBJECT_QUEST_CARD_BANDIT_TOLL",
    "OBJECT_QUEST_CARD_BOWERSTONE_PUNCH_CLUB",
    "OBJECT_QUEST_CARD_BANDIT_CAMP_PUNCH_CLUB",
    "OBJECT_QUEST_CARD_KNOTHOLE_GLADE_PUNCH_CLUB",
    "OBJECT_QUEST_CARD_OAKVALE_PUNCH_CLUB",
    "OBJECT_QUEST_CARD_ARCHERY_COMPETITION",
    "OBJECT_QUEST_CARD_BEARDY_BALDY",
    "OBJECT_QUEST_CARD_CHAPEL_OF_EVIL",
    "OBJECT_QUEST_CARD_DRAGON_BOSS",
    "OBJECT_QUEST_CARD_EASY_PICKINGS",
    "OBJECT_QUEST_CARD_FISHERMAN",
    "OBJECT_QUEST_CARD_GHOST_GRANNY_NECKLACE",
    "OBJECT_QUEST_CARD_ASSASSIN_ATTACKS",
    "OBJECT_QUEST_CARD_TEMPLE_OF_LIGHT",
    "OBJECT_QUEST_CARD_HIDDEN_BOOTY",
    "OBJECT_QUEST_CARD_JACK_FIGHT",
    "OBJECT_QUEST_CARD_MAYORS_INVITATION",
    "OBJECT_QUEST_CARD_EXPOSE_MAYOR",
    "OBJECT_QUEST_ORCHARD_FARM_ESCORT",
    "OBJECT_QUEST_CARD_MAZE_RESEARCH",
    "OBJECT_QUEST_CARD_PRISON_ESCAPE",
    "OBJECT_QUEST_CARD_WIZARD_BATTLE",
    "OBJECT_QUEST_CARD_TRAVELLING_BULLY",
    "OBJECT_QUEST_CARD_TRAVELLING_BEGGAR",
    "OBJECT_QUEST_CARD_MEET_SISTER",
    "OBJECT_QUEST_CARD_MURDER_TWIST",
    "OBJECT_QUEST_CARD_SICK_CHILD",
    "OBJECT_QUEST_CARD_CHICKEN_KICKING",
    "OBJECT_ACTIVATION_TRIGGER_TEMPLATE",
    "OBJECT_ACTIVATION_RECEPTOR_CHEST_TEMPLATE",
    "OBJECT_ACTIVATION_RECEPTOR_RELAY_TEMPLATE",
    "OBJECT_BUILDING_DOOR_UNBREAKABLE",
    "OBJECT_ACTIVATION_RECEPTOR_DOOR_TEST",
    "OBJECT_ACTIVATION_RECEPTOR_CHEST_TEST",
    "OBJECT_ACTIVATION_TRIGGER_TEST",
    "OBJECT_SIMPLE_GATE_DOOR",
    "OBJECT_SIMPLE_GATE_WALL",
    "OBJECT_DEGRADABLE_THORN_VINES_01",
    "OBJECT_TRAP_TEST",
    "OBJECT_UNDEAD_SOUL_TEST",
    "OBJECT_STEALTH_BOX_SMALL",
    "OBJECT_STEALTH_BOX_LARGE",
    "OBJECT_SMASHABLE_WILL_GLASS_THING",
    "OBJECT_RIGID_BODY_TEST",
    "OBJECT_RIGID_BODY_TEST2",
    "OBJECT_STREETSIGN_01",
    "OBJECT_WOODENSIGN_01",
    "OBJECT_EXPLODING_SPORE_LARGE",
    "OBJECT_EXPLODING_SPORE_MEDIUM",
    "OBJECT_EXPLODING_SPORE_SMALL",
    "OBJECT_SPORE_EXPLODED_LARGE",
    "OBJECT_SPORE_EXPLODED_MEDIUM",
    "OBJECT_SPORE_EXPLODED_SMALL",
    "OBJECT_CHAPEL_GOOD_FONT",
    "OBJECT_SEVERED_HEAD",
    "OBJECT_WALL_MOUNT_NORMAL",
    "OBJECT_WALL_MOUNT_WEAPON",
    "OBJECT_ALTAR_GARGOYLE_01",
    "OBJECT_DEMON_DOOR_01",
    "OBJECT_DEMON_DOOR_OVERGROWN_01",
    "OBJECT_DEMON_DOOR_WALL_01",
    "OBJECT_NW_DEMON_DOOR_01",
    "OBJECT_NW_DEMON_DOOR_WALL_01",
    "OBJECT_REGION_TRANSITION_GATE",
    "OBJECT_REGION_TRANSITION_GATE_02",
    "OBJECT_REGION_TRANSITION_GATE_DOOR_01",
    "OBJECT_FOCAL_SITE_ACTIVE_01",
    "OBJECT_FOCAL_SITE_INACTIVE_01",
    "OBJECT_FOCAL_SITE_BASE_01",
    "OBJECT_GRAVEYARD_DEMON_DOOR_WALL_01",
    "OBJECT_GRAVEYARD_GATE_KEY",
    "OBJECT_MOUND_OF_EARTH",
    "OBJECT_SARCOPHAGUS_01",
    "OBJECT_SARCOPHAGUS_02",
    "OBJECT_SARCOPHAGUS_03",
    "OBJECT_SARCOPHAGUS_KING_01",
    "OBJECT_COFFIN_DIRTY_CLOSED_01",
    "OBJECT_COFFIN_DIRTY_OPEN_01_A",
    "OBJECT_COFFIN_DIRTY_OPEN_01_B",
    "OBJECT_COFFIN_DIRTY_OPEN_01_C",
    "OBJECT_COFFIN_DIRTY_OPEN_02",
    "OBJECT_COFFIN_DIRTY_CLOSED_02",
    "OBJECT_COBWEB",
    "OBJECT_PAVING_SLAB_01",
    "OBJECT_PAVING_SLAB_02",
    "OBJECT_PAVING_SLAB_03",
    "OBJECT_PAVING_SLAB_04",
    "OBJECT_PUMP",
    "OBJECT_GY_UNDEAD_SUMMONING_CIRCLE_01",
    "OBJECT_GRAVEYARD_DOOR_MAIN",
    "OBJECT_GRAVEYARD_DOOR_MAIN_ACTIVE_01",
    "OBJECT_GRAVEYARD_DOOR_SIDE",
    "OBJECT_GRAVEYARD_GATE_BLOCKING_01",
    "OBJECT_GRAVEYARD_CRYPT_SECRET_DOOR",
    "OBJECT_GRAVEYARD_BENCH_01",
    "OBJECT_GRAVEYARD_LAMP_LIT_01",
    "OBJECT_GRAVEYARD_LAMP_UNLIT_01",
    "OBJECT_GRAVEYARD_COTTAGE_BED_01",
    "OBJECT_GRAVEYARD_COTTAGE_TABLE_01",
    "OBJECT_GRAVE_CELTCROSS_01",
    "OBJECT_GRAVE_CROSS_01",
    "OBJECT_GRAVE_01",
    "OBJECT_GRAVE_02",
    "OBJECT_GRAVE_03",
    "OBJECT_GRAVE_04",
    "OBJECT_GRAVE_05",
    "OBJECT_GRAVE_06",
    "OBJECT_GRAVE_07",
    "OBJECT_GRAVE_08",
    "OBJECT_LARGE_CELTIC_CROSS_01",
    "OBJECT_GRAVE_SURROUND_LONG_01",
    "OBJECT_GRAVE_SURROUND_SHORT_01",
    "OBJECT_GRAVE_CROSS_02",
    "OBJECT_GRAVE_HALO_01",
    "OBJECT_GRAVE_SKULL_01",
    "OBJECT_GRAVE_WINGS_01",
    "OBJECT_GRAVE_SNAKE_SWORD_01",
    "OBJECT_GRAVE_SWORD_01",
    "OBJECT_NECROPOLIS_GRAVE",
    "OBJECT_CORPSE_01",
    "OBJECT_CORPSE_02",
    "OBJECT_CORPSE_03",
    "OBJECT_CORPSE_04",
    "OBJECT_CORPSE_05",
    "OBJECT_CEREMONIAL_ARMOUR",
    "OBJECT_CEREMONIAL_HELMET",
    "OBJECT_CEREMONIAL_SHIELD",
    "OBJECT_CEREMONIAL_SWORD",
    "OBJECT_CEREMONIAL_SKELETON",
    "OBJECT_CEREMONIAL_SKELETON_ARMOUR",
    "OBJECT_CEREMONIAL_SKELETON_HELMET",
    "OBJECT_CEREMONIAL_SKELETON_SHIELD",
    "OBJECT_CEREMONIAL_SKELETON_SWORD",
    "OBJECT_URN_01",
    "OBJECT_GRAVESTONE_01",
    "OBJECT_GRAVESTONE_SMALL_01",
    "OBJECT_GRAVESTONE_02",
    "OBJECT_GRAVESTONE_03",
    "OBJECT_HANGING_TREE_GALLOWS",
    "OBJECT_HANGING_TREE_LEVER",
    "OBJECT_HANGING_TREE_SPIKE_01",
    "OBJECT_HANGING_TREE_SPIKE_02",
    "OBJECT_HANGING_TREE_SPIKE_03",
    "OBJECT_HANGING_TREE_SPIKE_04",
    "OBJECT_HANGING_TREE_SPIKE_05",
    "OBJECT_HANGING_TREE_GATE_SURROUND_01",
    "OBJECT_HANGING_TREE_GATE_01",
    "OBJECT_HANGING_TREE_GIBBET_01",
    "OBJECT_HAUNTED_HOUSE_BEARTROPHY_01",
    "OBJECT_HAUNTED_HOUSE_BEARTOY_01",
    "OBJECT_HAUNTED_HOUSE_BED_01",
    "OBJECT_HAUNTED_HOUSE_BED_02",
    "OBJECT_HAUNTED_HOUSE_BOOK_01",
    "OBJECT_HAUNTED_HOUSE_BOOK_02",
    "OBJECT_HAUNTED_HOUSE_BOOKSHELF_01",
    "OBJECT_HAUNTED_HOUSE_BOOKSHELF_02",
    "OBJECT_HAUNTED_HOUSE_CUPBOARD_01",
    "OBJECT_HAUNTED_HOUSE_CUPBOARD_02",
    "OBJECT_HAUNTED_HOUSE_GRANDFATHER_CLOCK",
    "OBJECT_HAUNTED_HOUSE_PICTURE_01",
    "OBJECT_HAUNTED_HOUSE_PICTURE_02",
    "OBJECT_HAUNTED_HOUSE_RUBBISH",
    "OBJECT_HAUNTED_HOUSE_TABLE",
    "OBJECT_HAUNTED_HOUSE_COT",
    "OBJECT_HAUNTED_HOUSE_HORSE",
    "OBJECT_HAUNTED_HOUSE_MOBILE",
    "OBJECT_HAUNTED_HOUSE_MUSIC_BOX",
    "OBJECT_HAUNTED_HOUSE_SHOE_MOON",
    "OBJECT_HAUNTED_HOUSE_COT_AND_DOLL",
    "OBJECT_HAUNTED_HOUSE_HORSE_COMPLETE",
    "OBJECT_HAUNTED_HOUSE_MUSIC_BOX_COMPLETE",
    "OBJECT_HAUNTED_HOUSE_MOBILE_COMPLETE",
    "OBJECT_HAUNTED_HOUSE_SHOES_PAIR",
    "OBJECT_HAUNTED_HOUSE_DOORS_CELLAR_01",
    "OBJECT_HAUNTED_HOUSE_CHAIR_01",
    "OBJECT_HAUNTED_HOUSE_CHAIR_02",
    "OBJECT_HAUNTED_HOUSE_BRIDGE_BROKEN_01",
    "OBJECT_HAUNTED_HOUSE_OUTBUILDING_WALLSECTION",
    "OBJECT_HAUNTED_HOUSE_OUTBUILDING_WALLGATE",
    "OBJECT_HAUNTED_HOUSE_GATE_01",
    "OBJECT_HERO_TITLE_DUMMY_TEMPLATE",
    "OBJECT_HERO_TITLE_BEGINNER_STRENGTH",
    "OBJECT_HERO_TITLE_BEGINNER_SKILL",
    "OBJECT_HERO_TITLE_BEGINNER_WILL",
    "OBJECT_HERO_TITLE_REAPER",
    "OBJECT_HERO_TITLE_SHADOWHUNTER",
    "OBJECT_HERO_TITLE_MALEFICUS",
    "OBJECT_HERO_TITLE_DEATHBRINGER",
    "OBJECT_HERO_TITLE_ASSASSIN",
    "OBJECT_HERO_TITLE_NECROMANCER",
    "OBJECT_HERO_TITLE_AVATAR",
    "OBJECT_HERO_TITLE_PILGRIM",
    "OBJECT_HERO_TITLE_LIBERATOR",
    "OBJECT_HERO_TITLE_PALADIN",
    "OBJECT_HERO_TITLE_DRUID",
    "OBJECT_HERO_TITLE_RANGER",
    "OBJECT_HERO_TITLE_RUNEMASTER",
    "OBJECT_HERO_TITLE_HOOD",
    "OBJECT_HERO_TITLE_GLADIATOR",
    "OBJECT_HERO_TITLE_SABRE",
    "OBJECT_HERO_TITLE_ARROWDODGER",
    "OBJECT_HERO_TITLE_PIEMASTER",
    "OBJECT_HERO_TITLE_CHICKEN_CHASER",
    "OBJECT_HERO_TITLE_ARSEFACE",
    "OBJECT_HERO_TITLE_JACK",
    "OBJECT_HERO_TITLE_MAZE",
    "OBJECT_HERO_TITLE_SCARLET_ROBE",
    "OBJECT_HERO_TITLE_SCYTHE",
    "OBJECT_HERO_TITLE_THUNDER",
    "OBJECT_HERO_TITLE_WHISPER",
    "OBJECT_HERO_TITLE_TWINBLADE",
    "OBJECT_HERO_TITLE_BRIAR_ROSE",
    "OBJECT_HERO_TITLE_LADY_GREY",
    "OBJECT_HERO_TITLE_GUILDMASTER",
    "OBJECT_HERO_TITLE_SCORPION_SLAYER",
    "OBJECT_HERO_TITLE_DEATH_BRINGER",
    "OBJECT_GUILD_FLAG_01",
    "OBJECT_GUILD_FLAG_02",
    "OBJECT_GUILD_POT_LARGE_01",
    "OBJECT_GUILD_POT_SMALL_01",
    "OBJECT_GUILD_OBJECTS_MISC_01",
    "OBJECT_GUILD_SWORD_DISPLAY_01",
    "OBJECT_GUILD_MELEE_COMBAT_RING_01",
    "OBJECT_STRAW_DUMMY_DESTROYED_01",
    "OBJECT_STRAW_DUMMY_01",
    "OBJECT_STRAW_DUMMY_NON_TARGET",
    "OBJECT_GUILD_WOODS_LOG_01",
    "OBJECT_GUILD_WOODS_LOG_IMPASSABLE_01",
    "OBJECT_GUILD_MAZE_CHAIN_SUIT_01",
    "OBJECT_GUILD_MAZE_CHAIN_SUIT_02",
    "OBJECT_GUILD_MAZE_PLATE_SUIT_01",
    "OBJECT_GUILD_MAZE_PLATE_SUIT_02",
    "OBJECT_GUILD_MAZE_STATUE_01",
    "OBJECT_GUILD_MAZE_STATUE_02",
    "OBJECT_GUILD_MAZE_WALL_SHIELD_01",
    "OBJECT_GUILD_MAZE_WALL_SHIELD_02",
    "OBJECT_GUILD_MAZE_WALL_SHIELD_03",
    "OBJECT_GUILD_MAZE_WALL_SHIELD_04",
    "OBJECT_GUILD_PEDESTAL_TELEPORT_01",
    "OBJECT_GUILD_PEDESTAL_EXPERIENCE_01",
    "OBJECT_GUILD_PEDESTAL_BOASTING_01",
    "OBJECT_GUILD_BOASTING_PODIUM_01",
    "OBJECT_GUILD_TOMB_01",
    "OBJECT_GUILD_TOMB_02",
    "OBJECT_GUILD_TOMB_03",
    "OBJECT_GUILD_TOMB_04",
    "OBJECT_GUILD_TOMB_PLAQUE_01",
    "OBJECT_GUILD_STATUE_MAZE_01",
    "OBJECT_GUILD_STATUE_01",
    "OBJECT_GUILD_STATUE_02",
    "OBJECT_GUILD_STATUE_03",
    "OBJECT_GUILD_STATUE_04",
    "OBJECT_GUILD_STATUE_05",
    "OBJECT_GUILD_FRONT_DOORS_01",
    "OBJECT_GUILD_APPRENTICE_QUARTERS_STAIRS_01",
    "OBJECT_GUILD_BRIDGE_01",
    "OBJECT_GUILD_LEADERBOARD_01",
    "OBJECT_CHAIR_GUILDKEEPER_01",
    "OBJECT_GUILD_CHAIR_MAZE_01",
    "OBJECT_GUILD_DESK_MAZE_01",
    "OBJECT_GUILD_BED_APPRENTICE_01",
    "OBJECT_GUILD_BED_APPRENTICE_TARGET_01",
    "OBJECT_GUILD_BED_FLOOR_PALLET_01",
    "OBJECT_GUILD_MAP_TABLE_01",
    "OBJECT_GUILD_BAR_01",
    "OBJECT_GUILD_DININGROOM_TABLE_01",
    "OBJECT_GUILD_CELLAR_KEGS_01",
    "OBJECT_GUILD_CELLAR_KEG_SINGLE_01",
    "OBJECT_GUILD_ARCHERY_BACKDROP_01",
    "OBJECT_GUILD_ARCHERY_MOUNTAIN_01",
    "OBJECT_GUILD_ARCHERY_MOUNTAIN_02",
    "OBJECT_GUILD_ARCHERY_BUSH_01",
    "OBJECT_GUILD_ARCHERY_CASTLE_01",
    "OBJECT_GUILD_ARCHERY_CASTLE_02",
    "OBJECT_GUILD_WALL_BEND_LEFT_01",
    "OBJECT_GUILD_WALL_BEND_RIGHT_01",
    "OBJECT_GUILD_WALL_POST_01",
    "OBJECT_GUILD_WALL_STRAIGHT_01",
    "OBJECT_GUILD_BOOKCASE_SELECT",
    "OBJECT_GUILD_BOOKCASE_SELECT_LARGE",
    "OBJECT_GUILD_BOOKCASE_SELECT_LARGE_DD",
    "OBJECT_GUILD_BOOKCASE_SELECT_MEDIUM",
    "OBJECT_GUILD_BOOKCASE_SECRET_01",
    "OBJECT_GUILD_BOOKCASE_LARGE_01",
    "OBJECT_GUILD_BOOKCASE_MEDIUM_01",
    "OBJECT_GUILD_BOOKCASE_SMALL_01",
    "OBJECT_GUILD_SHOP_COUNTER_01_TO_04",
    "OBJECT_GUILD_SHOP_COUNTER_05",
    "OBJECT_GUILD_SHOP_COUNTER_06",
    "OBJECT_GUILD_SIGN_DININGROOM_01",
    "OBJECT_GUILD_SIGN_LIBRARY_01",
    "OBJECT_GUILD_SIGN_MAPROOM_01",
    "OBJECT_GUILD_SIGN_MAZE_01",
    "OBJECT_GUILD_SIGN_QUARTERS_01",
    "OBJECT_GUILD_SIGN_SHOP_01",
    "OBJECT_GUILD_GATE_GATE",
    "OBJECT_GUILD_GATE_WALL",
    "OBJECT_GUILD_EXTERIOR_WALL_CORNER_01",
    "OBJECT_GUILD_EXTERIOR_WALL_FORCEFIELD_01",
    "OBJECT_GUILD_EXTERIOR_WALL_FRONT_01",
    "OBJECT_GUILD_EXTERIOR_WALL_FRONT_COLUMN_01",
    "OBJECT_GUILD_EXTERIOR_WALL_01",
    "OBJECT_FRESCO_DOME_DOOR_01",
    "OBJECT_FRESCO_DOME_CRYSTAL_01",
    "OBJECT_FRESCO01",
    "OBJECT_FRESCO02",
    "OBJECT_FRESCO03",
    "OBJECT_FRESCO04",
    "OBJECT_FRESCO05",
    "OBJECT_FRESCO06",
    "OBJECT_FRESCO07",
    "OBJECT_FRESCO08",
    "OBJECT_FRESCO09",
    "OBJECT_FRESCO10",
    "OBJECT_FRESCO11",
    "OBJECT_FRESCO12",
    "OBJECT_FRESCO13",
    "OBJECT_FRESCO_DOME_PILLAR_01",
    "OBJECT_GUILD_DOORWAY_RUBBLE",
    "OBJECT_HERO_BOASTING_PODIUM_01",
    "OBJECT_HERO_BOASTING_PODIUM_DRUM_01",
    "OBJECT_BLOCKING_GUILD_DINING_HALL_DOORWAY",
    "OBJECT_BLOCKING_GUILD_APPRENTICE_QUARTERS_DOORWAY",
    "OBJECT_BLOCKING_GUILD_DOORWAY",
    "OBJECT_CAVE_HOBBE_KING_HOBBE_THRONE",
    "OBJECT_CAVE_HOBBE_NYMPH_GATE_01",
    "OBJECT_CAVE_HOBBE_BAG_TEETH_01",
    "OBJECT_CAVE_HOBBE_CAGE_BALVERINE_01",
    "OBJECT_CAVE_HOBBE_CAGE_HUMAN_01",
    "OBJECT_CAVE_HOBBE_ROOT_01",
    "OBJECT_CAVE_HOBBE_ROOT_02",
    "OBJECT_CAVE_HOBBE_ROOT_03",
    "OBJECT_CAVE_HOBBE_ROOT_04",
    "OBJECT_CAVE_HOBBE_SKELETON_AXE_01",
    "OBJECT_CAVE_HOBBE_SKELETON_SWORD_BROKEN_01",
    "OBJECT_CAVE_HOBBE_TORCH_BRAZIER_01",
    "OBJECT_CAVE_HOBBE_TORCH_BRAZIER_HANGING_01",
    "OBJECT_CAVE_HOBBE_TORCH_SKULL_01",
    "OBJECT_CAVE_HOBBE_ROCK_01",
    "OBJECT_CAVE_HOBBE_ROCK_02",
    "OBJECT_CAVE_HOBBE_ROCK_03",
    "OBJECT_CAVE_HOBBE_ROCK_04",
    "OBJECT_CAVE_HOBBE_ROCK_05",
    "OBJECT_CAVE_NYMPH_ROCK_01",
    "OBJECT_CAVE_NYMPH_ROCK_02",
    "OBJECT_CAVE_NYMPH_ROCK_03",
    "OBJECT_CAVE_NYMPH_ROCK_04",
    "OBJECT_CAVE_NYMPH_ROCK_05",
    "OBJECT_CAVE_BEARTRAP_01",
    "OBJECT_CAVE_BEARTRAP_02",
    "OBJECT_CAVE_BEARTRAP_03",
    "OBJECT_CAVE_BEARTRAP_DOWNED",
    "OBJECT_CAVE_HOBBE_SPITROAST",
    "OBJECT_CAVE_HOBBE_SKELETON_SWORD_BROKEN_02",
    "OBJECT_CAVE_HOBBE_LARDER_BODY",
    "OBJECT_CAVE_HOBBE_CHAIN_01",
    "OBJECT_CAVE_HOBBE_CHAIN_03",
    "OBJECT_CAVE_HOBBE_LEVER",
    "OBJECT_CAVE_HOBBE_ROCK_GROUP_01",
    "OBJECT_CAVE_HOBBE_ROCK_GROUP_02",
    "OBJECT_HOBBE_CAVE_DOOR_01",
    "OBJECT_HOBBE_CAVE_DOOR_QUEST_01",
    "OBJECT_HOBBE_CAVE_DOOR_QUEST_KEY_01",
    "OBJECT_HOBBE_CAVE_LARDER_SACKS_01",
    "OBJECT_HOBBE_CAVE_LARDER_SACKS_02",
    "OBJECT_HOBBE_CAVE_LARDER_SACKS_03",
    "OBJECT_HOBBE_CAVE_BODYBAG_01",
    "OBJECT_HOBBE_CAVE_BODYBAG_02",
    "OBJECT_HKC_GATE_01",
    "OBJECT_HKC_SUMMONING_CIRCLE_01",
    "OBJECT_HKC_PIER_01",
    "OBJECT_HKC_PIER_END_01",
    "OBJECT_HKC_PIER_STEPS_END_01",
    "OBJECT_SEPTIMAL_KEY_01",
    "OBJECT_HKC_LIGHTHOUSE_LEVER",
    "OBJECT_HKC_TELEPORTER_OFF_01",
    "OBJECT_HKC_TELEPORTER_ON_01",
    "OBJECT_HOOKCOAST_LIGHTHOUSE_LIGHTDRUM",
    "OBJECT_HOOKCOAST_DOOR_HOUSE_01",
    "OBJECT_HOOKCOAST_DOOR_PUB_01",
    "OBJECT_HOOKCOAST_DOOR_PUB_02",
    "OBJECT_HKC_TOWN_BELL_01",
    "OBJECT_HKC_FOUNTAIN_KRAKEN_01",
    "OBJECT_HKC_GALLEON_01",
    "OBJECT_HKC_BOAT_01",
    "OBJECT_HKC_BOAT_02",
    "OBJECT_HKC_BOATWRECK_01",
    "OBJECT_HKC_BOATWRECK_02",
    "OBJECT_HKC_BOATWRECK_03",
    "OBJECT_HKC_CRATE_01",
    "OBJECT_HKC_CRATE_LARGE_01",
    "OBJECT_HKC_CRATE_LARGE_OPEN_01",
    "OBJECT_HKC_CRATE_LARGE_SMASHED_01",
    "OBJECT_HKC_CRATE_SMALL_OPEN_01",
    "OBJECT_HKC_CRATE_SMALL_SMASHED_01",
    "OBJECT_HKC_ROPE_01",
    "OBJECT_HKC_SHARKPOST_01",
    "OBJECT_HKC_ANCHOR_01",
    "OBJECT_HKC_CHAINS_01",
    "OBJECT_HKC_STORE_COUNTER_01_TO_06",
    "OBJECT_HKC_STORE_COUNTER_GENERIC_07",
    "OBJECT_HKC_STORE_COUNTER_GENERIC_08",
    "OBJECT_HKC_STORE_COUNTER_GENERIC_09_TO_10",
    "OBJECT_HKC_BAR_01",
    "OBJECT_HKC_BED_01",
    "OBJECT_HKC_BED_02",
    "OBJECT_HKC_BED_03",
    "OBJECT_HKC_CHAIR_01",
    "OBJECT_HKC_CUPBOARD_MEDIUM_01",
    "OBJECT_HKC_CUPBOARD_TALL_01",
    "OBJECT_HKC_CUPBOARD_TALL_02",
    "OBJECT_HKC_PICTURE_01",
    "OBJECT_HKC_PICTURE_02",
    "OBJECT_HKC_PICTURE_03",
    "OBJECT_HKC_PICTURE_04",
    "OBJECT_HKC_PICTURE_05",
    "OBJECT_HKC_PICTURE_06",
    "OBJECT_HKC_STOOL_01",
    "OBJECT_HKC_TABLE_RECTANGULAR_01",
    "OBJECT_HKC_TABLE_ROUND_01",
    "OBJECT_HKC_TABLE_ROUND_STOOLS_01",
    "OBJECT_HKC_TABLE_SQUARE_01",
    "OBJECT_HKC_CHEST_01",
    "OBJECT_HKC_CHEST_02",
    "OBJECT_HKC_SEAWALL_CURVED_01",
    "OBJECT_HKC_SEAWALL_DAMAGED_01",
    "OBJECT_HKC_SEAWALL_JOINT_01",
    "OBJECT_HKC_SEAWALL_CURVED_SMALL_01",
    "OBJECT_HKC_SEAWALL_STRAIGHT_01",
    "OBJECT_HKC_PINE_SNOWY_01",
    "OBJECT_DRAGON_QUEST_GATE_01",
    "OBJECT_DRAGON_QUEST_WALL_LONG_01",
    "OBJECT_DRAGON_QUEST_WALL_LONG_SMASHED_01",
    "OBJECT_DRAGON_QUEST_WALL_SHORT_01",
    "OBJECT_DRAGON_QUEST_WALL_SHORT_SMASHED_01",
    "OBJECT_DRAGON_QUEST_TOWER_01",
    "OBJECT_DRAGON_QUEST_RUBBLE_01",
    "OBJECT_DRAGON_QUEST_RUBBLE_02",
    "OBJECT_DRAGON_QUEST_BRIDGE_01",
    "OBJECT_DRAGON_QUEST_CRATER_01",
    "OBJECT_HC_STEPS_01",
    "OBJECT_HC_WALL_SMALL_STRAIGHT_01",
    "OBJECT_HC_WALL_SMALL_BROKEN_01",
    "OBJECT_HC_WALL_SMALL_BROKEN_END_01",
    "OBJECT_HC_WALL_SMALL_STRAIGHT_BIG_01",
    "OBJECT_HC_WALL_SMALL_STRAIGHT_BIG_BROKEN_01",
    "OBJECT_HC_WALL_SMALL_CURVED_01",
    "OBJECT_HC_WALL_SMALL_CURVED_180",
    "OBJECT_HC_WALL_SMALL_CURVED_BIG_01",
    "OBJECT_HC_WALL_SMALL_CURVED_BIG_BROKEN_01",
    "OBJECT_HC_WALL_SMALL_POST_02",
    "OBJECT_HC_WALL_SMALL_POST_03",
    "OBJECT_HKC_LIGHTHOUSE_PANEL_01",
    "OBJECT_HKC_LIGHTHOUSE_PEDESTAL_01",
    "OBJECT_BUILDING_WINDOW_LIGHTHOUSE_01",
    "OBJECT_BUILDING_WINDOW_LIGHTHOUSE_BROKEN_01",
    "OBJECT_HERO_DOLL_TEMPLATE",
    "OBJECT_APPLE_GREEN_01",
    "OBJECT_APPLE_RED_01",
    "OBJECT_PIE_APPLE_01",
    "OBJECT_PIE_BLUEBERRY_01",
    "OBJECT_PIE_STRAWBERRY_01",
    "OBJECT_FISH_CARP_MEDIUM_01",
    "OBJECT_FISH_CARP_MEDIUM_02",
    "OBJECT_FISH_CARP_MEDIUM_03",
    "OBJECT_FISH_CARP_MEDIUM_04",
    "OBJECT_CARROT",
    "OBJECT_RED_MEAT_01",
    "OBJECT_RED_MEAT_02",
    "OBJECT_MOONFISH",
    "OBJECT_GOLDEN_CARROT",
    "OBJECT_TOFU",
    "OBJECT_CRUNCHY_CHICK",
    "OBJECT_DYNAMIC_POTION_DUMMY",
    "OBJECT_DYNAMIC_RESURRECTION_DUMMY",
    "OBJECT_HEALTH_POTION",
    "OBJECT_MANA_POTION",
    "OBJECT_SUPER_HEALTH_POTION",
    "OBJECT_SUPER_MANA_POTION",
    "OBJECT_WILL_POTION",
    "OBJECT_STRENGTH_POTION",
    "OBJECT_SKILL_POTION",
    "OBJECT_ADRENALINE_POTION",
    "OBJECT_THROWING_ORB_AMNESIA",
    "OBJECT_THROWING_ORB_LIGHTNING",
    "OBJECT_THROWING_ORB_ENFLAME",
    "OBJECT_THROWING_ORB_BOMB",
    "OBJECT_THROWING_ORB_SLOWTIME",
    "OBJECT_GUILD_SEAL_1",
    "OBJECT_HERO_MONEY_BAG",
    "OBJECT_HAND_LAMP",
    "OBJECT_POCKET_WATCH",
    "OBJECT_FISHING_ROD",
    "OBJECT_FISHING_ROD_UPGRADED",
    "OBJECT_SPADE",
    "OBJECT_RESURRECTION_PHIAL",
    "OBJECT_SILVER_KEY",
    "OBJECT_PERFUME",
    "OBJECT_ROSE_RED_01",
    "OBJECT_CHOCOLATE_BOX_UNGIVEABLE",
    "OBJECT_CHOCOLATE_BOX_01",
    "OBJECT_WEDDING_RING",
    "OBJECT_FAKE_WEDDING_RING",
    "OBJECT_BOOK_RAISE_SEXINESS",
    "OBJECT_BOOK_RAISE_AGREEABILITY",
    "OBJECT_BOOK_RAISE_SCARINESS",
    "OBJECT_BOOK_REDUCE_SEXINESS",
    "OBJECT_BOOK_REDUCE_AGREEABILITY",
    "OBJECT_BOOK_REDUCE_SCARINESS",
    "OBJECT_HAIRCUT_CARD_01",
    "OBJECT_HAIRCUT_CARD_SHAVED",
    "OBJECT_HAIRCUT_CARD_SHORT",
    "OBJECT_HAIRCUT_CARD_MOP",
    "OBJECT_HAIRCUT_CARD_PONYTAIL",
    "OBJECT_HAIRCUT_CARD_06",
    "OBJECT_HAIRCUT_CARD_07",
    "OBJECT_HAIRCUT_CARD_08",
    "OBJECT_HAIRCUT_CARD_BALD",
    "OBJECT_BEARD_CARD_01",
    "OBJECT_BEARD_CARD_02",
    "OBJECT_BEARD_CARD_03",
    "OBJECT_BEARD_CARD_04",
    "OBJECT_BEARD_CARD_05",
    "OBJECT_BEARD_CARD_06",
    "OBJECT_BEARD_CARD_07",
    "OBJECT_BEARD_CARD_08",
    "OBJECT_BEARD_CARD_09",
    "OBJECT_BEARD_CARD_CLEAN_SHAVEN",
    "OBJECT_TASH_CARD_01",
    "OBJECT_TASH_CARD_02",
    "OBJECT_TASH_CARD_03",
    "OBJECT_TASH_CARD_04",
    "OBJECT_TASH_CARD_05",
    "OBJECT_TASH_CARD_06",
    "OBJECT_TATTOO_CARD_REMOVE_ALL_TATTOOS",
    "OBJECT_TATTOO_CARD_CHEST_01",
    "OBJECT_TATTOO_CARD_CHEST_02",
    "OBJECT_TATTOO_CARD_CHEST_03",
    "OBJECT_TATTOO_CARD_CHEST_04",
    "OBJECT_TATTOO_CARD_CHEST_CUSTOM_01",
    "OBJECT_TATTOO_CARD_BACK_CUSTOM_01",
    "OBJECT_TATTOO_CARD_BACK_01",
    "OBJECT_TATTOO_CARD_BACK_02",
    "OBJECT_TATTOO_CARD_BACK_03",
    "OBJECT_TATTOO_CARD_ARMS_CUSTOM_01",
    "OBJECT_TATTOO_CARD_ARMS_01",
    "OBJECT_TATTOO_CARD_ARMS_02",
    "OBJECT_TATTOO_CARD_ARMS_03",
    "OBJECT_TATTOO_CARD_LEGS_CUSTOM_01",
    "OBJECT_TATTOO_CARD_LEGS_01",
    "OBJECT_TATTOO_CARD_LEGS_02",
    "OBJECT_TATTOO_CARD_FACE_CUSTOM_01",
    "OBJECT_TATTOO_CARD_FACE_01",
    "OBJECT_TATTOO_CARD_FACE_02",
    "OBJECT_TATTOO_CARD_FACE_03",
    "OBJECT_TATTOO_CARD_BS_BACK_01",
    "OBJECT_TATTOO_CARD_BS_BACK_02",
    "OBJECT_TATTOO_CARD_BS_BACK_03",
    "OBJECT_TATTOO_CARD_HC_ARMS_01",
    "OBJECT_TATTOO_CARD_HC_BACK_01",
    "OBJECT_TATTOO_CARD_HC_BACK_02",
    "OBJECT_TATTOO_CARD_HC_BACK_03",
    "OBJECT_TATTOO_CARD_HC_BACK_04",
    "OBJECT_TATTOO_CARD_HC_BACK_05",
    "OBJECT_TATTOO_CARD_HC_BACK_06",
    "OBJECT_TATTOO_CARD_HC_FACE_01",
    "OBJECT_TATTOO_CARD_HC_FACE_02",
    "OBJECT_TATTOO_CARD_HC_FACE_03",
    "OBJECT_TATTOO_CARD_HC_FACE_04",
    "OBJECT_TATTOO_CARD_HC_FACE_05",
    "OBJECT_TATTOO_CARD_HC_FACE_06",
    "OBJECT_TATTOO_CARD_HC_TORSO_01",
    "OBJECT_TATTOO_CARD_HC_TORSO_02",
    "OBJECT_TATTOO_CARD_HC_TORSO_03",
    "OBJECT_TATTOO_CARD_HC_TORSO_04",
    "OBJECT_TATTOO_CARD_HC_TORSO_05",
    "OBJECT_TATTOO_CARD_HC_TORSO_06",
    "OBJECT_TATTOO_CARD_HC_TORSO_07",
    "OBJECT_TATTOO_CARD_KHG_CHEST_01",
    "OBJECT_TATTOO_CARD_KHGWAR_CHEST_01",
    "OBJECT_TATTOO_CARD_KHGWAR_CHEST_02",
    "OBJECT_TATTOO_CARD_KHGWAR_CHEST_03",
    "OBJECT_TATTOO_CARD_KHG_BACK_01",
    "OBJECT_TATTOO_CARD_KHGWAR_BACK_01",
    "OBJECT_TATTOO_CARD_KHGWAR_BACK_02",
    "OBJECT_TATTOO_CARD_KHGWAR_BACK_03",
    "OBJECT_TATTOO_CARD_KHG_ARMS_01",
    "OBJECT_TATTOO_CARD_KHGWAR_ARMS_01",
    "OBJECT_TATTOO_CARD_KHG_LEGS_01",
    "OBJECT_TATTOO_CARD_KHGWAR_LEGS_01",
    "OBJECT_TATTOO_CARD_KHG_FACE_01",
    "OBJECT_TATTOO_CARD_KHGWAR_FACE_01",
    "OBJECT_TATTOO_CARD_KHGWAR_FACE_02",
    "OBJECT_TATTOO_CARD_KHGWAR_FACE_03",
    "OBJECT_TATTOO_CARD_CHEST_BBB",
    "OBJECT_TATTOO_CARD_BACK_BBB",
    "OBJECT_TATTOO_CARD_CHEST_LH",
    "OBJECT_TATTOO_CARD_BACK_LH",
    "OBJECT_TATTOO_CARD_BACK_BALVERINE",
    "OBJECT_TATTOO_CARD_BACK_DRAGON",
    "OBJECT_TATTOO_CARD_SS_FACE_01",
    "OBJECT_TATTOO_CARD_SS_FACE_02",
    "OBJECT_TATTOO_CARD_SS_FACE_03",
    "OBJECT_TATTOO_CARD_SS_FACE_04",
    "OBJECT_TATTOO_CARD_SS_FACE_05",
    "OBJECT_TATTOO_CARD_SS_FACE_06",
    "OBJECT_TATTOO_CARD_SS_FACE_07",
    "OBJECT_TATTOO_CARD_SS_FACE_08",
    "OBJECT_TATTOO_CARD_SS_FACE_BLACKSMITH",
    "OBJECT_TATTOO_CARD_SS_FACE_GUARD",
    "OBJECT_TATTOO_CARD_SS_FACE_INNKEEPER",
    "OBJECT_CHUNK_BASE",
    "OBJECT_IRON_CHUNK",
    "OBJECT_STEEL_CHUNK",
    "OBJECT_YEW_CHUNK",
    "OBJECT_OAK_CHUNK",
    "OBJECT_EBONY_CHUNK",
    "OBJECT_CRYSTAL_CHUNK",
    "OBJECT_A_CHUNK",
    "OBJECT_B_CHUNK",
    "OBJECT_C_CHUNK",
    "OBJECT_D_CHUNK",
    "OBJECT_GEMSTONE_BASE",
    "OBJECT_GEMSTONE_AMETHYST",
    "OBJECT_GEMSTONE_DIAMOND",
    "OBJECT_GEMSTONE_EMERALD",
    "OBJECT_GEMSTONE_RUBY",
    "OBJECT_GEMSTONE_SAPPHIRE",
    "OBJECT_GEMSTONE_JET",
    "OBJECT_GRAIN_SACK",
    "OBJECT_FLOUR_SACK",
    "OBJECT_BEER_KEG",
    "OBJECT_BEER_TANKARD",
    "OBJECT_LIQUOR_CRATE",
    "OBJECT_BALVERINE_CLAW",
    "OBJECT_NYMPH_WINGS",
    "OBJECT_TROLL_LUMP",
    "OBJECT_BANDIT_EARS",
    "OBJECT_WASP_STING",
    "OBJECT_SKELETON_BONES",
    "OBJECT_HOBBES_TEETH",
    "OBJECT_DOLL_BRIAR_ROSE_01",
    "OBJECT_DOLL_HERO_01",
    "OBJECT_DOLL_JACK_OF_BLADES_01",
    "OBJECT_DOLL_MAZE_01",
    "OBJECT_DOLL_SCARLET_ROBE_01",
    "OBJECT_DOLL_SCYTHE_01",
    "OBJECT_DOLL_THUNDER_01",
    "OBJECT_DOLL_TWINBLADE_01",
    "OBJECT_DOLL_WHISPER_01",
    "OBJECT_FISHING_ROD_BASIC",
    "OBJECT_OLD_BOOT_01",
    "OBJECT_BUCKET_RUSTY_01",
    "OBJECT_STICK",
    "OBJECT_MAP_PIECE_01",
    "OBJECT_OAK_VALE_GATE_PASS",
    "OBJECT_TREASURE_CLUE_1",
    "OBJECT_TREASURE_CLUE_2",
    "OBJECT_TREASURE_CLUE_3",
    "OBJECT_TREASURE_CLUE_4",
    "OBJECT_TREASURE_CLUE_5",
    "OBJECT_TREASURE_CLUE_6",
    "OBJECT_HEIRLOOM_JEWELBOX_01",
    "OBJECT_CHAMPIONS_SEAL",
    "OBJECT_SISTERS_LOCKET",
    "OBJECT_LANTERN",
    "OBJECT_GUILDSEAL_BASE",
    "OBJECT_GUILDSEAL_FULL",
    "OBJECT_HOUSE_DEEDS",
    "OBJECT_HOUSE_DEEDS_LADY_GREY",
    "OBJECT_DEEDS_HEROS_HOUSE",
    "OBJECT_SICK_CHILD_MANS_LETTER",
    "OBJECT_SICK_CHILD_WOMANS_LETTER",
    "OBJECT_SICK_CHILD_WOMANS_HERO_LETTER",
    "OBJECT_HAUNTED_DIARY_02",
    "OBJECT_BEGGAR_HAT",
    "OBJECT_HOBBE_TEETH_BAG",
    "OBJECT_MAP_KEEPER_REWARD",
    "OBJECT_TROPHY_BANDITKING_01",
    "OBJECT_WASP_QUEEN_HEAD_01",
    "OBJECT_WASP_QUEEN_HEAD_EVILTEST",
    "OBJECT_TROPHY_KING_SCORPION_01",
    "OBJECT_TROPHY_BALVERINE_HEAD",
    "OBJECT_TROPHY_CLAW",
    "OBJECT_TROPHY_HERO_AXE",
    "OBJECT_TROPHY_HERO_BELT",
    "OBJECT_TROPHY_LOBSTER_CLAW",
    "OBJECT_TROPHY_TOOTH",
    "OBJECT_TROPHY_TRADER_HEAD",
    "OBJECT_SCRUMPY_CRATE_TROPHY",
    "OBJECT_PUNCHCLUB_TROPHY_KNOTHOLE",
    "OBJECT_TROPHY_THUNDER",
    "OBJECT_TROPHY_KRAKEN_TOOTH",
    "OBJECT_TROPHY_ARCHAEOLOGIST_MAP_01",
    "OBJECT_TROPHY_DRAGON_SCALE_01",
    "OBJECT_TROPHY_BALVERINE_FM_HEAD_01",
    "OBJECT_TROPHY_GOLDEN_FISH_01",
    "OBJECT_TROPHY_HOBBE_HEAD_01",
    "OBJECT_TROPHY_MAZE_HEAD_01",
    "OBJECT_TROPHY_MINION_HELMET_01",
    "OBJECT_TROPHY_PUNCH_CLUB_01",
    "OBJECT_TROPHY_SCORPION_STING_01",
    "OBJECT_TROPHY_SILVER_ARROW_01",
    "OBJECT_TROPHY_TRADER_FEATHER_01",
    "OBJECT_TROPHY_UNDEAD_HAND_01",
    "OBJECT_TROPHY_WHISPER_BROOCH_01",
    "OBJECT_TROPHY_JOB_MASK_01",
    "OBJECT_TROPHY_DRAGON_GATE_01",
    "OBJECT_TROPHY_SHIP_MAP_01",
    "OBJECT_TROPHY_SUMMONER_01",
    "OBJECT_TROPHY_FIREHEART_01",
    "OBJECT_PUNCH_CLUB_MEMBERSHIP_L1",
    "OBJECT_PUNCH_CLUB_MEMBERSHIP_L2",
    "OBJECT_PUNCH_CLUB_MEMBERSHIP_L3",
    "OBJECT_BANDIT_CAMP_PASS",
    "OBJECT_TEST_ROTATING_KEY",
    "OBJECT_SETHTON_LOVE_LETTER",
    "OBJECT_SECRET_GROVE_KEY",
    "OBJECT_NOMINATION_CERTIFICATE",
    "OBJECT_GRANNY_SPECIAL_PIE",
    "OBJECT_BOUNTYBANDIT_RING",
    "OBJECT_GREY_SISTER_DYING_LETTER",
    "OBJECT_BOOK_STORY_01",
    "OBJECT_BOOK_STORY_02",
    "OBJECT_BOOK_STORY_03",
    "OBJECT_BOOK_STORY_04",
    "OBJECT_BOOK_STORY_05",
    "OBJECT_BOOK_STORY_06",
    "OBJECT_BOOK_STORY_07",
    "OBJECT_BOOK_STORY_08",
    "OBJECT_BOOK_STORY_09",
    "OBJECT_BOOK_STORY_10",
    "OBJECT_BOOK_STORY_11",
    "OBJECT_BOOK_STORY_12",
    "OBJECT_BOOK_STORY_13",
    "OBJECT_BOOK_STORY_14",
    "OBJECT_BOOK_STORY_15",
    "OBJECT_BOOK_STORY_16",
    "OBJECT_BOOK_GUILD_ARENA",
    "OBJECT_BOOK_GUILD_CREATURES",
    "OBJECT_BOOK_GUILD_CREATURES_02",
    "OBJECT_BOOK_GUILD_CREATURES_03",
    "OBJECT_BOOK_GUILD_CREATURES_04",
    "OBJECT_BOOK_GUILD_DRAGONS",
    "OBJECT_BOOK_GUILD_HAIKUS",
    "OBJECT_BOOK_GUILD_HISTORY",
    "OBJECT_BOOK_GUILD_JACK1",
    "OBJECT_BOOK_GUILD_LOVE_STORY",
    "OBJECT_BOOK_GUILD_MAXLEY",
    "OBJECT_BOOK_GUILD_NORTHERN_WASTE",
    "OBJECT_BOOK_GUILD_OK1",
    "OBJECT_BOOK_GUILD_OTHER_LAND",
    "OBJECT_BOOK_GUILD_SEERS",
    "OBJECT_BOOK_GUILD_SPELLS",
    "OBJECT_BOOK_GUILD_TWINBLADE",
    "OBJECT_BOOK_GUILD_WEAPONS",
    "OBJECT_BOOK_GUILD_WHITE_BALVERINE",
    "OBJECT_BOOK_THERESA_LETTER",
    "OBJECT_BOOK_BLOODLINE",
    "OBJECT_MAZE_JOURNAL",
    "OBJECT_HAUNTED_DIARY_01",
    "OBJECT_NAME_01",
    "OBJECT_NAME_02",
    "OBJECT_NAME_03",
    "OBJECT_NAME_04",
    "OBJECT_NAME_05",
    "OBJECT_NAME_06",
    "OBJECT_NAME_07",
    "OBJECT_NAME_08",
    "OBJECT_NAME_09",
    "OBJECT_NAME_10",
    "OBJECT_NAME_11",
    "OBJECT_NAME_12",
    "OBJECT_NAME_13",
    "OBJECT_NAME_14",
    "OBJECT_NAME_15",
    "OBJECT_NAME_16",
    "OBJECT_NAME_17",
    "OBJECT_NAME_18",
    "OBJECT_NAME_19",
    "OBJECT_NAME_20",
    "OBJECT_REDPOTION",
    "OBJECT_REDPOTION_BIG",
    "OBJECT_POTION_BLUE_01",
    "OBJECT_POTION_BLUE_EMPTY_01",
    "OBJECT_POTION_RED_02",
    "OBJECT_POTION_RED_EMPTY_02",
    "OBJECT_POTION_GREEN_03",
    "OBJECT_POTION_GREEN_EMPTY_03",
    "OBJECT_BOOK_01",
    "OBJECT_BOOK_LOCKED_01",
    "OBJECT_BOOK_OPEN_01",
    "OBJECT_BOOK_LOCKED_02",
    "OBJECT_BOOK_OPEN_02",
    "OBJECT_BOOK_03",
    "OBJECT_BOOK_LOCKED_03",
    "OBJECT_BOOK_OPEN_03",
    "OBJECT_BOOK_04",
    "OBJECT_BOOK_LOCKED_04",
    "OBJECT_BOOK_OPEN_04",
    "OBJECT_TATTOO_CARD_01",
    "OBJECT_MEAT_HUNK_01",
    "OBJECT_PIE_APPLE_01_OLD",
    "OBJECT_PIE_REDCURRANT_01_OLD",
    "OBJECT_ROSE_BLACK_BUD_01",
    "OBJECT_ROSE_RED_BUD_01",
    "OBJECT_GEMSTONE_EMERALD_01",
    "OBJECT_GEMSTONE_RUBY_01",
    "OBJECT_ORCHARD_FARM_GEM",
    "OBJECT_ORCHARD_FARM_SMALLER_GEM",
    "OBJECT_GEMSTONE_SAPPHIRE_01",
    "OBJECT_MUSHROOM_PICKED_BROWN_01",
    "OBJECT_MUSHROOM_PICKED_GREEN_01",
    "OBJECT_MUSHROOM_PICKED_RED_01",
    "OBJECT_MUSHROOM_PICKED_YELLOW_01",
    "OBJECT_PERFUME_BOTTLE_BLACK_01",
    "OBJECT_PERFUME_BOTTLE_RED_01",
    "OBJECT_PERFUME_BOTTLE_YELLOW_01",
    "OBJECT_SCROLL_01",
    "OBJECT_REDAPPLE",
    "OBJECT_GREENAPPLE",
    "OBJECT_APPLEPIE",
    "OBJECT_GOLDBAG_SMALL",
    "OBJECT_GOLDBAG_SMALL_WITH_COINS",
    "OBJECT_GOLDBAG_MEDIUM",
    "OBJECT_GOLDBAG_MEDIUM_WITH_COINS",
    "OBJECT_GOLDBAG_MEDIUM_WITH_COINS_500",
    "OBJECT_GOLD_1",
    "OBJECT_GOLD_2",
    "OBJECT_GOLD_5",
    "OBJECT_GOLD_10",
    "OBJECT_GOLD_20",
    "OBJECT_GOLD_50",
    "OBJECT_GOLD_100",
    "OBJECT_GOLD_250",
    "OBJECT_GOLD_500",
    "OBJECT_GOLD_1000",
    "OBJECT_GOLD_2000",
    "OBJECT_GOLD_5000",
    "OBJECT_GOLD_10000",
    "OBJECT_GOLD_50000",
    "OBJECT_GOLD_100000",
    "OBJECT_GOLD_500000",
    "OBJECT_GOLD_1000000",
    "OBJECT_KHG_ARCHERY_BACKDROP_01",
    "OBJECT_KHG_ARCHERY_HOUSES_01",
    "OBJECT_KHG_ARCHERY_PUB_01",
    "OBJECT_KHG_ARCHERY_STUMP_01",
    "OBJECT_KHG_ARCHERY_BIG_TREES_01",
    "OBJECT_KHG_PINE_GATE",
    "OBJECT_KHG_BARRICADE_LARGE_01",
    "OBJECT_KHG_BARRICADE_01",
    "OBJECT_KHG_LAMPOST_LIT_SINGLE_01",
    "OBJECT_KHG_LAMPOST_UNLIT_SINGLE_01",
    "OBJECT_KHG_LANTERN_ROPE_01",
    "OBJECT_KHG_LANTERN_ROPE_02",
    "OBJECT_KHG_LANTERN_ROPE_03",
    "OBJECT_KHG_LANTERN_ROPE_SMALL_01",
    "OBJECT_KHG_ALARM_01",
    "OBJECT_KHG_BAR_01",
    "OBJECT_KHG_CANDLES_01",
    "OBJECT_KHG_CHEST_01",
    "OBJECT_KHG_CHEST_02",
    "OBJECT_KHG_CHEST_03",
    "OBJECT_KHG_SHOP_TABLE_01_TO_04",
    "OBJECT_KHG_SHOP_TABLE_05_TO_07",
    "OBJECT_KHG_SHOP_TABLE_08_TO_09",
    "OBJECT_KHG_ANVIL_01",
    "OBJECT_KHG_STATUE",
    "OBJECT_KHG_FENCE_BROKEN_01",
    "OBJECT_KHG_FENCE_DOUBLE_01",
    "OBJECT_KHG_FENCE_POST_01",
    "OBJECT_KHG_FENCE_SINGLE_01",
    "OBJECT_KHG_TOTEM_POLE_01",
    "OBJECT_KHG_SCARLET_ROSE_STATUE_01",
    "OBJECT_KHG_PALISADE_GATE_01",
    "OBJECT_KHG_PALISADE_SMALL_01",
    "OBJECT_KHG_PALISADE_SMALL_CORNER_01",
    "OBJECT_KHG_PALISADE_LARGE_01",
    "OBJECT_KHG_PALISADE_LARGE_ANGLED_01",
    "OBJECT_SCRIPT_PALISADE_FORCEFIELD",
    "OBJECT_KHG_RUG_01",
    "OBJECT_KHG_RUG_02",
    "OBJECT_KHG_RUG_03",
    "OBJECT_KHG_RUG_04",
    "OBJECT_KHG_BANNER_FRAME_01",
    "OBJECT_KHG_BANNER_FRAME_02",
    "OBJECT_KHG_BANNER_LONG_01",
    "OBJECT_KHG_BANNER_MEDIUM_01",
    "OBJECT_KHG_BANNER_MULTI_01",
    "OBJECT_KHG_BANNER_SMALL_01",
    "OBJECT_KHG_BANNER_TAPESTRY_01",
    "OBJECT_KHG_BANNER_TAPESTRY_02",
    "OBJECT_KHG_BANNER_THIN_01",
    "OBJECT_KHG_STOOL_01",
    "OBJECT_KHG_STOOL_TALL_01",
    "OBJECT_KHG_TABLE_ROUND_01",
    "OBJECT_KHG_TABLE_ROUND_02",
    "OBJECT_KHG_TABLE_LONG_01",
    "OBJECT_KHG_TABLE_LONG_02",
    "OBJECT_KHG_TABLE_STOOLS_01",
    "OBJECT_KHG_TABLE_GAMING_01",
    "OBJECT_KHG_TABLE_FEASTING_01",
    "OBJECT_KHG_LAMP_TABLE_LIT_01",
    "OBJECT_KHG_LAMP_TABLE_UNLIT_01",
    "OBJECT_KHG_CUPBOARD_01",
    "OBJECT_KHG_CUPBOARD_02",
    "OBJECT_KHG_CUPBOARD_SMALL_01",
    "OBJECT_KHG_CUPBOARD_SMALL_02",
    "OBJECT_KHG_BED_01",
    "OBJECT_KHG_BED_02",
    "OBJECT_KHG_BED_03",
    "OBJECT_KHG_BED_FLOOR_01",
    "OBJECT_KHG_BED_FLOOR_02",
    "OBJECT_KHG_BOX_01",
    "OBJECT_KHG_BOX_BROKEN_01",
    "OBJECT_KHG_MUSHROOM_BRACKETLIGHT_01",
    "OBJECT_KHG_MUSHROOM_BRACKETLIGHT_02",
    "OBJECT_KHG_MUSHROOM_BULB_CLUMP_01",
    "OBJECT_KHG_MUSHROOM_CLUMP_01",
    "OBJECT_KHG_MUSHROOM_LAMP_01",
    "OBJECT_KHG_LOG_LARGE_01",
    "OBJECT_KHG_LOG_LARGE_02",
    "OBJECT_KHG_LOG_PILE_01",
    "OBJECT_KHG_LOG_PILE_02",
    "OBJECT_KHG_LOG_PILE_03",
    "OBJECT_KHG_LOG_PILE_BROKEN_01",
    "OBJECT_KHG_SAWHORSE_01",
    "OBJECT_KHG_SAWHORSE_02",
    "OBJECT_KHG_SAWHORSE_03",
    "OBJECT_KHG_SAWHORSE_BROKEN_01",
    "OBJECT_KHG_DOOR_CHIEF_HUT_01",
    "OBJECT_KHG_DOOR_01",
    "OBJECT_KHG_TATOOIST_PICTURE_FRAME_01",
    "OBJECT_KHG_TATOOIST_SINK_01",
    "OBJECT_KHG_TATOOIST_CHAIR_01",
    "OBJECT_KHG_PALISADE_STAIRS_01",
    "OBJECT_BIG_OAK_TEST_01",
    "OBJECT_BLASTEDTREE",
    "OBJECT_BLASTEDTREE_LAMP_01",
    "OBJECT_FUNGUS_01",
    "OBJECT_FUNGUS_02",
    "OBJECT_FAE_STONE_01",
    "OBJECT_FAE_STONE_02",
    "OBJECT_FAE_STONE_03",
    "OBJECT_FAE_STONE_04",
    "OBJECT_SINGING_STONE_01",
    "OBJECT_SINGING_STONE_02",
    "OBJECT_SINGING_STONE_03",
    "OBJECT_SINGING_STONE_04",
    "OBJECT_BIGROCK_01",
    "OBJECT_BIGROCK_02",
    "OBJECT_LARGEROCKCLUMP_01",
    "OBJECT_LARGEROCKCLUMP_02",
    "OBJECT_LARGEROCKCLUMP_03",
    "OBJECT_SMALLROCKCLUMP_01",
    "OBJECT_SMALLROCKCLUMP_02",
    "OBJECT_SMALLROCKCLUMP_03",
    "OBJECT_HOLLOWSTUMP",
    "OBJECT_FLATROCK_01",
    "OBJECT_FLATROCK_02",
    "OBJECT_FLATROCK_03",
    "OBJECT_FLATROCK_04",
    "OBJECT_FLATROCK_05",
    "OBJECT_BRIGHTWOOD_LARGEROCK_01",
    "OBJECT_BRIGHTWOOD_LARGEROCK_02",
    "OBJECT_BRIGHTWOOD_LARGEROCK_03",
    "OBJECT_BRIGHTWOOD_LARGEROCK_04",
    "OBJECT_BRIGHTWOOD_LARGEROCK_05",
    "OBJECT_BRIGHTWOOD_MEDIUMROCK_01",
    "OBJECT_BRIGHTWOOD_MEDIUMROCK_02",
    "OBJECT_BRIGHTWOOD_MEDIUMROCK_03",
    "OBJECT_BRIGHTWOOD_MEDIUMROCK_04",
    "OBJECT_BRIGHTWOOD_MEDIUMROCK_06",
    "OBJECT_BRIGHTWOOD_SMALLROCK_01",
    "OBJECT_BRIGHTWOOD_SMALLROCK_02",
    "OBJECT_BRIGHTWOOD_SMALLROCK_03",
    "OBJECT_BRIGHTWOOD_SMALLROCK_04",
    "OBJECT_BRIGHTWOOD_SMALLROCK_05",
    "OBJECT_BRIGHTWOOD_SMALLROCK_06",
    "OBJECT_BRIGHTWOOD_SMALLROCK_07",
    "OBJECT_BRIGHTWOOD_SMALLROCK_08",
    "OBJECT_BRIGHTWOOD_SMALLROCK_10",
    "OBJECT_GREATFIELDS_ROCKPILE_01",
    "OBJECT_BRIGHTWOOD_MEDIUMLOG",
    "OBJECT_BRIGHTWOOD_LARGELOG",
    "OBJECT_GREATFIELDS_LARGEROCK_01",
    "OBJECT_GREATFIELDS_LARGEROCK_02",
    "OBJECT_GREATFIELDS_LARGEROCK_03",
    "OBJECT_GREATFIELDS_LARGEROCK_04",
    "OBJECT_GREATFIELDS_LARGEROCK_05",
    "OBJECT_GREATFIELDS_LARGEROCK_06",
    "OBJECT_GREATFIELDS_LARGEROCK_07",
    "OBJECT_GREATFIELDS_ROCKFACEGRANITE_01",
    "OBJECT_CAVE_BRAZIER",
    "OBJECT_CAVE_CHAMBER_01",
    "OBJECT_WORLDTREE",
    "OBJECT_NW_GALLEON",
    "OBJECT_NW_GALLEON_CUTSCENE",
    "OBJECT_NW_BRIDGE_SIMPLE_01",
    "OBJECT_NW_STAIRWAY_SPIRAL_01",
    "OBJECT_NW_SIGNPOST_PLAQUE_01",
    "OBJECT_NW_SIGNPOST_DIRECTION_01",
    "OBJECT_NW_FOUNTAIN_01",
    "OBJECT_NW_FOUNTAIN_GRIFFIN_01",
    "OBJECT_NW_PILLAR_01",
    "OBJECT_NW_PILLAR_MONK_01",
    "OBJECT_NW_PILLAR_COLLAPSED_01",
    "OBJECT_NW_PILLAR_COLLAPSED_02",
    "OBJECT_NW_CROSSPILLAR_01",
    "OBJECT_NW_PIER_01",
    "OBJECT_NW_PIER_END_01",
    "OBJECT_NW_SUNDIAL_01",
    "OBJECT_NW_ARCH_BROKEN_01",
    "OBJECT_NW_ARCH_BROKEN_02",
    "OBJECT_NW_ARCH_FULL_01",
    "OBJECT_NW_STAIRWAY_01",
    "OBJECT_NW_STAIRWAY_02",
    "OBJECT_NW_TOWER_01",
    "OBJECT_NW_GATEWAY_WALL_01",
    "OBJECT_NW_GATEWAY_WALL_02",
    "OBJECT_NW_CRYPT_01",
    "OBJECT_NW_BANNER_01",
    "OBJECT_NW_BANNER_02",
    "OBJECT_NW_BANNER_03",
    "OBJECT_NW_BANNER_03A",
    "OBJECT_NW_BANNER_04",
    "OBJECT_NW_BANNER_04A",
    "OBJECT_NW_BANNER_05",
    "OBJECT_NW_BANNER_06",
    "OBJECT_NW_BANNER_07",
    "OBJECT_NW_BANNER_TRIPLE_01",
    "OBJECT_NW_BANNER_LARGE_01",
    "OBJECT_NW_BANNER_SMALL_01",
    "OBJECT_NW_BANNER_THIN_01",
    "OBJECT_NW_BANNER_TRADE_TATTOO_01",
    "OBJECT_NW_STATUE_HORSE_01",
    "OBJECT_NW_STATUE_KNIGHT_01",
    "OBJECT_NW_STATUE_KNIGHT_02",
    "OBJECT_NW_STATUE_KNIGHT_03",
    "OBJECT_NW_STATUE_GARGOYLE_01",
    "OBJECT_NW_STATUE_PLINTH_01",
    "OBJECT_NW_STATUE_PLINTH_02",
    "OBJECT_NW_WELL_01",
    "OBJECT_NW_SARCOPHAGUS_01",
    "OBJECT_NW_GRAVE_01",
    "OBJECT_NW_GRAVE_02",
    "OBJECT_NW_GRAVE_HALO_01",
    "OBJECT_NW_GRAVE_SWORD_01",
    "OBJECT_NW_GRAVE_WINGS_01",
    "OBJECT_NW_GRAVE_SURROUND_LONG_01",
    "OBJECT_NW_GRAVE_SURROUND_SHORT_01",
    "OBJECT_NW_RUBBLE_PILE_01",
    "OBJECT_NW_RUBBLE_01",
    "OBJECT_NW_RUBBLE_02",
    "OBJECT_NW_RUBBLE_03",
    "OBJECT_NW_RUBBLE_04",
    "OBJECT_NW_RUBBLE_05",
    "OBJECT_NW_RUBBLE_06",
    "OBJECT_NW_MARKETSTALL_OPEN_01",
    "OBJECT_NW_MARKETSTALL_CLOSED_01",
    "OBJECT_NW_MARKETSTALL_OPEN_02",
    "OBJECT_NW_MARKETSTALL_CLOSED_02",
    "OBJECT_NW_MARKETSTALL_01",
    "OBJECT_NW_GATE_01",
    "OBJECT_NW_GATE_SURROUND_01",
    "OBJECT_NW_SPIRE_EAGLE_01",
    "OBJECT_NW_WALL_ARCHWAY_01",
    "OBJECT_NW_WALL_FILL_01",
    "OBJECT_NW_WALL_STRAIGHT_LARGE_01",
    "OBJECT_NW_WALL_STRAIGHT_LARGE_02",
    "OBJECT_NW_WALL_STRAIGHT_SMALL_01",
    "OBJECT_NW_WALL_CURVE_LARGE_01",
    "OBJECT_NW_WALL_CURVE_SMALL_01",
    "OBJECT_NW_WALL_STATUE_COLUMN_01",
    "OBJECT_NW_WALL_TOWER_01",
    "OBJECT_NW_MANOR_HOUSE_01",
    "OBJECT_NW_WALL_SMALL_01",
    "OBJECT_NW_WALL_PILLAR_01",
    "OBJECT_NW_WALL_PILLAR_02",
    "OBJECT_NW_WALL_SMALL_BROKEN_01",
    "OBJECT_NW_WALL_SMALL_BROKEN_02",
    "OBJECT_NW_WALL_SMALL_BROKEN_03",
    "OBJECT_NW_WALL_SMALL_BROKEN_04",
    "OBJECT_NW_WALL_SMALL_CORNER_01",
    "OBJECT_NW_WALL_SMALL_CORNER_BROKEN_01",
    "OBJECT_NW_WALL_SMALL_CORNER_BROKEN_02",
    "OBJECT_NW_WALL_SMALL_END_BROKEN_01",
    "OBJECT_NW_WALL_SMALL_END_BROKEN_02",
    "OBJECT_NW_ROPEFENCE_01",
    "OBJECT_NW_ROPEFENCE_POST_01",
    "OBJECT_LOSTBAY_SEAWALL_JOINT_01",
    "OBJECT_LOSTBAY_SEAWALL_CURVED_SMALL_01",
    "OBJECT_LOSTBAY_SEAWALL_STRAIGHT_01",
    "OBJECT_LOSTBAY_SEAWALL_DAMAGED_01",
    "OBJECT_NW_DRAGON_GATE_01",
    "OBJECT_NW_DRAGON_GATE_SURROUND_01",
    "OBJECT_NW_DRAGON_GATE_SURROUND_02",
    "OBJECT_DRAGON_SPIKED_GATE_01",
    "OBJECT_DRAGON_STATUE_KNIGHT_01",
    "OBJECT_DRAGON_STATUE_KNIGHT_02",
    "OBJECT_NW_DRAGON_BLOCKING_PILLAR_01",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_01",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_02",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_03",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_04",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_05",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_06",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_07",
    "OBJECT_NW_DRAGON_LO_POLY_TOWER_08",
    "OBJECT_DRAGON_BANNER_01",
    "OBJECT_DRAGON_BANNER_02",
    "OBJECT_DRAGON_BANNER_03",
    "OBJECT_NW_CHEST_OPENABLE",
    "OBJECT_NW_TELEPORTER_GRIFFONS_01",
    "OBJECT_DRAGON_TOWER_CENTRE_01",
    "OBJECT_DEAD_FATHER_01",
    "OBJECT_OAKVALE_SHIP_TRADER_01",
    "OBJECT_OAKVALE_PIER_LARGE",
    "OBJECT_OAKVALE_PIER_MEDIUM",
    "OBJECT_OAKVALE_PIER_SMALL",
    "OBJECT_OAKVALE_PIER_END_01",
    "OBJECT_OAKVALE_PIER_STEPS_END_01",
    "OBJECT_OAKVALE_CHICKEN_STALL",
    "OBJECT_OAKVALE_STONE_BENCH",
    "OBJECT_OAKVALE_FOUNTAIN",
    "OBJECT_OAKVALE_MEMORIAL",
    "OBJECT_OAKVALE_MEMORIAL_02",
    "OBJECT_OAKVALE_MEMORIAL_GATE",
    "OBJECT_OAKVALE_MEMORIAL_FLOWERS_01",
    "OBJECT_STATUE_MOTHER_01",
    "OBJECT_BUILDING_WINDOW_OAKVALE_01",
    "OBJECT_BUILDING_WINDOW_OAKVALE_02",
    "OBJECT_BUILDING_WINDOW_OAKVALE_BROKEN",
    "OBJECT_BUILDING_WINDOW_OAKVALE_SHOP_01",
    "OBJECT_BUILDING_WINDOW_OAKVALE_BROKEN_SHOP",
    "OBJECT_BUILDING_DOORFRAME_OAKVALE_01",
    "OBJECT_BUILDING_WINDOW_BORDELLO_01",
    "OBJECT_BUILDING_WINDOW_BORDELLO_02",
    "OBJECT_BUILDING_WINDOW_BORDELLO_03",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_01_A",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_01_B",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_01_C",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_02_A",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_02_B",
    "OBJECT_OV_VILLAGER_CHARRED_MALE_02_C",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_01_A",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_01_B",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_01_C",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_02_A",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_02_B",
    "OBJECT_OV_VILLAGER_CHARRED_FEMALE_02_C",
    "OBJECT_CHICKEN_KICKING_ARENA_01",
    "OBJECT_CHICKEN_KICKING_BANNER_01",
    "OBJECT_CHICKEN_KICKING_BANNER_02",
    "OBJECT_OK_ABBEY_01",
    "OBJECT_OK_ABBEY_02",
    "OBJECT_OK_BRIDGE_SIMPLE_01",
    "OBJECT_OK_SPIRE_EAGLE_01",
    "OBJECT_OK_TOWER_02",
    "OBJECT_OK_STAIRWAY_SPIRAL_01",
    "OBJECT_OK_STAIRWAY_01",
    "OBJECT_OK_STAIRWAY_02",
    "OBJECT_OK_STAIRWAY_03",
    "OBJECT_OK_STAIRWAY_CURVE_LEFT_01",
    "OBJECT_OK_STAIRWAY_CURVE_RIGHT_01",
    "OBJECT_OK_WALL_SMALL_01",
    "OBJECT_OK_WALL_SMALL_02",
    "OBJECT_OK_WALL_SMALL_BROKEN_01",
    "OBJECT_OK_WALL_SMALL_BROKEN_02",
    "OBJECT_OK_WALL_SMALL_BROKEN_03",
    "OBJECT_OK_WALL_SMALL_BROKEN_04",
    "OBJECT_OK_WALL_SMALL_BROKEN_HALF_01",
    "OBJECT_OK_WALL_SMALL_BROKEN_HALF_02",
    "OBJECT_OK_WALL_SMALL_CORNER_01",
    "OBJECT_OK_WALL_SMALL_CORNER_BROKEN_01",
    "OBJECT_OK_WALL_SMALL_CORNER_BROKEN_02",
    "OBJECT_OK_WALL_PILLAR_01",
    "OBJECT_OK_WALL_PILLAR_02",
    "OBJECT_OK_PILLAR_RUBBLE_ARCHTOP_01",
    "OBJECT_OK_PILLAR_CROSSPILLAR_PAIR_01",
    "OBJECT_OK_PILLAR_CROSSPILLAR_01",
    "OBJECT_OK_ARCH_DOUBLE_CLOSED",
    "OBJECT_OK_ARCH_DOUBLE_CLOSED_HALF",
    "OBJECT_OK_ARCH_DOUBLE_OPEN",
    "OBJECT_OK_ARCH_SINGLE_OPEN",
    "OBJECT_OK_ARCH_SINGLE_BROKEN",
    "OBJECT_OK_ARCH_DOUBLE_RUIN",
    "OBJECT_OK_ARCH_SINGLE_RUIN",
    "OBJECT_OK_CRACKED_PLINTHE_01",
    "OBJECT_OK_CRACKED_PLINTHE_02",
    "OBJECT_OK_CRACKED_PLINTHE_03",
    "OBJECT_OK_PILLAR_COLLAPSED_01",
    "OBJECT_OK_PILLAR_COLLAPSED_02",
    "OBJECT_OK_PILLAR_COLLAPSED_03",
    "OBJECT_OK_PILLAR_STUMP_01",
    "OBJECT_OK_PILLAR_COMPLETE_01",
    "OBJECT_OK_GRAND_GATEWAY_01",
    "OBJECT_OK_WALL_SURROUND_LONG_01",
    "OBJECT_OK_WALL_SURROUND_SHORT_01",
    "OBJECT_OK_PILLAR_CROSSPILLAR_02",
    "OBJECT_OK_PILLAR_CROSSPILLAR_GRIFFON_01",
    "OBJECT_OK_PILLAR_ARCHPILLAR_01",
    "OBJECT_OK_PILLAR_ARCHPILLAR_BROKEN_01",
    "OBJECT_OK_PILLAR_ARCHPILLAR_PAIR_01",
    "OBJECT_OK_PILLAR_ARCHPILLAR_PAIR_02",
    "OBJECT_OK_PILLAR_MONKPILLAR_PAIR_01",
    "OBJECT_OK_PILLAR_MONKPILLAR_PAIR_02",
    "OBJECT_OK_PILLAR_MONKPILLAR_SINGLE_01",
    "OBJECT_OK_PILLAR_MONKPILLAR_SINGLE_BROKEN_01",
    "OBJECT_OK_PILLAR_MONKPILLAR_SINGLE_RUBBLE_01",
    "OBJECT_OK_PILLAR_MONKPILLAR_RUBBLE_01",
    "OBJECT_OK_RUBBLE_PILLAR_01",
    "OBJECT_OK_BIGSTONE",
    "OBJECT_OK_BRONZE_HORSE_01",
    "OBJECT_OK_GARGOYLE_FEMALE_01",
    "OBJECT_OK_GARGOYLE_FEMALE_02",
    "OBJECT_OK_GARGOYLE_FEMALE_03",
    "OBJECT_OK_GARGOYLE_FEMALE_04",
    "OBJECT_OK_GARGOYLE_FEMALE_05",
    "OBJECT_OK_GARGOYLE_DEMON_01",
    "OBJECT_ONE_WAY_DOOR_01",
    "OBJECT_ONE_WAY_DOOR_SURROUND_01",
    "OBJECT_PRISON_HEADCLAMP_TORTURE_TABLE_01",
    "OBJECT_PRISON_STRETCHING_TORTURE_TABLE_01",
    "OBJECT_PRISON_MAIN_ENTRANCE_DOOR_01",
    "OBJECT_PRISON_CELL_DOOR_SECRET_01",
    "OBJECT_PRISON_CELL_DOOR_01",
    "OBJECT_PRISON_CELL_DOOR_BARS_01",
    "OBJECT_PRISON_CELL_STOOL_01",
    "OBJECT_PRISON_CELL_TOILET_01",
    "OBJECT_PRISON_WARDER_OFFICE_BOOKSHELF_01",
    "OBJECT_PRISON_WARDER_OFFICE_GRANDFATHER_CLOCK_01",
    "OBJECT_PRISON_WARDER_OFFICE_CANDLESTICK_WALLBRACKET_01",
    "OBJECT_PRISON_WARDER_OFFICE_CHAIR_01",
    "OBJECT_PRISON_WARDER_OFFICE_DESK_01",
    "OBJECT_PRISON_BRAZIER_01",
    "OBJECT_PRISON_BRAZIER_INTERNAL_01",
    "OBJECT_PRISON_IRON_MAIDEN_01",
    "OBJECT_PRISON_KEYRACK_01",
    "OBJECT_PRISON_PIER_01",
    "OBJECT_PRISON_WEAPON_RACK_01",
    "OBJECT_PRISON_CORPSE_SHACKLED_01",
    "OBJECT_PRISON_TORTURE_SHACKLES_01",
    "OBJECT_PRISON_TORTURE_TABLE_WITH_TOOLS_01",
    "OBJECT_PRISON_LEVER_01",
    "OBJECT_PRISON_BED_01",
    "OBJECT_PRISON_BED_GUARDS_01",
    "OBJECT_PRISON_BENCH_01",
    "OBJECT_PRISON_BUCKET_01",
    "OBJECT_PRISON_SHIP_01",
    "OBJECT_PRISON_SHIP_02",
    "OBJECT_PASSAGE_DOOR_01",
    "OBJECT_PASSAGE_GY_ROCK_01",
    "OBJECT_PASSAGE_GY_ROCK_02",
    "OBJECT_PASSAGE_GY_ROCK_03",
    "OBJECT_PASSAGE_GY_ROCK_04",
    "OBJECT_PASSAGE_GY_ROCK_SMALL_01",
    "OBJECT_PASSAGE_GY_ROCK_SMALL_02",
    "OBJECT_PASSAGE_GY_ROCK_SMALL_03",
    "OBJECT_PASSAGE_PRISON_ROCK_01",
    "OBJECT_PASSAGE_PRISON_ROCK_02",
    "OBJECT_PASSAGE_PRISON_ROCK_03",
    "OBJECT_PASSAGE_PRISON_ROCK_SMALL_01",
    "OBJECT_PASSAGE_PRISON_ROCK_SMALL_02",
    "OBJECT_PASSAGE_PRISON_ROCK_SMALL_03",
    "OBJECT_KRAKEN_CHAMBER_GATES_01",
    "OBJECT_PRISON_CELL_KEY",
    "OBJECT_LADY_GREY_STOLEN_NECKLACE",
    "OBJECT_GHOST_GRANNY_NECKLACE",
    "OBJECT_BANDIT_CAMP_HOSTAGE_KEY",
    "OBJECT_RESIDENTIAL_BANDIT_CAMP_PASS",
    "OBJECT_STOLEN_PIE",
    "OBJECT_EASY_PICKINGS_ITEM",
    "OBJECT_HERO_EQUIPMENT_BAG",
    "OBJECT_GUARDS_UNIFORM_COMPLETE",
    "OBJECT_HAUNTED_HOUSE_HORSE_HEAD",
    "OBJECT_HAUNTED_HOUSE_MUSIC_BOX_FIGURINE",
    "OBJECT_HAUNTED_HOUSE_DOLL",
    "OBJECT_HAUNTED_HOUSE_SHOE_STAR",
    "OBJECT_HAUNTED_HOUSE_STAR",
    "OBJECT_CARD_ARENA_NOMINATION",
    "OBJECT_WHITE_BALVERINE_PELT",
    "OBJECT_RANSOM_NOTE",
    "OBJECT_LETTER_SISTER",
    "OBJECT_DEEDS_BORDELLO",
    "OBJECT_MOTHERS_NOTE",
    "OBJECT_ASSASSINS_DIPLOMA",
    "OBJECT_PIECE_OF_LITTER",
    "OBJECT_GRAVE_MAP",
    "OBJECT_OLD_KINGDOM_KEY",
    "OBJECT_HEXAGON_DOOR_KEY",
    "OBJECT_CRATE_SMALL_EXPLOSIVE_01",
    "OBJECT_CRATE_SMALL_EXPLOSIVE_01_USABLE",
    "OBJECT_ROSE_BLACK_01",
    "OBJECT_TEDDY_BEAR_UNGIVEABLE",
    "OBJECT_TEDDY_BEAR_01",
    "OBJECT_RAG_DOLL_01",
    "OBJECT_CS_INTERACTIVE_BOULDER",
    "OBJECT_MUSHROOM_POTION_01",
    "OBJECT_MUSHROOM_BLUE_01",
    "OBJECT_SCRIPT_FISH_01",
    "OBJECT_SNOWSPIRE_ORACLE",
    "OBJECT_SNOWSPIRE_ORACLE_TOWER_01",
    "OBJECT_SS_ORACLE_SYMBOL_BLUE_01",
    "OBJECT_SS_ORACLE_SYMBOL_GREEN_01",
    "OBJECT_SS_ORACLE_SYMBOL_RED_01",
    "OBJECT_SS_ORACLE_SYMBOL_YELLOW_01",
    "OBJECT_SNOWSPIRE_BUILDING_DOOR_01",
    "OBJECT_SNOWSPIRE_MARKET_STALL_CLOSED_01",
    "OBJECT_SNOWSPIRE_STREETLAMP_LIT_01",
    "OBJECT_SNOWSPIRE_STREETLAMP_UNLIT_01",
    "OBJECT_SS_SCULPTURE_01",
    "OBJECT_SS_SCULPTURE_02",
    "OBJECT_SS_SCULPTURE_03",
    "OBJECT_SS_SCULPTURE_04",
    "OBJECT_SS_BENCH_01",
    "OBJECT_SS_BARREL_BREAKABLE_01",
    "OBJECT_SS_BARREL_UNBREAKABLE_01",
    "OBJECT_SS_LOG_PILE_01",
    "OBJECT_SS_LOG_PILE_02",
    "OBJECT_SS_LOG_PILE_03",
    "OBJECT_SS_CUPBOARD_MEDIUM_01",
    "OBJECT_SS_CUPBOARD_TALL_01",
    "OBJECT_SS_CUPBOARD_TALL_SPLIT_01",
    "OBJECT_SS_BOOKCASE_01",
    "OBJECT_SS_BOOKCASE_02",
    "OBJECT_SS_ARMOURY_FORGE_01",
    "OBJECT_SS_TABLE_ROUND_STOOLS_01",
    "OBJECT_SS_BAR_01",
    "OBJECT_SS_TAVERN_KEGS_01",
    "OBJECT_SS_TAVERN_STOOL_01",
    "OBJECT_SS_CHARITY_TABLE_SINGLE_01",
    "OBJECT_SS_CHARITY_TABLE_DOUBLE_01",
    "OBJECT_SS_CHARITY_TABLE_01_02_03",
    "OBJECT_SS_CHARITY_TABLE_04",
    "OBJECT_SS_CHARITY_TABLE_05_06",
    "OBJECT_SS_CHARITY_TABLE_07_08_09",
    "OBJECT_SS_CHARITY_TABLE_10",
    "OBJECT_SS_CHEST_01",
    "OBJECT_SS_CHEST_02",
    "OBJECT_SS_TABLE_01",
    "OBJECT_SS_TABLE_ROUND_01",
    "OBJECT_SS_CHAIR_01",
    "OBJECT_SS_GATEHOUSE_MAIN_DOORS_01",
    "OBJECT_SS_GATEHOUSE_MAIN_DOORS_FRAME_01",
    "OBJECT_SS_BED_01",
    "OBJECT_SS_BED_02",
    "OBJECT_SS_BED_03",
    "OBJECT_SS_SHOP_SIGN_ARMOURY",
    "OBJECT_SS_SHOP_SIGN_CHARITY",
    "OBJECT_SS_SHOP_SIGN_TAILORS",
    "OBJECT_SS_SHOP_SIGN_TAVERN",
    "OBJECT_SS_EXPRESSION_TABLET_Y",
    "OBJECT_SS_EXPRESSION_TABLET_M",
    "OBJECT_SS_EXPRESSION_TABLET_C",
    "OBJECT_SS_EXPRESSION_TABLET_A",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_1",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_2",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_3",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_4",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_5",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_6",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_7",
    "OBJECT_SS_EXPRESSION_TABLET_CURSED_8",
    "OBJECT_BUILDING_WINDOW_SNOWSPIRE_01",
    "OBJECT_BUILDING_WINDOW_SNOWSPIRE_02",
    "OBJECT_BUILDING_WINDOW_SNOWSPIRE_BROKEN_01",
    "OBJECT_BUILDING_WINDOW_SNOWSPIRE_BROKEN_02",
    "OBJECT_BUILDING_DOORFRAME_SNOWSPIRE_01",
    "OBJECT_SS_SHOP_CHARITY_DOOR_01",
    "OBJECT_ORACLE_RUBBLE_01",
    "OBJECT_ORACLE_RUBBLE_02",
    "OBJECT_ORACLE_RUBBLE_PILLAR_01",
    "OBJECT_ORACLE_RUBBLE_TOWER_01",
    "OBJECT_SNOWSPIRE_NECROPOLIS_VISTA",
    "OBJECT_EVILDOOR_01",
    "OBJECT_EVILDOOR_02",
    "OBJECT_EVILDOOR_03",
    "OBJECT_EVILDOOR_04",
    "OBJECT_EVILDOOR_05",
    "OBJECT_SW_SILVER_BIRCH_01",
    "OBJECT_SW_SILVER_BIRCH_02",
    "OBJECT_SW_SILVER_BIRCH_03",
    "OBJECT_SW_SILVER_BIRCH_SAPLING_01",
    "OBJECT_SW_SILVER_BIRCH_MULTISAPLING_01",
    "OBJECT_SW_SILVER_BIRCH_MULTISAPLING_02",
    "OBJECT_TG_CIRCLE_CHALK_01",
    "OBJECT_TG_GLASS_01",
    "OBJECT_TG_COIN_GOLD_01",
    "OBJECT_TG_JUG_01",
    "OBJECT_TG_TANKARD_01",
    "OBJECT_TG_POINTER_01",
    "OBJECT_TG_TABLE_FELT_01",
    "OBJECT_TG_TABLE_WOOD_01",
    "OBJECT_SPOT_THE_ADDITION_BASE",
    "OBJECT_TG_OBJECTS_LID_01",
    "OBJECT_TG_OBJECTS_APPLE_01",
    "OBJECT_TG_OBJECTS_BALVERINE_01",
    "OBJECT_TG_OBJECTS_BOOT_01",
    "OBJECT_TG_OBJECTS_DAGGER_01",
    "OBJECT_TG_OBJECTS_DIARY_01",
    "OBJECT_TG_OBJECTS_FISH_01",
    "OBJECT_TG_OBJECTS_GRAVE_01",
    "OBJECT_TG_OBJECTS_HOBBE_01",
    "OBJECT_TG_OBJECTS_POTION_01",
    "OBJECT_TG_OBJECTS_SKULLS_01",
    "OBJECT_TG_OBJECTS_TANKARD_01",
    "OBJECT_TG_OBJECTS_TOADSTOOLS_01",
    "OBJECT_TG_OBJECTS_TREE_01",
    "OBJECT_TG_OBJECTS_WASP_01",
    "OBJECT_TG_SILVERCOIN_01",
    "OBJECT_BS_SLUM_PLAYING_CARD_FACE_DOWN_01",
    "OBJECT_BS_SLUM_PLAYING_CARD_PACK_01",
    "OBJECT_BS_SLUM_PLAYING_CARD",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_01_ACE",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_02",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_03",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_04",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_05",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_06",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_07",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_08",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_09",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_10",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_11_JACK",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_12_QUEEN",
    "OBJECT_BS_SLUM_PLAYING_CARD_CLUBS_13_KING",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_01_ACE",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_02",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_03",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_04",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_05",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_06",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_07",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_08",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_09",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_10",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_11_JACK",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_12_QUEEN",
    "OBJECT_BS_SLUM_PLAYING_CARD_DIAMONDS_13_KING",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_01_ACE",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_02",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_03",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_04",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_05",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_06",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_07",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_08",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_09",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_10",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_11_JACK",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_12_QUEEN",
    "OBJECT_BS_SLUM_PLAYING_CARD_HEARTS_13_KING",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_01_ACE",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_02",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_03",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_04",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_05",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_06",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_07",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_08",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_09",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_10",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_11_JACK",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_12_QUEEN",
    "OBJECT_BS_SLUM_PLAYING_CARD_SPADES_13_KING",
    "OBJECT_TRADER_CAULDRON_LIT",
    "OBJECT_TRADER_MARKETSTALL_01",
    "OBJECT_TRADER_MARKETSTALL_02",
    "OBJECT_TRADER_MARKETSTALL_03",
    "OBJECT_TRADER_MARKETSTALL_05",
    "OBJECT_TRADER_MARKETSTALL_06",
    "OBJECT_TRADER_BANNER_01",
    "OBJECT_TRADER_BANNER_02",
    "OBJECT_TRADER_BANNER_03",
    "OBJECT_TRADER_BANNER_04",
    "OBJECT_TRADER_TABLE_STOOLS_TWO",
    "OBJECT_TRADER_TABLE_STOOLS_THREE",
    "OBJECT_TRADER_TABLE_STOOLS_FOUR",
    "OBJECT_TRADER_BENCH_01",
    "OBJECT_SHOP_SIGN_ARMOURY",
    "OBJECT_SHOP_SIGN_BARBERS",
    "OBJECT_SHOP_SIGN_GENERALSTORE",
    "OBJECT_SHOP_SIGN_TAILORS",
    "OBJECT_SHOP_SIGN_TAVERN",
    "OBJECT_BARBERS_MIRROR",
    "OBJECT_STATUE_HERO_FATHER",
    "OBJECT_WOODEN_LAMP_ON",
    "OBJECT_WOODEN_LAMP_OFF",
    "OBJECT_HAYBALE",
    "OBJECT_HAYBALE_ON_FIRE",
    "OBJECT_TOWNBENCH_01",
    "OBJECT_TOWNBENCH_BROKEN_01",
    "OBJECT_WELL_OAKVALE",
    "OBJECT_ROWINGBOAT_OAKVALE",
    "OBJECT_ROWINGBOAT_OAKVALE_WRECKED",
    "OBJECT_CRATE_SMASHED_01",
    "OBJECT_CRATE_LARGE_SMASHED_01",
    "OBJECT_CRATE_LARGE_01",
    "OBJECT_CRATE_LARGE_OPEN_01",
    "OBJECT_CRATE_OPEN_01",
    "OBJECT_CRATE_DONATION_01",
    "OBJECT_CRATE_01",
    "OBJECT_CHEST_PATTERNED",
    "OBJECT_CHEST_PLAIN",
    "OBJECT_WINEBARREL",
    "OBJECT_BOXCRATE",
    "OBJECT_BOXCRATE_METAL",
    "OBJECT_PLAINSACK",
    "OBJECT_GRAIN_SPILT",
    "OBJECT_SUNDIAL_01",
    "OBJECT_WATCHPOST_01",
    "OBJECT_STATUE_KNIGHT_01",
    "OBJECT_MAIN_STEPS_NO_ARCH",
    "OBJECT_LARGE_ARCH",
    "OBJECT_MAIN_STEPS_SMALL",
    "OBJECT_MAIN_STEPS_SMALL_DOUBLE",
    "OBJECT_STEPS_FEATURE",
    "OBJECT_POSH_BRIDGE",
    "OBJECT_MAIN_ARCH",
    "OBJECT_HOPSCOTCH_BOARD",
    "OBJECT_BUILDING_WINDOW_1",
    "OBJECT_BUILDING_WINDOW_1_HALFBROKEN",
    "OBJECT_BUILDING_WINDOW_1_FULLBROKEN",
    "OBJECT_BUILDING_WINDOW_2",
    "OBJECT_BUILDING_WINDOW_2_HALFBROKEN",
    "OBJECT_BUILDING_WINDOW_2_FULLBROKEN",
    "OBJECT_BUILDING_CLOCKBIGHAND_1",
    "OBJECT_BUILDING_CLOCKSMALLHAND_1",
    "OBJECT_BUILDING_WEATHERVANE_SPINNER_1",
    "OBJECT_BUILDING_WEATHERVANE_STATIC_1",
    "OBJECT_BUILDING_DOOR_3",
    "OBJECT_OPEN_DOORWAY",
    "OBJECT_WINDOW_CURTAIN",
    "OBJECT_POT_02",
    "OBJECT_CRATE_PILE",
    "OBJECT_BLOCKING_DOOR",
    "OBJECT_BLOCKING_DOUBLE_DOOR",
    "OBJECT_LOCKABLE_DOOR",
    "OBJECT_CRATE_MOVEABLE",
    "OBJECT_KNOTHOLE_LOG_MOVEABLE",
    "OBJECT_TAVERN_TABLE_2_STOOLS",
    "OBJECT_TAVERN_TABLE_3_STOOLS",
    "OBJECT_TAVERN_TABLE_4_STOOLS",
    "OBJECT_HOME_TABLE_2_STOOLS",
    "OBJECT_HOME_TABLE_3_STOOLS",
    "OBJECT_HOME_TABLE_4_STOOLS",
    "OBJECT_TAVERN_GAME_TABLE",
    "OBJECT_TAVERN_TABLE_SHOVE_HA_PENNY",
    "OBJECT_COIN_GOLF_OBSTACLE_SMALL",
    "OBJECT_COIN_GOLF_OBSTACLE_MEDIUM",
    "OBJECT_COIN_GOLF_OBSTACLE_LARGE",
    "OBJECT_COIN_GOLF_TANKARD_COLLISION",
    "OBJECT_TAVERN_TABLE_COIN_GOLF",
    "OBJECT_TAVERN_TABLE_COIN_GOLF_SNOWSPIRE",
    "OBJECT_GAME_POINTER_01",
    "OBJECT_TAVERN_CARD_GAME_TABLE",
    "OBJECT_TAVERN_TABLE_CARD_PAIRS",
    "OBJECT_TAVERN_TABLE_CARD_SORTING",
    "OBJECT_TAVERN_TABLE_CARD_BLACKJACK",
    "OBJECT_TAVERN_TABLE_CARD_BLACKJACK_DARKWOOD",
    "OBJECT_VILLAGE_TAVERN_TANKARD",
    "OBJECT_VILLAGE_TAVERN_JUG",
    "OBJECT_VILLAGE_TAVERN_BAR",
    "OBJECT_VILLAGE_TAVERN_APPLE",
    "OBJECT_WINE_SKIN_01",
    "OBJECT_SAW_01",
    "OBJECT_PIE_APPLE_QUARTER_01",
    "OBJECT_PIE_BLUEBERRY_QUARTER_01",
    "OBJECT_PIE_REDCURRANT_QUARTER_01",
    "OBJECT_BOTTLE_01",
    "OBJECT_BOTTLE_02",
    "OBJECT_BOTTLE_BANDIT_01",
    "OBJECT_CLEANING_CLOTH_01",
    "OBJECT_STEWPOT_01",
    "OBJECT_SPOON_01",
    "OBJECT_SOUPBOWL_01",
    "OBJECT_VASE_01",
    "OBJECT_VASE_02",
    "OBJECT_VASE_03",
    "OBJECT_SPOON",
    "OBJECT_WITCH_SPOON",
    "OBJECT_SIGNPOST2",
    "OBJECT_POT_01",
    "OBJECT_POT_03",
    "OBJECT_POT_04",
    "OBJECT_PLATE",
    "OBJECT_KETTLE",
    "OBJECT_JAR",
    "OBJECT_CANDLES",
    "OBJECT_WELL",
    "OBJECT_WELL_STONE_CIRCLE",
    "OBJECT_WAGON",
    "OBJECT_SHOP_SIGN_CIRCULAR",
    "OBJECT_SHOP_SIGN_SPHERICAL",
    "OBJECT_SHOP_SIGN_SQUARE",
    "OBJECT_PLINTH_01",
    "OBJECT_FLOURSACK",
    "OBJECT_GRAINSACK",
    "OBJECT_FULLBASKET",
    "OBJECT_FULLBUCKET",
    "OBJECT_EXPLODING_BARREL",
    "OBJECT_BARREL1",
    "OBJECT_BUILDING_WINDOW_3",
    "OBJECT_BUILDING_WINDOW_4",
    "OBJECT_GAME_MODEL",
    "OBJECT_GAME_MODEL_BEAR",
    "OBJECT_GAME_MODEL_BEAR_CUB",
    "OBJECT_GAME_MODEL_DOG_01",
    "OBJECT_GAME_MODEL_DUCK",
    "OBJECT_GAME_WAREHOUSE",
    "OBJECT_GAME_TOWNHOUSE",
    "OBJECT_GAME_TOTEM",
    "OBJECT_GAME_SHIP",
    "OBJECT_GAME_WINDMILL",
    "OBJECT_GAME_COVER",
    "OBJECT_TAVERN_TABLE_SPOT_THE_ADDITION",
    "OBJECT_IRON_LONGSWORD",
    "OBJECT_IRON_KATANA",
    "OBJECT_IRON_CUTLASS",
    "OBJECT_IRON_AXE",
    "OBJECT_IRON_MACE",
    "OBJECT_IRON_HAMMER",
    "OBJECT_IRON_WARHAMMER",
    "OBJECT_IRON_BATTLEAXE",
    "OBJECT_IRON_BROADSWORD",
    "OBJECT_IRON_BATTLEMACE",
    "OBJECT_STEEL_LONGSWORD",
    "OBJECT_STEEL_KATANA",
    "OBJECT_STEEL_CUTLASS",
    "OBJECT_STEEL_AXE",
    "OBJECT_STEEL_MACE",
    "OBJECT_STEEL_HAMMER",
    "OBJECT_STEEL_WARHAMMER",
    "OBJECT_STEEL_BATTLEAXE",
    "OBJECT_STEEL_BROADSWORD",
    "OBJECT_STEEL_BATTLEMACE",
    "OBJECT_EBONY_LONGSWORD",
    "OBJECT_EBONY_KATANA",
    "OBJECT_EBONY_CUTLASS",
    "OBJECT_EBONY_AXE",
    "OBJECT_EBONY_MACE",
    "OBJECT_EBONY_HAMMER",
    "OBJECT_EBONY_WARHAMMER",
    "OBJECT_EBONY_BATTLEAXE",
    "OBJECT_EBONY_BROADSWORD",
    "OBJECT_EBONY_BATTLEMACE",
    "OBJECT_CRYSTAL_LONGSWORD",
    "OBJECT_CRYSTAL_KATANA",
    "OBJECT_CRYSTAL_CUTLASS",
    "OBJECT_CRYSTAL_AXE",
    "OBJECT_CRYSTAL_MACE",
    "OBJECT_CRYSTAL_HAMMER",
    "OBJECT_CRYSTAL_WARHAMMER",
    "OBJECT_CRYSTAL_BATTLEAXE",
    "OBJECT_CRYSTAL_BROADSWORD",
    "OBJECT_CRYSTAL_BATTLEMACE",
    "OBJECT_LEGENDARY_LONGSWORD",
    "OBJECT_LEGENDARY_LONGSWORD_02",
    "OBJECT_LEGENDARY_KATANA",
    "OBJECT_LEGENDARY_CUTLASS",
    "OBJECT_LEGENDARY_AXE",
    "OBJECT_LEGENDARY_MACE",
    "OBJECT_LEGENDARY_HAMMER",
    "OBJECT_LEGENDARY_WARHAMMER",
    "OBJECT_LEGENDARY_BATTLEAXE",
    "OBJECT_LEGENDARY_BROADSWORD",
    "OBJECT_LEGENDARY_BROADSWORD_02",
    "OBJECT_LEGENDARY_BATTLEMACE",
    "OBJECT_SWORD_OF_AEONS",
    "OBJECT_SWORD_OF_AEONS_FOR_JACK",
    "OBJECT_SWORD_OF_AEONS_GOOD_01",
    "OBJECT_YEW_LONGBOW",
    "OBJECT_YEW_CROSSBOW",
    "OBJECT_YEW_PUMPCROSSBOW",
    "OBJECT_OAK_LONGBOW",
    "OBJECT_OAK_CROSSBOW",
    "OBJECT_OAK_PUMPCROSSBOW",
    "OBJECT_EBONY_LONGBOW",
    "OBJECT_EBONY_CROSSBOW",
    "OBJECT_EBONY_PUMPCROSSBOW",
    "OBJECT_CRYSTAL_LONGBOW",
    "OBJECT_CRYSTAL_CROSSBOW",
    "OBJECT_CRYSTAL_PUMPCROSSBOW",
    "OBJECT_LEGENDARY_LONGBOW",
    "OBJECT_LEGENDARY_CROSSBOW",
    "OBJECT_LEGENDARY_PUMPCROSSBOW",
    "OBJECT_HAUNTED_HOUSE_AUGMENTED_BOW",
    "OBJECT_HERO_STICK",
    "OBJECT_BANDIT_SWORD_SMALL",
    "OBJECT_HERO_SWORD_FIRST",
    "OBJECT_WARRIOR_SWORD",
    "OBJECT_BANDIT_WEAPON_01",
    "OBJECT_BANDIT_WEAPON_02",
    "OBJECT_BANDIT_SWORD_LONG",
    "OBJECT_BANDIT_SWORD_LIEUTENANT_01",
    "OBJECT_BANDIT_SWORD_LIEUTENANT_02",
    "OBJECT_BANDITKING_SWORD_01",
    "OBJECT_BANDITKING_SWORD_02",
    "OBJECT_BANDITKING_HAMMER_01",
    "OBJECT_BANDITKING_HAMMER_02",
    "OBJECT_AXE_VILLAGER_01",
    "OBJECT_AXE_VILLAGER_02",
    "OBJECT_CLUB_GUARD_03",
    "OBJECT_UNDEAD_AXE_01",
    "OBJECT_UNDEAD_SWORD_01",
    "OBJECT_UNDEAD_AXE_LIEUTENANT_01",
    "OBJECT_UNDEAD_AXE_LIEUTENANT_PROP_01",
    "OBJECT_UNDEAD_SWORD_LIEUTENANT_01",
    "OBJECT_UNDEAD_SWORD_GENERAL_01",
    "OBJECT_UNDEAD_SWORD_ICE_HORDE_01",
    "OBJECT_ICE_HORDE_WEAPON_PROP_01",
    "OBJECT_NOSTRO_SWORD_01",
    "OBJECT_NOSTRO_SHIELD_01",
    "OBJECT_NEW_GUARD_WEAPON_01",
    "OBJECT_NEW_GUARD_WEAPON_WEAKER_01",
    "OBJECT_HOBBE_WEAPON_AXE",
    "OBJECT_HOBBE_WEAPON_AXE_BASIC",
    "OBJECT_HOBBE_WEAPON_HAMMER",
    "OBJECT_HOBBE_WEAPON_HAMMER_BASIC",
    "OBJECT_HOBBE_WEAPON_SPIKE",
    "OBJECT_HOBBE_WEAPON_SPIKE_BASIC",
    "OBJECT_HOBBE_WEAPON_STAFF",
    "OBJECT_HOBBE_WEAPON_STAFF_BASIC",
    "OBJECT_HOBBE_WEAPON_STAFF_RANGED",
    "OBJECT_HOBBE_WEAPON_STAFF_RANGED_BASIC",
    "OBJECT_RIVAL_HERO_SCYTHE_WEAPON",
    "OBJECT_RIVAL_HERO_WHISPER_STAFF",
    "OBJECT_RIVAL_HERO_MAZE_STAFF_01",
    "OBJECT_RIVAL_HERO_THUNDER_SWORD",
    "OBJECT_RIVAL_HERO_THUNDER_SWORD_V2",
    "OBJECT_RIVAL_HERO_THUNDER_SHIELD",
    "OBJECT_BRIAR_ROSE_SWORD",
    "OBJECT_BRIAR_ROSE_IMPOSTER_SWORD",
    "OBJECT_LUTE",
    "OBJECT_FRYING_PAN",
    "OBJECT_FAKE_FRYING_PAN",
    "OBJECT_SHOVEL",
    "OBJECT_BANDIT_CROSSBOW",
    "OBJECT_BANDIT_CROSSBOW_POWERFUL",
    "OBJECT_MINION_BOW",
    "OBJECT_NEW_GUARD_CROSSBOW",
    "OBJECT_NEW_GUARD_CROSSBOW_POWERFUL",
    "OBJECT_CROSSBOW_PUMPACTION",
    "OBJECT_THROWING_POTION",
    "OBJECT_THROWING_ORB_BOMB_SHOT",
    "OBJECT_THROWING_ORB_LIGHTNING_SHOT",
    "OBJECT_THROWING_ORB_ENFLAME_SHOT",
    "OBJECT_THROWING_POTION_DUMMY_01",
    "OBJECT_QUIVER",
    "OBJECT_BOW_01",
    "OBJECT_BOW_NOVICE_01",
    "OBJECT_BOW_EXP_01",
    "OBJECT_CROSSBOW_BOLT",
    "OBJECT_ARROW_SINGLE",
    "OBJECT_DRAIN_LIFE_ORB",
    "OBJECT_FIREBALL",
    "OBJECT_JACK_SHOT_OBJECT",
    "OBJECT_JACK_FIREBALL",
    "OBJECT_BANDIT_FIRE_CROSSBOW",
    "OBJECT_HERO_BOW",
    "OBJECT_FIRE_CROSSBOW",
    "OBJECT_WARRIOR_SWORD_LITE",
    "OBJECT_SWORD_OF_STRENGTH",
    "OBJECT_BANDIT_SWORD_MED",
    "OBJECT_SWORD_LONG",
    "OBJECT_SWORD_MED",
    "OBJECT_HERO_SWORD_MED",
    "OBJECT_MINION_WEAPON",
    "OBJECT_MINION_WEAPON_DREADWINGS",
    "OBJECT_MINION_WEAPON_DREADWINGS_RANGED",
    "OBJECT_SUMMONER_SWORD_01",
    "OBJECT_HAMMER_SMITH",
    "OBJECT_TRADER_CAULDRON_UNLIT",
    "OBJECT_WW_TOTEM_HARE_LEFT",
    "OBJECT_WW_TOTEM_HARE_RIGHT",
    "OBJECT_WW_TOTEM_OWL_LEFT",
    "OBJECT_WW_TOTEM_OWL_RIGHT",
    "OBJECT_WW_TOTEM_SNAKE_LEFT",
    "OBJECT_WW_TOTEM_SNAKE_RIGHT",
};


const char* szParticleList[] =
{
    "FOOTSLIDE_GRASS_OLD_OLD",
    "SWORD_SWORD_BLOCK_HARD",
    "SWORDHITTING_STONE",
    "SWORD_WOOD_BLOCK",
    "BLOOD_DRIPPING",
    "SWORD_SWORD_BLOCK_MEDIUM",
    "SWORD_SWORD_BLOCK_SOFT",
    "FOOTSTEP_DUST",
    "FOOTSTEP_GRASS",
    "CHIMNEY_SMOKE_01",
    "BREAKING_WINDOW_01",
    "BLOOD_SLASH",
    "FOOTSLIDE_PATH",
    "TORCHFIRE_01",
    "BLOOD_SPRAY",
    "SWORD_SWORD_BLOCK_HARD_02",
    "SPIN_360",
    "GROUND_360_TEST",
    "SWIRL_TEST",
    "FOOTSLIDE_GRASS_OLD",
    "HIGHLIGHT_KEY",
    "BLOOD_TEST_01",
    "LUNGE_TEST_SWORD_01",
    "LUNGE_TEST_SWORD_02",
    "MAGIC_TEST_01",
    "SPIN360_TEST_SWORD_01",
    "SPIN360_TEST_GROUND_01",
    "UPSWING_TEST_SWORD_01",
    "UPSWING_TEST_GROUND_01",
    "LUNGE_TEST_GROUND_01",
    "FALL_DUST",
    "SWORDHITTING_STRAW",
    "CROSSBOW_FIRE",
    "FOOTSLIDE_GRASS",
    "WIFEHAPPY",
    "WIFEOK",
    "WIFESAD",
    "WIFEANGRY",
    "WIFEREALLYANGRY",
    "WIFEHAPPYBOOST",
    "WIFEANGRYBOOST",
    "WIFEOKBOOST",
    "WIFEREALLYANGRYBOOST",
    "WIFESADBOOST",
    "WIFEDATEHOTTER",
    "WIFEDATECOLDER",
    "BLOOD_SPRAY_YELLOW_SMALL",
    "BLOOD_SPRAY_YELLOW_MEDIUM",
    "HEROVOMIT",
    "FOOTSLIDE_MUD",
    "BLOOD_SPRAY_YELLOW_LARGE",
    "BLOOD_SPRAY_UP",
    "FOOTSTEP_MUD",
    "SWORDHITTING_METAL",
    "SWORDHITTING_WOOD",
    "CAMPFIRE_LIT_01",
    "SWORDHITTING_STONE_BERZERK",
    "SWORDHITTING_STRAW_BERZERK",
    "SWORDHITTING_WOOD_BERZERK",
    "SWORDHITTING_METAL_BERZERK",
    "BLOOD_SPRAY_YELLOW_LARGE_BERZERK",
    "BLOOD_SPRAY_YELLOW_MEDIUM_BERZERK",
    "BLOOD_SPRAY_YELLOW_SMALL_BERZERK",
    "CAMPFIRE_01",
    "HIGHLIGHT_KEY_VANISH",
    "BLACKSMITH_SPARKS",
    "BLOOD_SPRAY_YELLOW_UP2",
    "BLOOD_SPRAY_YELLOW_UP",
    "BLOOD_SPRAY_WASP_STAB",
    "UNARMED_BLOCK",
    "EXP_ORB_1",
    "EXP_ORB_MERGE",
    "EXP_ORB_PICKUP",
    "EXP_ORB_2",
    "EXP_ORB_3",
    "EXP_ORB_4",
    "EXP_ORB_5",
    "EXP_ORB_6",
    "EXP_WHISP_SMALL",
    "EXP_WHISP_OVER_SMALL",
    "EXP_WHISP_MED",
    "EXP_WHISP_OVER_MED",
    "EXP_WHISP_BIG",
    "EXP_WHISP_OVER_BIG",
    "NYMPHLEAFFALL",
    "STANDARD_ARROW_TRAIL",
    "NYMPHSPELLTRAIL",
    "WILLBODYFIRE_DONTUSE",
    "WILLHANDFIRE_DONTUSE",
    "WILLBODYFIREFULL",
    "WILLHANDFIREFULL",
    "WILLBODYFIREHALF",
    "WILLHANDFIREHALF",
    "WILLHANDFIREQUART",
    "WILLBODYFIREQUART",
    "WILLHANDFIRE3QUART",
    "WILLBODYFIRE3QUART",
    "FLIES",
    "BEES",
    "ARROW_FLAME",
    "EMIT",
    "BULLET_ARROW",
    "EXP_WHISP",
    "EXP_WHISP_OVER",
    "MARKTELEPORTER",
    "TELEPORTER2",
    "HERO_TELEPORT_DISSAPEAR",
    "HERO_TELEPORT_APPEAR",
    "HERO_EXPERIENCE_APPEAR",
    "HERO_EXPERIENCE_DISSAPEAR",
    "HERO_TELEPORT_MOVED_INTO",
    "TELEPORTER3",
    "TELEPORTER1",
    "TELEPORTER1SMALL",
    "NEWTELEPORTER2",
    "NEWTELEPORTER",
    "HERO_WILL_SHIELD",
    "HERO_WILL_SHIELD2",
    "TURNCOAT",
    "TURNCOAT_ACTIVE",
    "TURNCOAT_DEACTIVATE",
    "TURNCOAT_TURNED",
    "TURNCOAT_CREATURE_LEVEL1",
    "TURNCOAT_CREATURE_LEVEL2",
    "TURNCOAT_CREATURE_LEVEL3",
    "TURNCOAT_CREATURE_LEVEL4",
    "TURNCOAT2",
    "TURNCOAT_ABSORB",
    "WATERFALL",
    "LARGEWATERFALL",
    "WATERFALLSPLASH",
    "LARGEWATERFALL2",
    "LARGEWATERFALLANGLED",
    "MEDIUMWATERFALLGUSH",
    "LARGEWATERFALLGUSH",
    "LARGEWATERFALLTOPGUSH",
    "CANDLE_FLAME",
    "WISPY_SMOKE_LARGE",
    "WISPY_SMOKE_MEDIUM",
    "WISPY_SMOKE_SMALL",
    "WISPY_SMOKE_PIPE",
    "FALLING_LEAVES_LOCAL_ORANGE_01",
    "FALLING_LEAVES_LOCAL_BROWN_01",
    "FALLING_LEAVES_LOCAL_GREEN_01",
    "SUNBEAMS",
    "BALVERINECLAWS",
    "CLAW_SLASH",
    "BALVERINEEYE",
    "LARGEFIRE",
    "MEDIUMFIRE",
    "SMALLFIRE",
    "ALTAR_GARGOYLE_FLAME",
    "ALTAR_GARGOYLE_FLAME2",
    "FLAMING_SWORD_POWER_UP",
    "FLAMING_SWORD_LEVEL_1",
    "FLAMING_SWORD_LEVEL_2",
    "FLAMING_SWORD_LEVEL_3",
    "FLAMING_SWORD_LEVEL_4",
    "LIGHTNING_SWORD_POWER_UP",
    "LIGHTNING_SWORD_LEVEL_1",
    "LIGHTNING_SWORD_LEVEL_2",
    "LIGHTNING_SWORD_LEVEL_3",
    "LIGHTNING_SWORD_LEVEL_4",
    "LIGHTNING_AUGMENTATION",
    "WILL_LEECH_VICTIM",
    "WILL_LEECH_ABSORB",
    "WILL_LEECH_CAST_EYES",
    "WILL_LEECH_SPARKS",
    "BATTLE_CHARGE_POWERUP_01",
    "BATTLE_CHARGE_START",
    "BATTLE_CHARGE_POWERUP_02",
    "VORTEX",
    "EXPLOSION_HIT",
    "DISPLACEMENT_RIPPLE_LEVEL0",
    "BATTLE_CHARGE_HIT_LEVEL0",
    "BATTLE_CHARGE_HIT_LEVEL1",
    "BATTLE_CHARGE_HIT_LEVEL2",
    "BATTLE_CHARGE_HIT_LEVEL3",
    "DISPLACEMENT_RIPPLE_LEVEL1",
    "DISPLACEMENT_RIPPLE_LEVEL2",
    "DISPLACEMENT_RIPPLE_LEVEL3",
    "AIR_GLOW_PARTICLES",
    "AIR_GLOW_03",
    "AIR_GLOW_04",
    "AIR_GLOW_02",
    "AIR_GLOW_01",
    "LIGHTNING_SMALL",
    "LIGHTNING_BIG",
    "LIGHTNING_HAND_EFFECT",
    "LIGHTNING_BIG2",
    "EMITTER_ARMGLOW",
    "LIGHTNING_DUMMY_EFFECT_BANDIT",
    "LIGHTNING_DUMMY_EFFECT_LARGE",
    "LIGHTNING_DUMMY_EFFECT_MEDIUM",
    "LIGHTNING_DUMMY_EFFECT_SMALL",
    "LIGHTNING_DUMMY_EFFECT_POINT",
    "LIGHTNING_HAND_EFFECT_NO_LIGHT",
    "GUILD_MASTER_HEAL",
    "SCREAMER_DRAIN_LIFE",
    "DAZED01STAR",
    "DAZED02STAR",
    "DAZED03STAR",
    "DAZEDLOSESTAR",
    "FEATHERBROWN",
    "FEATHERBLACK",
    "FEATHERWHITE",
    "FEATHERSPARROW",
    "EARTH_TROLL_ATTACK_01",
    "EARTH_TROLL_DRIP_ARM_01",
    "EARTH_TROLL_DRIP_BELLY_01",
    "EARTH_TROLL_FEET_COVER_01",
    "EARTH_TROLL_BURROW_01",
    "EARTH_TROLL_RISE_01",
    "EARTH_TROLL_GET_HIT_01",
    "EARTH_TROLL_IMPACT_01",
    "EARTH_TROLL_IMPACT_02",
    "EARTH_TROLL_SPECIAL_THUMP_GROUND_01",
    "FALLING_LEAVES_GLOBAL_ORANGE_01",
    "FALLING_LEAVES_GLOBAL_BROWN_01",
    "FALLING_LEAVES_GLOBAL_GREEN_01",
    "HORNET_FEASTING",
    "QUEEN_HEAD_APPEAR",
    "QUEEN_HORNET_HEAD_DRIPPING",
    "SMASH_BARREL_OUTSIDE_01",
    "SMASH_CRATE_01",
    "SMASH_DOOR_01",
    "SMASH_DUMMY_01",
    "SMASH_LOGS_01",
    "SPECIAL_STRENGTH_BERSERK_CAST_01",
    "SPECIAL_STRENGTH_BERSERK_SWORD_HIT_01",
    "SPECIAL_STRENGTH_BERSERK_SWORD_01",
    "SPECIAL_STRENGTH_BERSERK_HERO_01",
    "SPECIAL_STRENGTH_BERSERK_START",
    "SPECIAL_STRENGTH_POWER_UP",
    "SPECIAL_STRENGTH_END",
    "SPECIAL_STRENGTH_MULTI_STRIKE_SWORD_HIT_01",
    "SPECIAL_STRENGTH_MULTI_STRIKE_SWORD_KNOCKOUT_01",
    "SPECIAL_STRENGTH_MULTI_STRIKE_SWORD_01",
    "SPECIAL_STRENGTH_MULTI_STRIKE_TWITCH_01",
    "SPECIAL_STRENGTH_MULTI_STRIKE_SWORD_SHINE_01",
    "PODIUM_ORB_IDLE_02",
    "PODIUM_ORB_EXPLODE_01",
    "ROCK_TROLL_DRIP_ARM_01",
    "ROCK_TROLL_DRIP_BELLY_01",
    "ROCK_TROLL_SCATTER_RISE_01",
    "ROCK_TROLL_SCATTER_RISE_FAST_01",
    "ROCK_TROLL_IMPACT_02",
    "ACTIVATE_WILL_01",
    "ACTIVATE_SKILL_01",
    "ACTIVATE_STRENGTH_01",
    "DEACTIVATE_WILL_01",
    "DEACTIVATE_SKILL_01",
    "DEACTIVATE_STRENGTH_01",
    "FIRE_FLIES",
    "LAMPGLOW",
    "LAMPGLOW_RED",
    "IMPACT_DUST",
    "SLOWTIME_START",
    "SLOWTIME_END",
    "HAIRCUT",
    "BLOOD_DIRECTION_01",
    "BLOOD_DIRECTION_01_BERZERK",
    "BLOOD_DIRECTION_02",
    "BLOOD_DIRECTION_02_BERZERK",
    "BLOOD_DIRECTION_03",
    "BLOOD_DIRECTION_03_BERZERK",
    "FOOTSLIDE_DUST",
    "FOOTSTEP_SAND_MEDIUM_01",
    "FOOTSTEP_SAND_LARGE_01",
    "HERO_BERSERK_EYES",
    "ROCK_TROLL_EYES",
    "ROCK_TROLL_BREATH_01",
    "ROCK_TROLL_DEATH_01",
    "ROCK_TROLL_DIE_01",
    "ROCK_TROLL_DIE_02",
    "ROCK_TROLL_DIE_03",
    "ROCK_TROLL_ROCK_DRIP_01",
    "ROCK_TROLL_ROCK_SMASH_01",
    "ROCK_TROLL_ROCK_SMASH_02",
    "ROCK_TROLL_GET_HIT_01",
    "ROCK_TROLL_GET_HIT_01_BERZERK",
    "JACK_OF_BLADES_LIGHT_SWORD_01",
    "JACK_OF_BLADES_LIGHT_SWORD_BUILD_UP_01",
    "SINGE_MEDIUM_01",
    "JACK_OF_BLADES_ROLLING_THUNDER_01",
    "SINGE_SMALL_01",
    "SINGE_LARGE_01",
    "SHOCK_MEDIUM_01",
    "SHOCK_LARGE_01",
    "SHOCK_SMALL_01",
    "JACK_OF_BLADE_SWORD_EONS_01",
    "JACK_OF_BLADES_POWER_01",
    "JACK_OF_BLADES_SHIELD_01",
    "JACK_OF_BLADES_SHIELD_HIT_01",
    "JACK_OF_BLADES_GET_HIT_01",
    "JACK_OF_BLADES_DYING_01",
    "JACK_OF_BLADES_DIE_01",
    "JACK_OF_BLADE_SWORD_EONS_MAX_01",
    "JACK_OF_BLADE_SWORD_EONS_RAISED_01",
    "JACK_OF_BLADE_SWORD_EONS_MAX_02",
    "JACK_OF_BLADES_MASK_DEATH",
    "JACK_OF_BLADES_MASK_BUILD",
    "JACK_OF_BLADES_MASK_FINAL",
    "JACK_OF_BLADES_MASK_WELD",
    "MAZE_TELEPORT_OUT_01",
    "MAZE_TELEPORT_IN_01",
    "MAZE_WILL_SPELL_01",
    "BALVERINE_LEAP_TRAIL_01",
    "BALVERINE_DROP_TRAIL_01",
    "FIREPLACE_LOGS_01",
    "FIREPLACE_LOGS_02",
    "FIREPLACE_LOGS_SMALL_01",
    "CANDLE_FLAME_ROUND_01",
    "CANDLE_FLAME_TRIO_01",
    "ORIENTATION_TEST",
    "ORIENTATION_TEST2",
    "LATERAL_SLASH_NORMAL",
    "LATERAL_SLASH_KNOCKOUT",
    "LATERAL_SLASH_FLOURISH",
    "LATERAL_SLASH_COUNTER_BLOCK",
    "WILL_FORCE_PUSH_VICTIM",
    "WILL_FORCE_PUSH_IMPACT",
    "WILL_FORCE_PUSH_CAST",
    "ARROW_TRAIL_01",
    "ARROW_TRAIL_FIRE_01",
    "ARROW_TRAIL_MULTI_2",
    "ARROW_TRAIL_MULTI_1",
    "RAIN_CAMERA_MEDIUM_TEST",
    "RAIN_CAMERA_MEDIUM_01",
    "RAIN_WINDOW_MEDIUM_01",
    "ZOMBIE_ALIVE",
    "ASSASSIN_RUSH",
    "HOBBE_BRAZIER",
    "LEVEL_4_DISPLACEMENT_HI",
    "SHIELD_HIT2",
    "SHIELD_CAST",
    "SHIELD_CAST_LEVELUP",
    "SHIELD_CAST_DISPERSE",
    "MENTAL_SHIELD_DISPERSE",
    "PHYSICAL_SHIELD_DISPERSE",
    "SHIELD_HIT",
    "SHIELD_HIT3",
    "LEVEL_4_EFFECT_HI",
    "LEVEL_3_EFFECT_HI",
    "LEVEL_2_EFFECT_HI",
    "LEVEL_1_EFFECT_HI",
    "LEVEL_1_EFFECT_LO",
    "LEVEL_2_EFFECT_LO",
    "LEVEL_3_EFFECT_LO",
    "LEVEL_4_EFFECT_LO",
    "LEVEL_4_DISPLACEMENT_LO",
    "LEVEL_3_DISPLACEMENT_HI",
    "LEVEL_3_DISPLACEMENT_LO",
    "LEVEL_2_DISPLACEMENT_HI",
    "LEVEL_2_DISPLACEMENT_LO",
    "LEVEL_1_DISPLACEMENT_HI",
    "LEVEL_1_DISPLACEMENT_LO",
    "MENTAL_SHIELD_DISPLACEMENT",
    "MENTAL_SHIELD_04",
    "PHYSICAL_SHIELD_2",
    "PHYSICAL_SHIELD_1_HIT",
    "PHYSICAL_SHIELD_1",
    "PHYSICAL_SHIELD_3",
    "PHYSICAL_SHIELD_4",
    "THORNBUSH_CHOP",
    "THORNBUSH_SMASH",
    "DISPLACEMENT_TRAIL",
    "SLOW_TIME_POWER_UP",
    "SLOW_TIME_CAST",
    "SLOW_TIME_BACKUP",
    "SLOW_TIME_POWER_CHARGE",
    "SLOW_TIME_END",
    "SLOW_TIME",
    "BRIAR_ROSE_BATTLE",
    "BIG_SPLASH",
    "SMALL_SPLASH",
    "TINY_SPLASH",
    "WATER_FOOTSTEP_SPLASH",
    "BIG_SPLASH_WIDE2",
    "BIG_SPLASH_WIDE",
    "SMALL_SPLASH_CIRCULAR2",
    "SMALL_SPLASH_CIRCULAR",
    "MAGIC_BINDING",
    "DIGGING",
    "DIGGING_SNOW",
    "SPIDER_SPLAT_01",
    "SPORE_EXPLOSION",
    "SPARKLES_SMALL",
    "SPARKLES_MEDIUM",
    "SPARKLES_LARGE",
    "CHEST_OPEN_01",
    "GRAVEYARD_SPARKLES_GRAVE",
    "GRAVEYARD_SPARKLES_DOOR",
    "SARCOPHAGUS_OPEN_01",
    "ZOMBIE_BOSS2_DEATH2",
    "ZOMBIE_TOKEN",
    "ZOMBIE_TELEPORT_IN",
    "ZOMBIE_RECHARGE",
    "ZOMBIE_SOLDIER_SINK",
    "ZOMBIE_SOLDIER_DEATH_SUBTLE2",
    "ZOMBIE_SOLDIER_DEATH",
    "ZOMBIE_BOSS1_DEATH",
    "ZOMBIE_BOSS1_DEATH2",
    "ZOMBIE_SOLDIER_DEATH_SUBTLE",
    "ZOMBIE_BOSS2_DEATH",
    "ZOMBIE_SOLDIER_DEATH_LOW",
    "ZOMBIE_BOSS1_DEATH_LOW",
    "ZOMBIE_BOSS2_DEATH_LOW",
    "BRIAR_DEATH_01",
    "ICE_HORDE_DEATH",
    "BLUE_MAGIC_SPRAY",
    "GREEN_MAGIC_SPRAY",
    "RED_MAGIC_SPRAY",
    "YELLOW_MAGIC_SPRAY",
    "SUMMONER",
    "SUMMONED",
    "FIREBALL_SPELL_FIREBALL_04",
    "JOB_FIREBALL_HIT_01",
    "FIREBALL_CAST",
    "FIREBALL_EXPLOSION_LEVEL3",
    "FIREBALL_EXPLOSION_LEVEL2",
    "FIREBALL_POWERUP",
    "FIREBALL_EXPLOSION_LEVEL1",
    "FIREBALL_SPELL_FIREBALL_03",
    "FIREBALL_SPELL_FIREBALL_02",
    "FIREBALL_SPELL_FIREBALL_01",
    "JOB_FIREBALL_01",
    "FIREBALL_EXPLOSION_LEVEL4",
    "DRAGON_FIREBALL_01_HOLD",
    "DRAGON_FIREBALL_HIT_0Z",
    "DRAGON_FIREBALL_HIT_01",
    "DRAGON_FIREBALL_HIT_02",
    "COUNTDOWN_FLOURISH_01",
    "COUNTDOWN_FLOURISH_02",
    "COUNTDOWN_FLOURISH_03",
    "COUNTDOWN_FLOURISH_FAIL",
    "COUNTDOWN_FLOURISH_SUCCESS",
    "OPEN_CHEST_EFFECT",
    "ROCK_TROLL_BREATH",
    "BURNING_HANDS_STATIC_LEVEL_2",
    "BURNING_HANDS_DISTORTION",
    "BURNING_HANDS_POWER_UP",
    "BURNING_HANDS_STATIC_LEVEL_3",
    "BURNING_HANDS_STATIC_LEVEL_4",
    "EXPLOSION",
    "BURNING_HANDS_STATIC",
    "ENFLAME_SMALLER",
    "ENFLAME_COLUMN",
    "ENFLAME_RING_RELEASE_LEVEL_4",
    "ENFLAME_SINGED",
    "ENFLAME_RING_RELEASE_LEVEL_3",
    "ENFLAME_RING_RELEASE_LEVEL_2",
    "ENFLAME_RING_RELEASE_LEVEL_1",
    "RAININGFIRETEST",
    "WADE_TEST",
    "FISHING_SPOT_01",
    "FISHING_SPOT_02",
    "BALVERINE_TRANSFORM_2",
    "BALVERINE_TRANSFORM",
    "BALVERINE_TRANSFORM_3",
    "CHAPEL_EVIL_FIRE",
    "CHAPEL_EVIL_PIT",
    "CHAPEL_GOOD_FIRE",
    "CHAPEL_GOOD_PIT",
    "MINION_DEATH_1",
    "MINION_DEATH_2",
    "STANDARDBRAZIERFIREORIGINAL",
    "STANDARDBRAZIERFIRE",
    "STANDARDBRAZIERFIRE2",
    "BANDIT_MAGICAL_DOOR_APPEAR",
    "FOUNTAIN",
    "FOUNTAIN_KRAKEN",
    "FOUNTAIN_POSH_02",
    "FOUNTAIN_POSH_01",
    "ARENA_DUST",
    "BUBBLES_RIPPLES",
    "CHICK_DEATH",
    "PINE_NEEDLE_SHOWER",
    "FOOTSLIDE_GRASS_2",
    "FOOTSLIDE_PINE_NEEDLES",
    "TICKER_TAPE",
    "HEAL_LEVEL4",
    "HEAL_LEVEL4B",
    "HEAL_LEVEL5",
    "HEAL_LEVEL3",
    "HEAL_LEVEL2",
    "HEAL_LEVEL1",
    "DRAIN_LEVEL1B",
    "DRAIN_ABSORB",
    "DRAIN_TRAIL",
    "DRAIN_BLOOD",
    "DRAIN_LEVEL1",
    "DRAIN_ABSORB2",
    "DRAIN_BLOOD2",
    "AUGMENTED_ARROW_FIRE",
    "EXAMPLE_AUGMENTED_ARROW_FIRE",
    "EXAMPLE_AUGMENTED_ARROW_LIGHTNING",
    "AUGMENTED_ARROW_LIGHTNING",
    "AUGMENTED_ARROW_FIRE_HIT",
    "AUGMENTED_ARROW_LIGHTNING_HIT",
    "AUGMENTED_ARROW_FIRE_LIGHTNING",
    "AUGMENTED_ARROW_FIRE_LIGHTNING_HIT",
    "GHOST_FEMALE_01",
    "GHOST_FEMALE_02",
    "MULTIPLAYER_BLUE",
    "MULTIPLAYER_RED",
    "MULTIPLAYER_GREEN",
    "MULTIPLAYER_YELLOW",
    "KING_SCORPION_TRANSFORM",
    "KING_SCORPION_DRIP",
    "DRIP_SPLASH_LIGHT",
    "DRIP_SPLASH_MEDIUM",
    "DRIP_SPLASH_HEAVY",
    "DRIP_LIGHT",
    "DRIP_MEDIUM",
    "DRIP_HEAVY",
    "SCORPION_RISE_DUST_01",
    "SCORPION_BURROW_DUST_01",
    "KING_SCORPION_RISE_01",
    "KING_SCORPION_BURROW_01",
    "KING_SCORPION_SUMMON_01",
    "SCORPION_SUMMONED_01",
    "UNDEAD_RISE_DUST_01",
    "NYMPH_LEAF_BURST_01",
    "DUST_FALLING",
    "KRAKEN_SINK_SPLASH",
    "KRAKEN_RISE_SPLASH",
    "KRAKEN_TENTACLE_GROUND_HIT",
    "CEILING_DUST_FALLING",
    "KRAKEN_HEAD_HIT_SPLAT",
    "ROCK_FALL",
    "KRAKEN_TENTACLE_DESTROYED",
    "KRAKEN_TENTACLE_HIT",
    "KRAKEN_CHAMBER_WATER_01",
    "CEILING_SMOKE_WHITE",
    "CEILING_SMOKE_BLACK",
    "SEA_SPRAY_01",
    "SILVERSTRIKE_EXPANDING_CIRCLE",
    "STEELSTRIKE_EXPANDING_CIRCLE",
    "DIAMONDSTRIKE",
    "SILVER_STRIKE_IDLE",
    "SILVER_STRIKE_HIT",
    "STEEL_STRIKE_HIT",
    "DIAMOND_STRIKE_HIT",
    "SWORD_SLASH_TRAIL_SINGLE",
    "SWORD_SLASH_TRAIL2",
    "SWORD_SLASH_TRAIL_MESH",
    "SWORD_SLASH_TRAIL_MESH3",
    "SWORD_SLASH_TRAIL_01",
    "SWORD_SLASH_TRAIL_02",
    "BERSERK_HIT_01",
    "BERSERK_HIT_02",
    "MULTIPLAYER_SPIRIT_GET_HIT",
    "MULTIPLAYER_SPIRIT_HIT_ENEMY",
    "MULTIPLAYER_SPIRIT_GET_HIT_YELLOW",
    "MULTIPLAYER_SPIRIT_GET_HIT_BLUE",
    "MULTIPLAYER_SPIRIT_GET_HIT_RED",
    "MULTIPLAYER_SPIRIT_GET_HIT_GREEN",
    "MULTIPLAYER_SPIRIT_HIT_ENEMY_GREEN",
    "MULTIPLAYER_SPIRIT_HIT_ENEMY_BLUE",
    "MULTIPLAYER_SPIRIT_HIT_ENEMY_YELLOW",
    "MULTIPLAYER_SPIRIT_HIT_ENEMY_RED",
    "ASSASSIN_RUSH_LOW",
    "FIREY_FOOT_L",
    "FIREY_FOOT_R",
    "BLOOD_SPURT",
    "BLOOD_POOL",
    "MINION_WARDOG_SUMMON_01",
    "BRIAR_TELEPORT_01",
    "MINION_WARDOG_WEAPON_HIT_01",
    "MINION_DREADWING_WEAPON_HIT_01",
    "MINION_WARDOG_BLOOD_01",
    "MINION_DREADWING_BLOOD_01",
    "MINION_DREADWING_BUILD_SPELL_01",
    "MINION_DREADWING_CAST_SPELL_01",
    "MINION_DREADWING_SPELL_TRAVEL_01",
    "MINION_WARDOG_BLOOD_01_BERZERK",
    "MINION_DREADWING_BLOOD_01_BERZERK",
    "MINION_WARDOG_SHATTER_01",
    "MINION_DREADWING_SPELL_HIT_01",
    "MINION_DREADWING_SHATTER_01",
    "MINION_DREADWING_SUMMON_01",
    "QUESTCARD_GOOD_GLOW_NONCORE",
    "QUESTCARD_EVIL_GLOW_NONCORE",
    "QUESTCARD_NEUTRAL_GLOW_NONCORE",
    "QUESTCARD_EVIL_GLOW_CORE",
    "QUESTCARD_GOOD_GLOW_CORE",
    "QUESTCARD_NEUTRAL_GLOW_CORE",
    "GUI_TEST_EFFECT",
    "FORCE_PUSH_CHARGE",
    "FORCE_PUSH_WIND_SNOW",
    "FORCE_PUSH_04",
    "FORCE_PUSH_WIND_SAND",
    "FORCE_PUSH_WIND_ROCK",
    "FORCE_PUSH_WIND_GRASS",
    "FORCE_PUSH_WIND_STRAW",
    "FORCE_PUSH_WIND_WATER",
    "FORCE_PUSH_WIND_MUD",
    "FORCE_PUSH_04_EGG",
    "FORCE_PUSH_03",
    "FORCE_PUSH_02",
    "FORCE_PUSH_01",
    "FORCE_PUSH_03_EGG",
    "FORCE_PUSH_02_EGG",
    "FORCE_PUSH_01_EGG",
    "LIGHTHOUSE_BEAM",
    "DRAGON_FIREBALL_CHARGE",
    "STOP_TIME_START",
    "STOP_TIME_STATIC",
    "STOP_TIME_STOP",
    "GATE_LIGHT_COLUMN",
    "GATE_LIGHT_COLUMN2",
    "SEPTIMAL_KEY_GLOW",
    "SEPTIMAL_KEY_SUMMON",
    "HK_ARTEFACT_GLOW",
    "GUILD_FORCEFIELD_IDLE_ROOF",
    "GUILD_FORCEFIELD_IDLE_WALL",
    "GUILD_FORCEFIELD_TURN_ON",
    "GUILD_FORCEFIELD_TURN_OFF",
    "GUILD_FORCEFIELD_PILLAR_GLOW",
    "FORCE_PUSH_LEVEL_4",
    "FORCE_PUSH_ROCK",
    "FORCE_PUSH_LEVEL_1",
    "FORCE_PUSH_LEVEL_3",
    "FORCE_PUSH_LEVEL_2",
    "FORCE_PUSH_SNOW",
    "FORCE_PUSH_SAND",
    "FORCE_PUSH_SCRUB",
    "FORCE_PUSH_METAL",
    "FORCE_PUSH_EARTH",
    "FORCE_PUSH_MUD",
    "FORCE_PUSH_WATER",
    "FORCE_PUSH_WOOD",
    "FORCE_PUSH_GRASS",
    "FORCE_PUSH_STRAW",
    "HOOK_COAST_WEATHER_RAIN_BLOWN",
    "HOOK_COAST_WEATHER_RAIN_SPLASHES",
    "HOOK_COAST_WEATHER_BLOWING_LEAVES",
    "HOOK_COAST_WEATHER_BLOWING_LEAVES2",
    "HOOK_COAST_WEATHER_RAIN_SPLASHES_02",
    "HOOK_COAST_SNOW_BLOW",
    "HOOK_COAST_SEA_SPRAY_SINGLE",
    "HOOK_COAST_SEA_SPRAY_ANGLED",
    "HOOK_COAST_SEA_SPRAY_DOUBLE",
    "SUMMON_SHIP_WATER",
    "DRAGON_GROUND_SLAM",
    "HK_MAGIC_BARRIER",
    "HK_MAGIC_BARRIER_OFF",
    "HORNET_QUEEN_SPAWN_WIND_02",
    "HORNET_QUEEN_SPAWN_WIND_01",
    "HORNET_QUEEN_GET_HIT_01",
    "HORNET_QUEEN_DRIP_01",
    "HORNET_QUEEN_HEAD_DRIP_01",
    "HORNET_QUEEN_DIE_01",
    "GHOST_SWORD_CAST",
    "GHOST_SWORD_BUILDUP",
    "GHOST_SWORD_ALIVE",
    "GHOST_SWORD_SUMMON_BAK",
    "GHOST_SWORD_DISAPPEAR_BAK",
    "GHOST_SWORD_SUMMON",
    "GHOST_SWORD_DISAPPEAR2",
    "GHOST_SWORD_ALIVE2",
    "GHOST_SWORD_SUMMON2",
    "GHOST_SWORD_DISAPPEAR",
    "WHISPER_LUNGE_01",
    "EXPLOSION_FIRE_LARGE_01",
    "EXPLOSION_DUST_SMALL_01",
    "EXPLOSION_DUST_LARGE_01",
    "EXPLOSION_DUST_LARGE_02",
    "JACK_OF_BLADES_ROLLING_THUNDER_HIT_01",
    "DRAGON_FIRE_HIT_01B",
    "DRAGON_GET_HIT_01",
    "EXPLOSION_FIRE_SMALL_01",
    "EXPLOSION_MUSHROOM_LARGE_01",
    "EXPLOSION_FIRE_SMALL_LOOP_01",
    "EXPLOSION_FIRE_LARGE_LOOP_01",
    "EXPLOSION_MUSHROOM_FUSE_01",
    "EXPLOSION_MUSHROOM_02",
    "EXPLOSION_MUSHROOM_01",
    "DRAGON_FIRE_HIT_02",
    "DRAGON_FIRE_STRAFE_01",
    "DRAGON_FIRE_HIT_01",
    "SUMMON_CREATURE_SUMMON",
    "SUMMON_CREATURE_BUILDUP",
    "SUMMON_CREATURE_DISAPPEAR",
    "SUMMON_CREATURE_ALIVE",
    "SUMMON_CREATURE_LEVEL1",
    "SUMMON_CREATURE_ALIVE_EVIL",
    "SUMMON_CREATURE_BUILDUP_EVIL",
    "SUMMON_CREATURE_DISAPPEAR_EVIL",
    "SUMMON_CREATURE_LEVEL1_EVIL",
    "SUMMON_CREATURE_SUMMON_EVIL",
    "SUMMON_CREATURE_CAST",
    "SUMMON_CREATURE_CAST_EVIL",
    "SUMMON_CREATURE_SUMMONER_EVIL",
    "SUMMON_ARENA",
    "CHARM_LEVEL1",
    "CHARM_CAST",
    "CHARM_BUILDUP",
    "CHARM_LEVEL2",
    "CHARM_LEVEL3",
    "CHARM_LEVEL4",
    "CHARM_BLING",
    "CHARM_REMOVE_LEVEL4",
    "CHARM_REMOVE_LEVEL3",
    "CHARM_REMOVE_LEVEL2",
    "CHARM_REMOVE_LEVEL1",
    "EMBERS_01",
    "DRAGON_FIRE_01B",
    "DRAGON_FIREBALL_BUILDUP_01",
    "DRAGON_FIREBALL_CAST_01",
    "DRAGON_DIE_01",
    "FLAME_LIGHTNING_SWORD_LEVEL_1",
    "DISP_OUTWARD",
    "DISP_RISEUP",
    "EARTH_TROLL_BREAK_THROUGH_01",
    "EARTH_TROLL_DIG_01",
    "EARTH_TROLL_SCATTER_RISE_01",
    "EARTH_TROLL_THUMP_GROUND",
    "EARTH_TROLL_BODY_DRIPS",
    "EARTH_TROLL_IMPACT_HIT",
    "EARTH_TROLL_ROCK_SMASH_01",
    "UNDERWATER_FISH_01_DONTUSE",
    "UNDERWATER_FISH_02_DONTUSE",
    "UNDERWATER_FISH_01",
    "UNDERWATER_FISH_02",
    "LIGHTHOUSEFLAME_01",
    "LOCAL_FOG_01",
    "MULTI_ARROW",
    "MULTI_ARROW_CAST",
    "MULTI_ARROW_CAST_BAK",
    "MULTI_ARROW_HIT",
    "MULTI_STRIKE_CAST",
    "DISCOVERY_SPARKLE",
    "SINGING_STONES_PULSE",
    "SINGING_STONES_REWARD",
    "HERO_GOOD_FOOTPRINT",
    "HERO_GOOD_BUTTERFLIES",
    "HALO_STRONG",
    "HALO_WEAK",
    "BUTTERFLY",
    "BUTTERFLY_BLUE",
    "BUTTERFLY_YELLOW",
    "BUTTERFLY_ORANGE",
    "TRADER_FIRE_SMOKE",
    "BLACKSMITH_FORGE_SMOKE",
    "ORB_FIRE_HIT_01",
    "ORB_FIRE_01",
    "ORB_LIGHTNING_01",
    "ORB_LIGHTNING_HIT_01",
    "POTION_SUPER_WILL_01",
    "POTION_WILL_01",
    "POTION_SUPER_HEALTH_01",
    "POTION_HEALTH_01",
    "POTION_ADRENALINE_01",
    "POTION_RESURRECTION_01",
    "RESURRECTION_PHIAL",
    "POTION_WILL_EXP_01",
    "POTION_AGES_OF_SKILL_01",
    "POTION_AGES_OF_WILL_01",
    "POTION_AGES_OF_MIGHT_01",
    "CAVE_WATER_DRIPS",
    "MADBOMBER_EXPLOSION",
    "MADBOMBER_EXPLOSION_SMALL",
    "MADBOMBER_FUSE_01",
    "TELEPORT_OUT",
    "TELEPORT_IN",
    "TELEPORTER_DISC",
    "BROKEN_GLASS_CLEAR_SINGLE_01",
    "BROKEN_GLASS_CLEAR_DOUBLE_01",
    "AUGMENT_FIRE_SWORD_01",
    "AUGMENT_LIGHTNING_SWORD_01",
    "AUGMENT_FIRE_LIGHTNING_SWORD_01",
    "AUGMENT_PIERCE_WISP_01",
    "AUGMENT_EXPERIENCE_UP_WISP_01",
    "AUGMENT_LIGHTNING_WHOOSH_01",
    "AUGMENT_FIRE_LIGHTNING_WHOOSH_01",
    "AUGMENT_FIRE_WISP_01",
    "AUGMENT_HEALTH_UP_WISP_01",
    "AUGMENT_LIGHTNING_WISP_01",
    "AUGMENT_MANA_UP_WISP_01",
    "AUGMENT_SILVER_WISP_01",
    "AUGMENT_SHARP_WISP_01",
    "AUGMENT_FIRE_WHOOSH_01",
    "AUGMENT_EXPERIENCE_UP_WISP_02",
    "AUGMENT_FIRE_WISP_02",
    "AUGMENT_HEALTH_UP_WISP_02",
    "AUGMENT_LIGHTNING_WISP_02",
    "AUGMENT_MANA_UP_WISP_02",
    "AUGMENT_PIERCE_WISP_02",
    "AUGMENT_SHARP_WISP_02",
    "AUGMENT_SILVER_WISP_02",
    "AUGMENT_FIRE_LIGHTNING_WHOOSH_02",
    "AUGMENT_FIRE_WHOOSH_02",
    "AUGMENT_LIGHTNING_WHOOSH_02",
    "MULTI_STRIKE_WISP_LONG_01",
    "MULTI_STRIKE_WISP_SHORT_01",
    "MULTI_STRIKE_WISP_LONG_02",
    "MULTI_STRIKE_WISP_SHORT_02",
    "MULTI_STRIKE_WISP_LONG_03",
    "MULTI_STRIKE_WISP_SHORT_03",
    "MULTI_STRIKE_WISP_LONG_04",
    "MULTI_STRIKE_WISP_SHORT_04",
    "FLOURISH_WISP_LONG_01",
    "FLOURISH_WISP_SHORT_01",
    "GUI_WILL_BAR_RISE",
    "GUI_WILL_BUBBLE_GLOW",
    "GUI_HEART_HEALTH_UP",
    "GUI_LEVEL_UP",
    "GUI_LAMP_GLOW",
    "GUI_METAL_SPARKLE",
    "GUI_TELEPORT_SPARKLE",
    "GUI_POPOUT_SKILL_BAR",
    "GUI_POPOUT_WILL_BAR",
    "GUI_POPOUT_STRENGTH_BAR",
    "GUI_HEART_BEAT_NORMAL",
    "GUI_HEART_BEAT_ADRENALINE",
    "GUI_HEART_BEAT_LOWHEALTH",
    "GUI_HEART_BEAT_BERSERK",
    "GUI_MONEY_LOSE",
    "GUI_MONEY_GAIN",
    "GUI_FLOURISH_UP_01",
    "GUI_FLOURISH_UP_02",
    "GUI_FLOURISH_UP_03",
    "GUI_RENOWN_RISE",
    "GUI_GUILDSEAL_CHARGE",
    "GHOST_CONSTANT_01",
    "GHOST_APPEAR_01",
    "KING_SCORPION_EYE_IDLE_01",
    "KING_SCORPION_EYE_VULNERABLE_IDLE_01",
    "KING_SCORPION_EYE_GET_HIT_01",
    "KING_SCORPION_EYE_VULNERABLE_01",
    "KING_SCORPION_TAIL_IDLE_01",
    "KING_SCORPION_STING_IDLE_01",
    "KING_SCORPION_TAIL_SPIKE_01",
    "KING_SCORPION_TAIL_STRIKE_IDLE_01",
    "KING_SCORPION_TAIL_STRIKE_TRAVEL_01",
    "KING_SCORPION_TAIL_STRIKE_01",
    "KING_SCORPION_DIE_01",
    "WOOD_NYMPH_CONSTANT_01",
    "WOOD_NYMPH_ORB_01",
    "WOOD_NYMPH_APPEAR_01",
    "SUCCUBUS_NYMPH_ORB_01",
    "SUCCUBUS_NYMPH_CONSTANT_01",
    "SUCCUBUS_NYMPH_APPEAR_01",
    "WATER_NYMPH_ORB_01",
    "WATER_NYMPH_CONSTANT_01",
    "WATER_NYMPH_APPEAR_01",
    "WOOD_NYMPH_DIE_01",
    "WATER_NYMPH_DIE_01",
    "WOOD_NYMPH_THORN_HITS_01",
    "WOOD_NYMPH_THORN_CAST_01",
    "WATER_NYMPH_ICE_CAST_01",
    "WATER_NYMPH_ICE_HITS_01",
    "SUCCUBUS_NYMPH_BONE_CAST_01",
    "SUCCUBUS_NYMPH_BONE_HITS_01",
    "SUCCUBUS_NYMPH_DIE_02",
    "SUCCUBUS_NYMPH_DIE_01",
    "QUEEN_NYMPH_APPEAR_01",
    "QUEEN_NYMPH_BONE_CAST_01",
    "QUEEN_NYMPH_BONE_HITS_01",
    "QUEEN_NYMPH_CONSTANT_01",
    "QUEEN_NYMPH_DIE_01",
    "QUEEN_NYMPH_DIE_02",
    "QUEEN_NYMPH_ORB_01",
    "EXPERIENCE_SPEND",
    "SAVE_POINT",
    "HERO_EVIL_FOOTPRINT",
    "FORCEFIELD_BLUE_LARGE",
    "FORCEFIELD_BLUE_LARGE_OFF",
    "FORCEFIELD_GREEN_LARGE",
    "FORCEFIELD_BLUE_SMALL",
    "FORCEFIELD_GREEN_SMALL",
    "FORCEFIELD_RED_SMALL",
    "FORCEFIELD_RED_LARGE_OFF",
    "FORCEFIELD_GREEN_LARGE_OFF",
    "FORCEFIELD_BLUE_SMALL_OFF",
    "FORCEFIELD_GREEN_SMALL_OFF",
    "FORCEFIELD_RED_SMALL_OFF",
    "RED_FORCEFIELD",
    "BLUE_FORCEFIELD",
    "NEW_RED_FORCEFIELD_IDLE_01",
    "FORCEFIELD_RED_LARGE",
    "NEW_RED_FORCEFIELD_IDLE_02",
    "NEW_RED_FORCEFIELD_IDLE_01_OFF",
    "NEW_RED_FORCEFIELD_IDLE_02_OFF",
    "FORCEFIELD_RED_LARGE_SCRIPT",
    "NEW_RED_FORCEFIELD_IDLE_SMALL_01",
    "NEW_RED_FORCEFIELD_IDLE_SMALL_01_OFF",
    "NEW_RED_FORCEFIELD_IDLE_SMALL_02",
    "NEW_RED_FORCEFIELD_IDLE_SMALL_02_OFF",
    "BRIAR_ROSE_FORCEFIELD_IDLE_01",
    "BRIAR_ROSE_FORCEFIELD_IDLE_01_OFF",
    "BRIAR_ROSE_FORCEFIELD_IDLE_02",
    "BRIAR_ROSE_FORCEFIELD_IDLE_02_OFF",
    "PRE_TELEPORT_HANDS",
    "POST_TELEPORT2",
    "MAZE_HERO_TELEPORT",
    "MAZE_POST_SPELL_HAND",
    "MAZE_HERO_TELEPORT2",
    "POST_TELEPORT",
    "MULTI_STRIKE_GET_HIT_02",
    "MULTI_STRIKE_CAST_01",
    "MULTI_STRIKE_GET_HIT_01",
    "MULTI_STRIKE_CAST_02",
    "MULTI_STRIKE_CAST_03",
    "MULTI_STRIKE_CAST_04",
    "DEATH_CRUMBLE_SMALL",
    "DEATH_CRUMBLE_HUMAN",
    "SNOW_FOOTSTEPS",
    "ASH_FOOTSTEPS",
    "SAND_FOOTSTEPS2",
    "FOREST_FOOTSTEPS",
    "SNOW_FOOTSLIDE",
    "SAND_FOOTSLIDE",
    "ASH_FOOTSLIDE",
    "FOREST_FOOTSLIDE",
    "SAND_FOOTSTEPS",
    "SKILL_PUNCH_DISTORTION",
    "SKILL_RUN_DISTORTION",
    "WAY_POINT",
    "SCREAMER_DIE_01",
    "SCREAMER_GET_HIT_01",
    "SCREAMER_IDLE_01",
    "SCREAMER_DRAIN_01",
    "BRAZIERFIREFINAL",
    "STANDARDBRAZIERWITHLIGHT",
    "BRAZIERFIREGREEN",
    "BRAZIERFIREHAZE",
    "HENCHMAN_WARP",
    "KRAKEN_TENTACLE_RIPPLE_01",
    "KRAKEN_TENTACLE_DROP_01",
    "KRAKEN_CHAMBER_GLOBAL_01",
    "KRAKEN_TENTACLE_DRIP_01",
    "KRAKEN_HEAD_RIPPLE_01",
    "KRAKEN_HEAD_DROP_01",
    "KRAKEN_TENTACLE_SLAM_01",
    "KRAKEN_GET_HIT_01",
    "KRAKEN_BEAM_LARGE_01",
    "KRAKEN_TENTACLE_DIE_01",
    "KRAKEN_HEAD_DIE_01",
    "KRAKEN_HEAD_SLAM_01",
    "KRAKEN_BEAM_LARGE_HIT_01",
    "KRAKEN_INTRO_BLURB_01",
    "KRAKEN_BEAM_LARGE_HIT_02",
    "KRAKEN_BEAM_LARGE_03",
    "KRAKEN_BEAM_LARGE_02",
    "KRAKEN_SURFACING_BUBBLES",
    "KRAKEN_SURFACING_RIPPLES",
    "HOBBE_SPELL_BUILD_UP_01",
    "HOBBE_SPELL_CAST_01",
    "HOBBE_SPELL_TRAVEL_01",
    "HOBBE_SPELL_HIT_01",
    "HOBBE_STAFF_GLOW_01",
    "HOBBE_SPELL_HIT_02",
    "JACK_OF_BLADES_RISE_01",
    "JACK_OF_BLADES_HOVER_01",
    "FOCAL_SITE_ACTIVE_IVY_BURN_01",
    "FOCAL_SITE_ACTIVE_IDLE_01",
    "FOCAL_SITE_ACTIVE_RISE_01",
    "PORTAL_OPEN",
    "PORTAL_CLOSE2",
    "NYMPH_CAGE_IDLE",
    "NYMPH_CAGE_FADE",
    "PORTAL_OPEN2",
    "PORTAL_OPEN3",
    "BANDIT_KING_SWORDS_STUCK_IDLE",
    "BANDIT_KING_SWORDS_STUCK_REMOVE",
    "BANDIT_KING_SWORDS_STUCK_STRIKE",
    "GRAVEYARD_PORTAL_IDLE",
    "GRAVEYARD_PORTAL_END",
    "GRAVEYARD_CIRCLE_LIGHT_SMALL",
    "GRAVEYARD_CIRCLE_LIGHT_LARGE",
    "NOSTRO_ARMOUR_APPEAR",
    "GATEWAY_IDLE_01",
    "GATEWAY_ACTIVE_01",
    "GATEWAY_ACTIVE_TELEPORTER_01",
    "GATEWAY_ACTIVE_TELEPORTER_02",
    "GATEWAY_ACTIVE_TELEPORTER_03",
    "PORTAL_CLOSE",
    "PORTAL_CLOSE3",
    "SACRIFICE_VANISH",
    "MOTHER_VANISH",
    "EXPLODING_BARRICADE",
    "BLOOD_BLENDABLE_RED_LARGE",
    "BLOOD_BLENDABLE_RED_SMALL",
    "BLOOD_BLENDABLE_YELLOW_LARGE",
    "BLOOD_BLENDABLE_YELLOW_SMALL",
    "BLOOD_BLENDABLE_BLUE_LARGE",
    "BLOOD_BLENDABLE_BLUE_SMALL",
    "BLOOD_BACK",
    "BLOOD_BLENDABLE_RED_MOTHER",
    "ALIGNMENT_GOOD_SUNBEAMS",
    "ALIGNMENT_EVIL_RAYS",
    "ALIGNMENT_FLY_SWARM",
    "ALIGNMENT_EVIL_EYES",
    "COLD_BREATH",
    "WB_TELEPORT",
    "WB_WILL_PUSH",
    "WB_SISTER_EYE_GLOW",
    "WB_SEPTIMAL_ABSORB",
    "WB_SEPTIMAL_HELD",
    "WB_SEPTIMAL_SUCK",
    "WB_SEPTIMAL_APPEAR",
    "WB_WILL_PUSH_HIT",
    "WB_HELD_DISPERSE",
    "WB_MAZE_HANDS",
    "ENDGAME_SWORD_DRAW_POWER_01_CRAP",
    "ENDGAME_SWORD_DRAW_POWER_01",
    "ENGAME_POWER_MOTHER_SWORD_01",
    "EARTH_TROLL_NEW_BURROW_01",
    "EARTH_TROLL_NEW_RISE_01",
    "EARTH_TROLL_NEW_AREA_ATTACK_01",
    "EARTH_TROLL_NEW_PUNCH_GROUND_01",
    "EARTH_TROLL_NEW_MUD_DRIP_01",
    "EARTH_TROLL_NEW_GET_HIT_01",
    "EARTH_TROLL_NEW_DIE_01",
    "EARTH_TROLL_EARTH_SMASH_02",
    "EARTH_TROLL_EARTH_SMASH_01",
    "SUMMONED_EYE_GLOW",
    "WILL_HANDS_MAX",
    "WILL_HANDS_MIN",
    "SWORD_OF_EONS_SUMMON",
    "GUI_SMACK",
    "GUI_MORALITY_BAD",
    "GUI_MORALITY_GOOD",
    "GUI_WILL_BAR_DEFAULT",
    "GUI_WILL_BAR_CHUNK",
    "GUI_WILL_INCREASE",
    "OAKVALE_BURNING_BLAZE",
    "OAKVALE_BURNING_BRIDGE_ARCH",
    "OAKVALE_BURNING_LINE",
    "OAKVALE_BURNING_PATCH",
    "OAKVALE_BURNING_DEBRIS",
    "WATERFALL_FINAL_LARGE_TRIPLE",
    "WATERFALL_FINAL_MEDIUM_TRIPLE",
    "WATERFALL_FINAL_LARGE_DOUBLE",
    "WATERFALL_FINAL_LARGE_SINGLE",
    "WATERFALL_FINAL_MEDIUM_SINGLE",
    "WATERFALL_FINAL_MEDIUM_DOUBLE",
    "KRAKENOVERFLOW",
    "BT_CAST_EXPERIENCE",
    "BT_GROUND_FX",
    "BT_ABSORB_EXPERIENCE_DISSIPATE",
    "BT_ABSORB_EXPERIENCE_DISSIPATE2",
    "BT_ABSORB_EXPERIENCE",
    "TURNCOAT_CASTING_HERO",
    "TURNCOAT_LEVEL_05",
    "TURNCOAT_LEVEL_04",
    "TURNCOAT_LEVEL_03",
    "TURNCOAT_LEVEL_02",
    "TURNCOAT_LEVEL_01",
    "TURNCOAT_CASTING_ENEMY",
    "TURNCOAT_CASTING_HERO_RANGE",
    "VOMIT",
    "DIVINE_WRATH_CAST_SMALL",
    "DIVINE_WRATH_VICTIM",
    "DIVINE_WRATH_CAST_LARGE",
    "DIVINE_WRATH_RELEASE",
    "DIVINE_WRATH_VICTIM_DIE",
    "DIVINE_WRATH_HAND",
    "UNHOLY_POWER_VICTIM",
    "UNHOLY_POWER_CAST_LARGE",
    "UNHOLY_POWER_CAST_SMALL",
    "UNHOLY_POWER_RELEASE",
    "UNHOLY_POWER_VICTIM_DIE",
    "UNHOLY_POWER_HAND",
    "UNHOLY_POWER_DARK_FACES",
    "EXPLOSION_SNOW_SMALL_01",
    "EXPLOSION_SNOW_LARGE_01",
    "EXPLOSION_SNOW_LARGE_02",
    "SNOW_TROLL_DIE_01",
    "SNOW_TROLL_DIE_02",
    "SNOW_TROLL_DIE_03",
    "SNOW_TROLL_DRIP_ARM_01",
    "SNOW_TROLL_DRIP_BELLY_01",
    "SNOW_TROLL_GET_HIT_01",
    "SNOW_TROLL_GET_HIT_01_BERZERK",
    "SNOW_TROLL_ROCK_DRIP_01",
    "SNOW_TROLL_ROCK_SMASH_01",
    "SNOW_TROLL_ROCK_SMASH_02",
    "SNOW_TROLL_SCATTER_RISE_01",
    "SNOW_TROLL_SCATTER_RISE_FAST_01",
    "SUMMONER_LINKS_ARMS_01",
    "SUMMONER_LIGHTNING_GLOBE_01",
    "SUMMONER_LIGHTNING_GLOBE_HIT_01",
    "DG_SOUL",
    "DG_MASK_SUCK",
    "DG_RECEPTACLE_SUCK",
    "DG_RECEPTACLE_ACTIVATION",
    "DG_GATE_UNLOCK",
    "DG_SOUL_TRAPPED",
    "DG_SUMMONER_SUCK",
    "DG_RECEPTACLE_ACTIVATION_BEAM_01",
    "DG_RECEPTACLE_ACTIVATION_BEAM_02",
    "DG_RECEPTACLE_ACTIVATION_BEAM_03",
    "DG_RECEPTACLE_ACTIVATION_CENTRE",
    "DG_SOUL_SWIRL",
    "DG_DRAGON_SUCK",
    "SUMMONER_LIGHTNING_CHARGE",
    "SUMMONER_GLOBE_CHARGE",
    "SUMMONER_GLOBE_HIT",
    "SUMMONER_GLOBE_TRAVEL",
    "SUMMONER_EXPLOSION_SMALL",
    "SUMMONER_EXPLOSION_LARGE",
    "SUMMONER_GLOBE_TRAVEL_LARGE",
    "FALLING_ASH",
    "FIREHEART_SPUTTER",
    "TILE_FRAME_BLUE",
    "TILE_FRAME_ORANGE",
    "CRYSTAL_OPEN_01",
    "CRYSTAL_IMPLODE_01",
    "FLAME_WREATH",
    "FIREHEART_ATTACK_FIRE",
    "TILE_FRAME_MOON_COMPLETE",
    "TILE_FRAME_SUN_COMPLETE",
    "GUILDMASTER_SHIELD",
    "GUILDMASTER_SHIELD_HIT",
    "GUILDMASTER_SHIELD_BREAK",
    "EMBERS_01A",
    "DRAGON_FIREBALL_BUILDUP_01A",
    "DRAGON_FIREBALL_CAST_01A",
    "DRAGON_DIE_01A",
    "DRAGON_FIRE_01",
    "DRAGON_LAND",
    "LAVA_SPIT",
    "DRAGON_EYE",
    "DRAGON_SHOCK_01",
    "JACK_MASK_EYE",
    "JACK_MASK_SUCK",
    "DRAGON_MOUTH_SMOKE",
    "DRAGON_SHOCK_02B",
    "DRAGON_SHOCK_HIT_01",
    "DRAGON_SHOCK_02",
    "DRAGON_TAKEOFF",
    "FIREHEART_EARLY_GLOW",
    "FIREHEART_LIGHT_BLAST",
    "FIREHEART_DIE",
    "LIGHTHOUSE_BLAST",
    "LIGHTHOUSE_BEAM2",
    "FIREHEART_PULSE",
    "SUMMONER_BLUE_SHATTER_01",
    "SUMMONER_RED_SHATTER_02",
    "ORACLE_SEQUENCE_Y",
    "ORACLE_SEQUENCE_C",
    "ORACLE_SEQUENCE_M",
    "ORACLE_SEQUENCE_A",
    "ORACLE_RESPONSE_A",
    "ORACLE_RESPONSE_M",
    "ORACLE_RESPONSE_C",
    "ORACLE_RESPONSE_Y",
    "ORACLE_CORRECT_A",
    "ORACLE_CORRECT_M",
    "ORACLE_CORRECT_Y",
    "ORACLE_CORRECT_C",
    "ORACLE_WRONG_A",
    "ORACLE_WRONG_C",
    "ORACLE_WRONG_M",
    "ORACLE_WRONG_Y",
    "ORACLE_READY_Y",
    "ORACLE_READY_A",
    "ORACLE_READY_M",
    "ORACLE_READY_C",
    "SUMMONER_ALTAR_ACTIVE",
    "BRIAR_CHANT"
};

const char* szCreatureAnimations[] = {
    "ST_SNEAK",
    "ST_WALK",
    "ST_RUN",
    "ST_OPINION_",
    "ST_SPRINT",
    "ST_JOG",
    "ST_SLOW_WALK",
    "ST_HEAD_TURN_H",
    "ST_HEAD_TURN_V",
    "ST_BLINK",
    "ST_ABILITY_FAST_SHEATHE_TO_COMBAT_POSE",
    "ST_WALK_",
    "ST_HOVER_",
    "ST_BUILD_DIVINE_WRATH",
    "ST_BUILD_UNHOLY_POWER",
    "ST_ABILITY_FAST_UNSHEATHE_TO_COMBAT_POSE",
    "ST_FLY",
    "ST_HOMICIDAL_INTRO",
    "ST_IDLE",
    "ST_HOLD_BOX_PUT_DOWN",
    "ST_CALL_OVER",
    "ST_PICK_UP_GENERIC_BOX",
    "ST_RUN_STOP",
    "ST_RUN_180_TURN",
    "ST_JUMP",
    "ST_IDLE_COMB",
    "ST_IDLE_SUBTLE",
    "ST_IDLE_MELEE",
    "ST_STAND_UP_FROM_FLOOR",
    "ST_SIT_ON_FLOOR",
    "ST_DRAIN_LIFE_OUTOF",
    "ST_CAST_DRAIN_LIFE",
    "ST_CAST_DRAIN_LIFE_ADVANCE",
    "ST_DIE",
    "ST_RELEASE_ENFLAME",
    "ST_BUILD_UP_ENFLAME",
    "ST_RELEASE_PHYSICAL_SHIELD",
    "ST_BUILD_UP_PHYSICAL_SHIELD",
    "ST_REMOVE_PHYSICAL_SHIELD",
    "ST_CAST_TURNCOAT",
    "ST_BUILD_UP_TURNCOAT",
    "ST_RELEASE_TURNCOAT",
    "ST_BUILD_UP_DRAIN_LIFE",
    "ST_RELEASE_DRAIN_LIFE",
    "ST_CAST_HEAL",
    "ST_CAST_HEAL_SELF",
    "ST_BUILD_UP_HEAL",
    "ST_BUILD_UP_HEAL_SELF",
    "ST_RELEASE_HEAL",
    "ST_RELEASE_HEAL_SELF",
    "ST_CAST_SUMMON_GHOST_SWORD",
    "ST_BUILD_UP_SUMMON_GHOST_SWORD",
    "ST_RELEASE_SUMMON_GHOST_SWORD",
    "ST_CAST_SUMMON_SPELL",
    "ST_BUILD_UP_SUMMON_SPELL",
    "ST_RELEASE_SUMMON_SPELL",
    "ST_BUILD_UP_FIREBALL_SPELL",
    "ST_TELEPORT",
    "ST_TELEPORT_OUT",
    "ST_TELEPORT_IN",
    "ST_CAST_DIVINE_WRATH",
    "ST_RELEASE_DIVINE_WRATH",
    "ST_RELEASE_LOOP_DIVINE_WRATH",
    "ST_CAST_UNHOLY_POWER",
    "ST_RELEASE_UNHOLY_POWER",
    "ST_RELEASE_LOOP_UNHOLY_POWER",
    "ST_FORCE_PUSH_INTO",
    "ST_BUILDUP_PHYSICAL_SHIELD",
    "ST_BUILDUP_ENFLAME",
    "ST_HEAL_INTO",
    "ST_HEAL_RELEASE",
    "ST_GET_UP_FROM_FALL",
    "ST_FORCE_PUSH_RELEASE",
    "ST_STRIKE_SPECIAL",
    "ST_JUMP_AWAY_FROM_COMBAT",
    "ST_JUMP_AWAY_FROM_COMBAT_LONG",
    "ST_BATTLE_CHARGE_CAST",
    "ST_BUILD_UP_SLOW_TIME",
    "ST_CAST_ASSASSIN_RUSH",
    "ST_BATTLE_CHARGE_BUILD_UP",
    "ST_BATTLE_CHARGE_IMPACT",
    "ST_BATTLE_CHARGE_MISS",
    "ST_BATTLE_CHARGE_TURN_LEFT",
    "ST_BATTLE_CHARGE_TURN_RIGHT",
    "ST_MULTI_ARROW_CAST",
    "ST_HOLDING_PLATE",
    "ST_SNEAK_POSE",
    "ST_SNEAK_UPRIGHT_POSE",
    "ST_SNEAK_UPRIGHT",
    "ST_STRIKE_LIGHT_OUTOF",
    "ST_SLEEPING_IN_BED",
    "ST_WALK_OUT_OF",
    "ST_WALK_INTO",
    "ST_WIPE_TABLE",
    "ST_OPINION_FEAR_REACTION_SHRINKING_AWAY",
    "ST_OPINION_FEAR_IDLE_COWERING",
    "ST_OPINION_DISAPPROVAL_POINTING_AWAY_GET_OUT",
    "ST_OPINION_RIDICULE_SNIGGER",
    "ST_OPINION_RIDICULE_BELLY_LAUGH",
    "ST_OPINION_FEAR_REACTION_SURPRISED",
    "ST_OPINION_DISAPPROVAL_SHAKE_FIST",
    "ST_OPINION_DISAPPROVAL_DISMISSING_HAND_SWIPE",
    "ST_OPINION_ATTRACTED_PREENING_SELF",
    "ST_OPINION_ATTRACTED_HANDS_CLASPED_SWAYING",
    "ST_OPINION_NEUTRAL_SHOUTING_WITH_HANDS_CUPPED",
    "ST_OPINION_DISAPPROVAL_CALLING_OVER_FOR_FIGHT",
    "ST_OPINION_APPROVAL_WAVING_AT_DISTANCE",
    "ST_OPINION_NEUTRAL_REACTION_HAND_UP_GREET",
    "ST_OPINION_APPROVAL_REACTION_ARMS_WIDE_GREET",
    "ST_CROUCH_TALK_TO_CHILD_OUTOF",
    "ST_CROUCH_TALK_TO_CHILD_LOOP",
    "ST_CROUCH_TALK_TO_CHILD_INTO",
    "ST_SEATED_CHAIR_RAISE_HAND",
    "ST_CRYING_ON_THE_SPOT_OUTOF",
    "ST_CRYING_ON_THE_SPOT_LOOP",
    "ST_CRYING_ON_THE_SPOT_INTO",
    "ST_WORK_GET_CRATE",
    "ST_HOLDING_CRATE",
    "ST_WORK_PUT_CRATE",
    "ST_WASH_FLOOR_OUTOF",
    "ST_WASH_FLOOR_LOOP",
    "ST_WASH_FLOOR_INTO",
    "ST_BLOW_KISS_LOOP",
    "ST_PUKING",
    "ST_PISSING",
    "ST_DICEGAME_WATCHING_OUTOF",
    "ST_DICEGAME_PLAYING",
    "ST_DICEGAME_PLAYING_WIN",
    "ST_DICEGAME_PLAYING_LOSE",
    "ST_DICEGAME_PLAYING_THROW",
    "ST_DICEGAME_PICKING_DICE",
    "ST_DICEGAME_WATCHING_INTO",
    "ST_LISTENING_TO_PLANS_LOOP",
    "ST_LISTENING_TO_PLANS_BREAKDOWN",
    "ST_MAKING_PLANS_ON_FLOOR_WITH_SWORD_OUTOF",
    "ST_MAKING_PLANS_ON_FLOOR_WITH_SWORD_LOOP",
    "ST_MAKING_PLANS_ON_FLOOR_WITH_SWORD_INTO",
    "ST_LISTENING_TO_PLANS_OUTOF",
    "ST_LISTENING_TO_PLANS_INTO",
    "ST_TRAINEE_STRIKE_DUMMY",
    "ST_TRAINEE_FIRE_BOW_RELEASE",
    "ST_TRAINEE_FIRE_BOW_LOAD",
    "ST_TRAINEE_SPELLS",
    "ST_TRAINEE_PERUSE_LIBRARY",
    "ST_TRAINEE_LOOK_AT_MAP_TABLE",
    "ST_SIT_ON_SEAT",
    "ST_STAND_UP_FROM_SEAT",
    "ST_SIT_ON_BENCH",
    "ST_STAND_UP_FROM_BENCH",
    "ST_CHICKEN_EATING_INTO",
    "ST_CHICKEN_EATING_LOOP",
    "ST_CHICKEN_EATING_OUTOF",
    "ST_CHICKEN_COOKING_INTO",
    "ST_CHICKEN_COOKING_LOOP",
    "ST_CHICKEN_COOKING_OUTOF",
    "ST_SITTING_SING_SONG_DRUNK_INTO",
    "ST_SITTING_SING_SONG_DRUNK_LOOP",
    "ST_SITTING_TAKE_BOTTLE_FROM_POCKET",
    "ST_SITTING_DRINKING_LOOP",
    "ST_SITTING_THROW_BOTTLE_AWAY",
    "ST_TANTRUM_OUTOF",
    "ST_TANTRUM_LOOP",
    "ST_TANTRUM_INTO",
    "ST_EATING",
    "ST_LOOK_AROUND",
    "ST_SURPRISE",
    "ST_CLEAN_WINDOWS",
    "ST_DISGUSTED",
    "ST_AGGRESSIVE",
    "ST_TEACH_INTO",
    "ST_TEACH_LOOP",
    "ST_TEACH_OUTOF",
    "ST_SAWING_OUTOF",
    "ST_SAWING_LOOP",
    "ST_SAWING_INTO",
    "ST_GET_ITEM_OUT_OF_POCKET",
    "ST_FILL_ITEM",
    "ST_LIGHT_CANDLE",
    "ST_UNLIGHT_CANDLE",
    "ST_EMOTE",
    "ST_SURPRISED",
    "ST_SLEEP_ON_FLOOR_OUTOF",
    "ST_SLEEP_ON_FLOOR_IDLE",
    "ST_SLEEP_ON_FLOOR_INTO",
    "ST_SAT_EATING_INTO",
    "ST_SAT_EATING_OUTOF",
    "ST_SAT_EATING_LOOP",
    "ST_STRIKE_LIGHT_INTO",
    "ST_FALL_TO_GROUND",
    "ST_MUNCH",
    "ST_FEED_OUTOF",
    "ST_FEED_LOOP",
    "ST_FEED_INTO",
    "ST_RUN_JUMP",
    "ST_POINT",
    "ST_HELLO",
    "ST_PRAY_STANDING_OUTOF",
    "ST_PRAY_STANDING_LOOP",
    "ST_PRAY_STANDING_INTO",
    "ST_PRAY_OUTOF",
    "ST_PRAY_LOOP",
    "ST_PRAY_INTO"
    "ST_CHANTING_LOOP",
    "ST_CHANTING_INTO",
    "ST_ARGUING_POINT_AT",
    "ST_ARGUING_POINT_AWAY",
    "ST_COME_ON",
    "ST_SALUTE",
    "ST_STRIKE_COMBO_FIREBALL",
    "ST_STRIKE_LEFT_FIREBALL",
    "ST_OPINION_DISAPPROVAL_POINT_AT",
    "ST_OPINION_DISAPPROVAL_BOOING",
    "ST_OPINION_NEUTRAL_POINTING_CALLING_FRIEND",
    "ST_OPINION_APPROVAL_ECSTATIC_GESTURING_OUTOF",
    "ST_OPINION_APPROVAL_ECSTATIC_GESTURING_LOOP",
    "ST_OPINION_APPROVAL_ECSTATIC_GESTURING_INTO",
    "ST_OPINION_APPROVAL_CHEERING_BOTH_ARMS_UP",
    "ST_OPINION_APPROVAL_CLAPPING_ARMS_UP",
    "ST_OPINION_APPROVAL_CLAPPING_NORMAL",
    "ST_OPINION_DISAPPROVAL_NYAH_NYAH",
    "ST_OPINION_RIDICULE_POINT_AND_LAUGH",
    "ST_OPINION_DISAPPROVAL_THUMBS_DOWN",
    "ST_OPINION_NEUTRAL_POINT_AT",
    "ST_OPINION_FEAR_WALK_EDGING_BACKWARDS",
    "ST_UNPERTURBED_GESTURE",
    "ST_WAVE_SPECIAL_01",
    "ST_THREATEN",
    "ST_WAVE_SPECIAL_02",
    "ST_BOAST",
    "ST_PUKE_INTO",
    "ST_PUKE_LOOP",
    "ST_PUKE_OUTOF",

};

const char* szBuiltInQuests[] = {
    "CS_OakValeRevisited",
    "CS_PlayCutscene",
    "ChapterAndSceneManager",
    "CreatureGenerators",
    "DummyQuestForHeroLevels",
    "DummyQuestForScarletRoseStatue",
    "ForceKHGGatesOpen",
    "Gameflow",
    "GameflowAssistance",
    "HeroBoasts",
    "Hook_BalverinesInKHGPreWhiteBalv",
    "Hook_BoastingCrowd",
    "Hook_BowerstoneTeleportTutorial",
    "Hook_Fresco_01_EvilEpilogue",
    "Hook_Fresco_02_GoodEpilogue",
    "Hook_Fresco_03_JacksObsession",
    "Hook_Fresco_04_Kraken",
    "Hook_Fresco_05_MothersStory",
    "Hook_Fresco_06_Prison",
    "Hook_Fresco_07_OakValeRaid",
    "Hook_Fresco_08_SistersStory",
    "Hook_Fresco_09_TimePassing",
    "Hook_Fresco_10_UneasyAlliance",
    "Hook_Fresco_11_Wedding",
    "Hook_Fresco_12_KilledDragon",
    "Hook_Fresco_13_KilledScorpion",
    "LadyGreyWifeManager",
    "MarkStealthTest",
    "NPCDeath",
    "OracleMinigameTest",
    "PersonalScriptMain",
    "PersonalScript_GlobalThings",
    "QR_EscortTrader",
    "QR_EscortTrader_Manager",
    "QS_GuardianSisterInfo",
    "QS_GuardianSisterInfo2_SisterInBanditCamp",
    "QS_GuardianTrophyDealerInfo",
    "QS_MeetSister",
    "QS_ScytheInfo",
    "Q_AmbushTraders",
    "Q_AmbushTraders_ActivatePhase1",
    "Q_AmbushTraders_ActivatePhase2",
    "Q_AmbushTraders_ActivatePhase3",
    "Q_Arena",
    "Q_ArenaHoldingScript",
    "Q_AwakeningTheOracle",
    "Q_AwakeningTheOracleMinigame",
    "Q_BanditCamp",
    "Q_BanditCampBossBattle",
    "Q_BanditCampHoldingScript",
    "Q_BanditCamp_Barriers",
    "Q_BountyHunt",
    "Q_BowerstoneTownLifeIntro",
    "Q_BreakSiege",
    "Q_BreakSiege_Blockage",
    "Q_CinemaTest",
    "Q_DragonBossFight",
    "Q_EndGame",
    "Q_EndGameBossBattle",
    "Q_EndGameBossBattleScenery",
    "Q_EndGameFocalSites",
    "Q_EndGame_Barriers",
    "Q_FireHeart",
    "Q_GuildTraining",
    "Q_GuildTrainingDeparture",
    "Q_GuildTrainingMelee",
    "Q_GuildTrainingPreMelee",
    "Q_GuildTrainingSkill",
    "Q_GuildTrainingWill",
    "Q_GuildTrainingWoodsDeparture"
    "Q_GuildTrainingWoodsDeparture",
    "Q_GuildTrainingWoodsMelee",
    "Q_GuildTrainingWoodsWill",
    "Q_HangingTreeEvil",
    "Q_HangingTreeGood",
    "Q_HeroSouls",
    "Q_HeroSoulsArena",
    "Q_HeroSoulsBriar",
    "Q_HeroSoulsBriarMagicBarrier",
    "Q_HeroSoulsGuildmaster",
    "Q_HeroSoulsMother",
    "Q_HeroSoulsNostro",
    "Q_HeroSoulsPermanentArena",
    "Q_HeroSoulsThunder",
    "Q_HerosOldHouse",
    "Q_HobbeCave",
    "Q_HobbeCaveBarrier",
    "Q_HobbeCaveGranny",
    "Q_HobbeToothContest",
    "Q_MinionCamp",
    "Q_MinionClifftopChase",
    "Q_MinionClifftopChase_Barriers",
    "Q_NewOakValeIntro",
    "Q_NewOakValeIntro_PreAttack",
    "Q_OakValeBanditRaid",
    "Q_OpeningGraveyardSecretPassage",
    "Q_OrchardFarmRaid",
    "Q_OrchardFarmRaidEvil",
    "Q_OrchardFarmRaidGood",
    "Q_OrchardFarm_Barricade",
    "Q_PrisonEscapeFromCell",
    "Q_PrisonEscapeRescueMother",
    "Q_PrisonRace",
    "Q_PrisonWardenGame",
    "Q_RansomVictim",
    "Q_RansomVictimChiefsHouse",
    "Q_RansomVictimNaturesRevenge",
    "Q_RansomVictimRevenge",
    "Q_RansomVictimStarted",
    "Q_RansomVictimStartedNature",
    "Q_SecretPassage",
    "Q_SummoningTheShip",
    "Q_SunnyvaleMaster",
    "Q_TentacleKrakenBossFight",
    "Q_TraderConflictEvil",
    "Q_TraderConflictGood",
    "Q_TraderConflictGood_Extras",
    "Q_TraderEscort",
    "Q_TraderEscortForceField",
    "Q_TraderPath",
    "Q_UndeadRising",
    "Q_WaspBoss",
    "Q_WhiteBalverineKnotholeGlade"
    "Q_WhiteBalverineKnotholeGlade",
    "Q_WhiteBalverineWW",
    "Q_WizardBattle",
    "Q__OakValeIntro_PostAttack",
    "ShowTargetedThingHealth",
    "TonyTestScripts",
    "V_AmbushScam",
    "V_AmbushScamEvil",
    "V_AmbushScamGood",
    "V_ArcheryCompetition",
    "V_ArcheryCompetition_Activate",
    "V_AssassinAttacks",
    "V_AssassinAttacks_Activate",
    "V_BanditCampPath",
    "V_BanditToll",
    "V_BeardyBaldy",
    "V_BeggarAndChild",
    "V_BodyGuard",
    "V_BookCollecting",
    "V_Bordello",
    "V_ChapelOfEvil",
    "V_ChapelOfEvil_Activate",
    "V_ChickenKicking",
    "V_DemonDoors",
    "V_ExposeMayor",
    "V_ExposeMayorRhodri",
    "V_Fisherman",
    "V_FishingCompetition",
    "V_FisticuffsClub",
    "V_FisticuffsClubOnlyAtNight",
    "V_GhostGrannyNecklace",
    "V_GuildMaster",
    "V_HauntedHouse",
    "V_HelpTips",
    "V_HeroDolls",
    "V_HeroDuel",
    "V_HiddenBooty",
    "V_HiddenBooty_Activate",
    "V_IntroductionToTrophies",
    "V_KnotholeGladeGates",
    "V_LostTrader",
    "V_MayorsInvitation",
    "V_MazeResearch",
    "V_MurderTwistFinal",
    "V_Oracle",
    "V_ParanoidWhispers",
    "V_PicnicAreaAfterWaspBoss",
    "V_RandomPopulationSim",
    "V_RockTrollFirstEncounter",
    "V_RockTrollFirstEncounter_Activate",
    "V_SickChild",
    "V_SickChildBarrowFields",
    "V_SickChild_Activate",
    "V_SingingStones",
    "V_SingingStones_Activate",
    "V_StatueMaster",
    "V_SwordInTheStone",
    "V_TalentlessBard",
    "V_TempleOfLight",
    "V_TempleOfLight_Activate",
    "V_TourGuide",
    "V_TourGuide_Activate",
    "V_TravellingBeggar",
    "V_TravellingBully",
    "V_TravellingHeroes",
    "V_TrophyDealer",
};

const char* expressionNames[] = {
    "EXPRESSION_FOLLOW",
    "EXPRESSION_WAIT",
    "EXPRESSION_PICKPOCKET",
    "EXPRESSION_PICKLOCK",
    "EXPRESSION_STEAL",
    "EXPRESSION_BANDIT_WAVE_1",
    "EXPRESSION_BANDIT_WAVE_2",
    "EXPRESSION_INSULT_01",
    "EXPRESSION_INSULT_02",
    "EXPRESSION_INSULT_03",
    "EXPRESSION_INSULT_04",
    "EXPRESSION_HEROIC_STANCE",
    "EXPRESSION_FLIRT",
    "EXPRESSION_APOLOGY",
    "EXPRESSION_SNEER",
    "EXPRESSION_EVIL_LAUGH",
    "EXPRESSION_BATTLE_CRY",
    "EXPRESSION_PELVIC_THRUST",
    "EXPRESSION_MIDDLE_FINGER",
    "EXPRESSION_BELCH",
    "EXPRESSION_FART",
    "EXPRESSION_VICTORY_PUMP",
    "EXPRESSION_GIGGLE",
    "EXPRESSION_SHIT",
    "EXPRESSION_THANKS",
    "EXPRESSION_COCK_A_DOODLE_DO",
    "EXPRESSION_CROTCH_GRAB",
    "EXPRESSION_KISS_MY_ASS",
    "EXPRESSION_FLAMENCO",
    "EXPRESSION_COSSACK",
    "EXPRESSION_AIR_GUITAR",
    "EXPRESSION_BALLET",
    "EXPRESSION_SATURDAY_NIGHT_FEVER",
    "EXPRESSION_TAP",
    "EXPRESSION_Y",
    "EXPRESSION_M",
    "EXPRESSION_C",
    "EXPRESSION_A",
};

const char* szPlayerModeNames[] =
{
    "PLAYER_MODE_NULL",
    "PLAYER_MODE_CONTROL_CREATURE",
    "PLAYER_MODE_Z_TARGET",
    "PLAYER_MODE_DEAD",
    "PLAYER_MODE_NAVIGATE_INVENTORY",
    "PLAYER_MODE_NAVIGATE_INVENTORY_CLOTHING",
    "PLAYER_MODE_NAVIGATE_INVENTORY_WEAPONS",
    "PLAYER_MODE_NAVIGATE_INVENTORY_ABILITIES_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_MAP_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_MAGIC_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_STATS_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_EXPERIENCE_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_TRADE_SCREEN",
    "PLAYER_MODE_NAVIGATE_INVENTORY_QUESTS_SCREEN",
    "PLAYER_MODE_CLICK_PAST_TEXT",
    "PLAYER_MODE_YES_NO_QUESTION",
    "PLAYER_MODE_FIRST_PERSON",
    "PLAYER_MODE_FREEZE_CONTROLS",
    "PLAYER_MODE_SPECIAL_ABILITY_FREEZE_CONTROLS",
    "PLAYER_MODE_CONTROL_CAMERA",
    "PLAYER_MODE_LOOK_THROUGH_WINDOW",
    "PLAYER_MODE_REBOOT_GAME",
    "PLAYER_MODE_FIRST_PERSON_TARGETING",
    "PLAYER_MODE_NAVIGATE_IN_GAME_MENU",
    "PLAYER_MODE_CONTROL_SPIRIT",
    "PLAYER_MODE_USE_PROJECTILE_WEAPON",
    "PLAYER_MODE_TAVERN_GAME",
    "PLAYER_MODE_CUT_SCENE",
    "PLAYER_MODE_CHARGE_QUICK_ACCESS",
    "PLAYER_MODE_FISHING",
    "PLAYER_MODE_DIGGING",
    "PLAYER_MODE_PARALYSED",
    "PLAYER_MODE_BOAST_UI",
    "PLAYER_MODE_BERSERK",
    "PLAYER_MODE_USE_PROJECTILE_WEAPON_THIRD_PERSON",
    "PLAYER_MODE_CHARGE_UP_WILL_SPELL",
    "PLAYER_MODE_QUICK_ACCESS_MENU",
    "PLAYER_MODE_QUEST_COMPLETION_UI",
    "PLAYER_MODE_CREDITS_UI",
    "PLAYER_MODE_BETTING",
    "PLAYER_MODE_LIGHTNING",
    "PLAYER_MODE_ORACLE_MINIGAME",
    "PLAYER_MODE_FIREHEART_MINIGAME",
    "PLAYER_MODE_LIVE_GUI",
    "PLAYER_MODE_CONSOLE",
    "PLAYER_MODE_TAKE_SCREENSHOT_FOR_PHOTOJOURNAL",
    "PLAYER_MODE_PC_PROJECTILE_WEAPON_THIRD_PERSON_AIMING",
    "PLAYER_MODE_VIEW_HERO"
};

const char* szCreatureModeNames[] =
{
    "MODE_NULL",
    "MODE_STAND",
    "MODE_STAND_HAPPY",
    "MODE_STAND_BORED",
    "MODE_CARRYING_WEAPON_STAND",
    "MODE_CARRYING_PLATE_STAND",
    "MODE_CARRYING_GOODS_STAND",
    "MODE_SNEAK",
    "MODE_SIT_CHAIR",
    "MODE_SIT_BENCH",
    "MODE_SIT_FLOOR",
    "MODE_SIT_TAVERN_STOOL",
    "MODE_BLOCK",
    "MODE_SLEEP_BED",
    "MODE_COOK",
    "MODE_SCARED",
    "MODE_OUTRAGED",
    "MODE_CREEPING",
    "MODE_CHEERING",
    "MODE_HECKLING",
    "MODE_SAD",
    "MODE_ATTRACTED",
    "MODE_HERO_IMITATION",
    "MODE_CURIOUS",
    "MODE_BULLY",
    "MODE_STRAFE",
    "MODE_HOVER",
    "MODE_CONVERSATION",
    "MODE_STAND_IN_ALL_DIRECTIONS",
    "MODE_STUNNED",
    "MODE_UNDERGROUND",
    "MODE_KNOCKED_DOWN",
    "MODE_FORCE_PUSHED",
    "MODE_FISHING",
    "MODE_CARRYING_GENERIC_BOX",
    "MODE_BATTLE_CHARGE",
    "MODE_BERSERK",
    "MODE_ASSASSIN_RUSH",
    "MODE_WADING",
    "MODE_DRINKING_FROM_TANKARD",
    "MODE_EATING_AT_TABLE",
    "MODE_HOLD_JUG",
    "MODE_SERVE_CUSTOMER",
    "MODE_FILL_JUG",
    "MODE_DRUNK",
    "MODE_ARMS_OFF_TABLE",
    "MODE_HANDS_BOUND",
    "MODE_SCORPION_KING_TAIL_PLUNGE",
    "MODE_JACK_OF_BLADES_SUMMON",
    "MODE_JACK_OF_BLADES_FLOAT",
    "MODE_JACK_OF_BLADES_FLASH",
    "MODE_JACK_OF_BLADES_SCREAM",
    "MODE_JACK_OF_BLADES_VULNERABLE",
    "MODE_JACK_OF_BLADES_DEATH",
    "MODE_THUNDER_LIGHTNING_STORM",
    "MODE_SCORPION_KING_VULNERABLE",
    "MODE_SCORPION_KING_EXHAUSTED",
    "MODE_CREATURE_IS_PROJECTILE",
    "MODE_ROCK_TROLL_VULNERABLE",
    "MODE_GUILDMASTER_CONCENTRATE",
    "MODE_GUILDMASTER_POWERUP_HEAL",
    "MODE_GUILDMASTER_POWERUP_SHIELD",
    "MODE_GUILDMASTER_POWERUP_SPEED",
    "MODE_BRIAR_ROSE_CONCENTRATE",
    "MODE_BRIAR_ROSE_INVULNERABLE",
    "MODE_BRIAR_ROSE_INTANGIBLE",
    "MODE_EXPLOSIVE_FORCE_PUSHED",
    "MODE_DAZED",
    "MODE_SCREAMER_AGGRESSIVE",
    "MODE_DRAINED",
    "MODE_ROLL",
    "MODE_DRAGON_HOVER",
    "MODE_DRAGON_SWOOP",
    "MODE_DRAGON_DEFAULT",
    "MODE_DRAGON_REAR_UP",
    "MODE_DRAGON_FIRE_BEAM",
    "MODE_DRAGON_STRAFE",
    "MODE_DRAGON_STRAFE_BURNINATE",
    "MODE_DRAGON_LANDED",
    "MODE_DRAGON_GET_HIT",
    "MODE_DRAGON_FLYING",
    "MODE_INTANGIBLE",
    "MODE_DRAGON_HOVER_NAPALM_GROUND",
    "MODE_VULNERABLE",
    "MODE_UNDERWATER",
    "MODE_DRAGON_HOVER_CHARGE_UP_NAPALM_GROUND",
    "MODE_CAGED",
    "MODE_SCRIPTED",
    "MODE_BASIC",
    "MODE_SUMMONER_SUMMON",
    "MODE_SUMMONER_LIGHTNING_ORB",
    "MODE_CHARGE_FORCE_PUSH",
    "MODE_SUMMONER_DIE",
    "MODE_ICE_TROLL_ICICLE_ASSAULT",
    "MODE_SCREAMER_SUPER_ATTACK",
    "MODE_HIT_BY_EPIC_SPELL"
};

const char* szCreatureWeapons[] = {
    "OBJECT_HERO_STICK",
    "OBJECT_HERO_SWORD_FIRST",
    "OBJECT_WARRIOR_SWORD",
    "OBJECT_IRON_LONGSWORD",
    "OBJECT_STEEL_LONGSWORD",
    "OBJECT_EBONY_LONGSWORD",
    "OBJECT_CRYSTAL_LONGSWORD",
    "OBJECT_LEGENDARY_LONGSWORD",
    "OBJECT_LEGENDARY_LONGSWORD_02",
    "OBJECT_IRON_KATANA",
    "OBJECT_STEEL_KATANA",
    "OBJECT_EBONY_KATANA",
    "OBJECT_CRYSTAL_KATANA",
    "OBJECT_LEGENDARY_KATANA",
    "OBJECT_IRON_HAMMER",
    "OBJECT_STEEL_HAMMER",
    "OBJECT_EBONY_HAMMER",
    "OBJECT_CRYSTAL_HAMMER",
    "OBJECT_LEGENDARY_HAMMER",
    "OBJECT_BANDITKING_HAMMER_01",
    "OBJECT_BANDITKING_HAMMER_02",
    "OBJECT_HOBBE_WEAPON_HAMMER",
    "OBJECT_HOBBE_WEAPON_HAMMER_BASIC",
    "OBJECT_IRON_WARHAMMER",
    "OBJECT_STEEL_WARHAMMER",
    "OBJECT_EBONY_WARHAMMER",
    "OBJECT_CRYSTAL_WARHAMMER",
    "OBJECT_LEGENDARY_WARHAMMER",
    "OBJECT_HAMMER_SMITH",
    "OBJECT_IRON_AXE",
    "OBJECT_STEEL_AXE",
    "OBJECT_EBONY_AXE",
    "OBJECT_CRYSTAL_AXE",
    "OBJECT_LEGENDARY_AXE",
    "OBJECT_AXE_VILLAGER_01",
    "OBJECT_AXE_VILLAGER_02",
    "OBJECT_UNDEAD_AXE_01",
    "OBJECT_UNDEAD_AXE_LIEUTENANT_01",
    "OBJECT_UNDEAD_AXE_LIEUTENANT_PROP_01",
    "OBJECT_HOBBE_WEAPON_AXE",
    "OBJECT_HOBBE_WEAPON_AXE_BASIC",
    "OBJECT_IRON_BATTLEAXE",
    "OBJECT_STEEL_BATTLEAXE",
    "OBJECT_EBONY_BATTLEAXE",
    "OBJECT_CRYSTAL_BATTLEAXE",
    "OBJECT_LEGENDARY_BATTLEAXE",
    "OBJECT_IRON_MACE",
    "OBJECT_STEEL_MACE",
    "OBJECT_EBONY_MACE",
    "OBJECT_CRYSTAL_MACE",
    "OBJECT_LEGENDARY_MACE",
    "OBJECT_IRON_BATTLEMACE",
    "OBJECT_STEEL_BATTLEMACE",
    "OBJECT_EBONY_BATTLEMACE",
    "OBJECT_CRYSTAL_BATTLEMACE",
    "OBJECT_LEGENDARY_BATTLEMACE",
    "OBJECT_SWORD_OF_AEONS",
    "OBJECT_SWORD_OF_AEONS_FOR_JACK",
    "OBJECT_SWORD_OF_AEONS_GOOD_01",
    "OBJECT_CLUB_GUARD_03",
    "OBJECT_FRYING_PAN",
    "OBJECT_FAKE_FRYING_PAN",
    "OBJECT_BANDIT_SWORD_SMALL",
    "OBJECT_BANDIT_SWORD_LONG",
    "OBJECT_BANDIT_SWORD_LIEUTENANT_01",
    "OBJECT_BANDIT_SWORD_LIEUTENANT_02",
    "OBJECT_BANDITKING_SWORD_01",
    "OBJECT_BANDITKING_SWORD_02",
    "OBJECT_UNDEAD_SWORD_01",
    "OBJECT_UNDEAD_SWORD_LIEUTENANT_01",
    "OBJECT_UNDEAD_SWORD_GENERAL_01",
    "OBJECT_UNDEAD_SWORD_ICE_HORDE_01",
    "OBJECT_NOSTRO_SWORD_01",
    "OBJECT_RIVAL_HERO_THUNDER_SWORD",
    "OBJECT_RIVAL_HERO_THUNDER_SWORD_V2",
    "OBJECT_BRIAR_ROSE_SWORD",
    "OBJECT_BRIAR_ROSE_IMPOSTER_SWORD",
    "OBJECT_WARRIOR_SWORD_LITE",
    "OBJECT_SWORD_OF_STRENGTH",
    "OBJECT_BANDIT_SWORD_MED",
    "OBJECT_SWORD_LONG",
    "OBJECT_SWORD_MED",
    "OBJECT_HERO_SWORD_MED",
    "OBJECT_SUMMONER_SWORD_01"
    "OBJECT_LEGENDARY_BROADSWORD",
    "OBJECT_LEGENDARY_BROADSWORD_02"
};

const char* szAttackStyleNames[] = {
    "NULLDEF_COMBAT_TYPE",
    "COMBAT_TYPE_TEMPLATE",
    "HOBBE_ATTACK_STYLE_BASE",
    "BANDIT_ATTACK_STYLE_BASE",
    "ICE_HORDE_ATTACK_STYLE_BASE",
    "SUMMONER_ATTACK_STYLE_BASE",
    "COMBAT_TYPE_NULL",
    "HOBBE_GRUNT_ATTACK_STYLE_BASIC",
    "HOBBE_GRUNT_ATTACK_STYLE",
    "HOBBE_LIEUTENANT_ATTACK_STYLE",
    "HOBBE_SPELLCASTER_ATTACK_STYLE_BASIC",
    "HOBBE_SPELLCASTER_ATTACK_STYLE",
    "BANDIT_GRUNT_ATTACK_STYLE",
    "BANDIT_GRUNT_ATTACK_STYLE1",
    "BANDIT_GRUNT_ATTACK_STYLE2",
    "BANDIT_GRUNT_ATTACK_STYLE3",
    "BANDIT_ARCHER_ATTACK_STYLE",
    "BANDIT_ARCHER_ATTACK_STYLE2",
    "BANDIT_ARCHER_ATTACK_STYLE3",
    "BANDIT_LEADER_ATTACK_STYLE",
    "BANDIT_LEADER_ATTACK_STYLE2",
    "BANDIT_LEADER_ATTACK_STYLE3",
    "BANDIT_ASSASSIN_ATTACK_STYLE",
    "BANDIT_LIEUTENANT_ATTACK_STYLE",
    "BOWERSTONE_GUARD_ATTACK_STYLE",
    "BOWERSTONE_GUARD_ATTACK_STYLE_OFARM",
    "BOWERSTONE_GUARD_ATTACK_STYLE_BLUE",
    "BOWERSTONE_GUARD_ATTACK_STYLE_RED",
    "BOWERSTONE_GUARD_ATTACK_STYLE_BLACK",
    "WEAKER_GUARD_ATTACK_STYLE",
    "HERO_RIVAL_01_ATTACK_STYLE",
    "HERO_BRIAR_ROSE_IMPOSTER_ATTACK_STYLE",
    "HERO_BRIAR_ROSE_BOSS_ATTACK_STYLE",
    "HERO_BRIAR_ROSE_ATTACK_STYLE",
    "HERO_BRIAR_ROSE_ATTACK_STYLE_MINION_CAMP",
    "HERO_BRIAR_ROSE_ATTACK_STYLE_FOCAL_SITES",
    "HERO_MAZE_ATTACK_STYLE",
    "HERO_MAZE_TUTORIAL_ATTACK_STYLE",
    "HERO_MAZE_TUTORIAL_ATTACK_STYLE2",
    "HERO_SCYTHE_ATTACK_STYLE",
    "BANDIT_KING_ATTACK_STYLE",
    "VILLAGER_COMBAT_TYPE_BASE",
    "VILLAGER_COMBAT_TYPE",
    "TRADER_COMBAT_TYPE",
    "VILLAGER_FISTICUFFS_COMBAT_TYPE",
    "VILLAGER_FISTICUFFS_COMBAT_TYPE_HARD",
    "VILLAGER_FISTICUFFS_COMBAT_TYPE_LEADER",
    "FEMALE_VILLAGER_COMBAT_TYPE",
    "ARMED_VILLAGER_COMBAT_TYPE",
    "ARMED_VILLAGER_COMBAT_TYPE_JOSH",
    "HERO_ATTACK_STYLE",
    "SPIRIT_ATTACK_STYLE",
    "BALVERINE_ATTACK_STYLE_EASY",
    "BALVERINE_ATTACK_STYLE",
    "WHITE_BALVERINE_ATTACK_STYLE",
    "WHITE_BALVERINE_BLOCK_ALWAYS_ATTACK_STYLE",
    "NYMPH_ATTACK_STYLE",
    "FODDER_CREATURE_ATTACK_STYLE_EASY",
    "FODDER_CREATURE_ATTACK_STYLE",
    "FODDER_CREATURE_ATTACK_STYLE_NASTY",
    "SCORPION_ATTACK_STYLE",
    "BEETLE_ATTACK_STYLE",
    "BEETLE_ATTACK_STYLE_QUEEN",
    "QUEEN_HORNET_ATTACK_STYLE",
    "TROLL_ATTACK_STYLE",
    "TROLL_ROCK_ATTACK_STYLE",
    "TROLL_EARTH_ATTACK_STYLE",
    "UNDEAD_SOLDIER_ATTACK_STYLE",
    "UNDEAD_LIEUTENANT_ATTACK_STYLE",
    "UNDEAD_GENERAL_ATTACK_STYLE",
    "ICE_HORDE_ATTACK_STYLE",
    "NOSTRO_ATTACK_STYLE",
    "NOSTRO_MINION_ATTACK_STYLE",
    "HERO_JACK_OF_BLADES_ATTACK_STYLE",
    "HERO_JACK_OF_BLADES_ATTACK_STYLE_LAST_STAND",
    "HERO_WHISPER_ATTACK_STYLE",
    "HERO_WHISPER_ATTACK_STYLE_OFARM",
    "HERO_WHISPER_TUTORIAL_ATTACK_STYLE",
    "HERO_WHISPER_TUTORIAL_VS_BLOCK_ATTACK_STYLE",
    "HERO_WHISPER_TUTORIAL_ATTACK_STYLE_DONT_ATTACK",
    "HERO_WHISPER_TUTORIAL_ATTACK_STYLE_ORCHARD",
    "HERO_THUNDER_ATTACK_STYLE",
    "SCORPION_KING_ATTACK_STYLE",
    "MINION_ATTACK_STYLE",
    "MINION_DREADWINGS_ATTACK_STYLE",
    "SCREAMER_ATTACK_STYLE",
    "DRAGON_ATTACK_STYLE",
    "SUMMONER_ATTACK_STYLE",
    "SUMMONER_INITIAL_ATTACK_STYLE"
};

const char* szHolySites[] =
{
    "NW3BronzeDoorHSP",
    "HobbeCave2HSP",
    "EndGameSecondHSP",
    "GuildArrivalHSP",
    "GuildWoodsTeleportExitHSP",
    "OrchardFarmEvilHSP",
    "OrchardFarmGoodHSP",
    "FocalSitesHSP",
    "OakvaleHSP",
    "ArenaInsideHSP",
    "arenacellshsp",
    "ArenaHSP",
    "ArenaHOHHSP",
    "BanditCampBossHSP",
    "BanditCampResHSP",
    "BanditCampHSP",
    "BanditCampPath2HSP",
    "BanditCampPathEntranceHSP",
    "BarrowFieldsHSP",
    "BordelloHSP",
    "BowerstoneJailHSP",
    "BowerstonePoshHSP",
    "BowerstoneSlumsHSP",
    "BowerstoneSlumsWarehousesHSP",
    "TavernCellarHSP",
    "starthsp",
    "DarkwoodHSP",
    "MinionCampHSP",
    "DarkwoodTraderCampHSP",
    "HookCoastGatewayHSP",
    "ChapelEvilHSP",
    "FishermanHSP",
    "FrescoDomeHSP",
    "GibbetWoodsHSP",
    "GrannysHouseHSP",
    "GraveyardHSP",
    "GraveyardCircleHSP",
    "GraveyardPathHSP",
    "GraveyardSecretPassage1HSP",
    "GWTeleportHSP",
    "Greatwood3HSP",
    "GreatwoodBanditTollHSP",
    "GreatwoodHSP",
    "GreatwoodLakeHSP",
    "GreyHallHSP",
    "GuildWoodsHSP",
    "HauntedHouseHSP",
    "HauntedHouseCellarHSP",
    "HeroDuelHSP",
    "GuildHSP",
    "TempIan01HSP",
    "HookCoastHSP",
    "KnotholeGladeHSP",
    "KrakenChamberHSP",
    "LookoutPointHSP",
    "LostBayHSP",
    "GreyBedroomHSP",
    "NorthernWastesHSP",
    "NorthernWastes2HSP",
    "NorthernWastes3HSP",
    "OakVale2HSP",
    "MemorialGardenHSP",
    "OrchardFarmHSP",
    "PicnicAreaHSP",
    "PrisonHSP",
    "HeroTortureHSP",
    "PrisonRaceStartHSP",
    "PrisonPathHSP",
    "PrisonSecretPassageHSP",
    "PrisonSecretPassageExteriorHSP",
    "PrisonTortureHSP",
    "SnowspireHSP",
    "NOVStartHSP",
    "SingingStonesHSP",
    "AmbushScamHSP",
    "Witchwood3HSP",
    "WitchWood2HSP",
    "WitchwoodCavernHSP",
    "DDBanditTollHSP",
    "DDBordelloHSP",
    "DDBarrowFieldsHSP",
    "DD_BCP",
    "DD_BF",
    "DD_DWS",
    "DD_GWBT",
    "DD_GWC",
    "DD_GH",
    "DDKnotholeHSP",
    "DDHauntedHouseHSP",
    "DDLookoutPointHSP",
    "DDNecropolisHSP",
    "DesertedFarmHSP",
    "DRAGONHSP",
    "ExecutionTreeHSP",
    "HangingTreeHSP"
};

void FableMenu::Init()
{
    sprintf(szFactionName, szFactions[0]);
}

void FableMenu::Draw()
{
    if (!m_bIsActive)
        return;

    ImGui::GetIO().MouseDrawCursor = true;

    ImGui::Begin("FableMenu by ermaccer", &m_bIsActive, ImGuiWindowFlags_MenuBar);
    {
        ImGui::SetWindowSize({ 550, 450 }, ImGuiCond_Once);
        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("Settings"))
            {
                m_bSubmenuActive[SM_Settings] = true;
                ImGui::EndMenu();
            }
            if (ImGui::BeginMenu("Help"))
            {
                if (ImGui::MenuItem("Creature List"))
                {
                    m_bSubmenuActive[SM_Creature_List] = true;
                }
                if (ImGui::MenuItem("Particle List"))
                {
                    m_bSubmenuActive[SM_Particle_List] = true;
                }
                if (ImGui::MenuItem("Object List"))
                {
                    m_bSubmenuActive[SM_Object_List] = true;
                }
                if (ImGui::BeginMenu("About"))
                {
                    ImGui::MenuItem("Version: " FABLEMENU_VERSION);
                    ImGui::MenuItem("Date: " __DATE__);
                    ImGui::EndMenu();
                }
                ImGui::EndMenu();
            }
            ImGui::EndMenuBar();
        }

        if (CMainGameComponent::Get())
        {
            if (ImGui::BeginTabBar("##tabs"))
            {
                if (ImGui::BeginTabItem("Hero"))
                {
                    DrawHeroTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Player"))
                {
                    DrawPlayerTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Creatures"))
                {
                    DrawCreaturesTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Objects"))
                {
                    DrawObjectsTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Camera"))
                {
                    DrawCameraTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("World"))
                {
                    DrawWorldTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Quest"))
                {
                    DrawQuestTab();
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Misc."))
                {
                    DrawMiscTab();
                    ImGui::EndTabItem();
                }
                ImGui::EndTabBar();
            }
        }
        else
            ImGui::TextWrapped("Not ready!");
    }
    ImGui::End();

    if (m_bSubmenuActive[SM_Settings])
        DrawSettings();

    if (m_bSubmenuActive[SM_Particle_List])
        DrawParticleList();

    if (m_bSubmenuActive[SM_Creature_List])
        DrawCreatureList();

    if (m_bSubmenuActive[SM_Object_List])
        DrawObjectList();
}

void FableMenu::Process()
{
    if (m_bCustomCameraFOV)
    {
        Nop(0xA0BEE2, 3);
    }
    else
    {
        //89 41 2C 
        Patch<char>(0xA0BEE2, 0x89);
        Patch<char>(0xA0BEE2 + 1, 0x41);
        Patch<char>(0xA0BEE2 + 2, 0x2C);
    }

    if (ms_bChangeTime)
    {
        Nop(0x6BBA58, 3);
    }
    else
    {
        //D9 56 08 
        Patch<char>(0x6BBA58, 0xD9);
        Patch<char>(0x6BBA58 + 1, 0x56);
        Patch<char>(0x6BBA58 + 2, 0x08);
    }

    if (m_bNoBodyGuardsLimit)
        Patch<char>(0xE60689 + 2, 0xFF);
    else
        Patch<char>(0xE60689 + 2, 2);
    
    if (m_bForceLoadRegion)
    {
        *(int*)NProgressDisplay::PProgressDisplay = 0;
    }
    else if (!*(int*)NProgressDisplay::PProgressDisplay)
    {
        CAProgressDisplay* progressDisplay = (CAProgressDisplay*)GameMalloc(179);
        NProgressDisplay::InitialiseProgressDisplay(progressDisplay);
    }

    // Disable fadeout
    Patch(0x4A411E, { (unsigned char)(m_bForceLoadRegion ? 0x74 : 0x75) });
    // RegionLoadScreenWasFadedOut
    Patch(0x4A415D, { (BYTE)m_bForceLoadRegion });
}

void FableMenu::DrawHeroTab()
{
    CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
    if (plr)
    {
        CThing* t = plr->GetCharacterThing();
        CTCHeroStats* stats = (CTCHeroStats*)t->GetTC(TCI_HERO_STATS);
        CTCHeroMorph* morph = (CTCHeroMorph*)t->GetTC(TCI_APPEARANCE_MORPH);
        CTCHeroExperience* exp = (CTCHeroExperience*)t->GetTC(TCI_HERO_EXPERIENCE);
        CTCLook* look = (CTCLook*)t->GetTC(TCI_LOOK);
        CTCHero* hero = (CTCHero*)t->GetTC(TCI_HERO);
        CTCHaste* haste = (CTCHaste*)t->GetTC(TCI_HASTE);
        CTCPhysicsStandard* physics = (CTCPhysicsStandard*)t->GetTC(TCI_PHYSICS);
        CTCCarrying* carrying = (CTCCarrying*)t->GetTC(TCI_CARRYING);
        if (stats)
        {
            if (ImGui::CollapsingHeader("Data"))
            {
                ImGui::InputFloat("Health", &t->m_fHealth);
                ImGui::InputFloat("Max. Health", &t->m_fMaxHealth);
                ImGui::InputInt("Will##data", &stats->m_nStamina, 0);
                ImGui::InputInt("Max. Will", &stats->m_nMaxStamina, 0);
                ImGui::InputInt("Gold", &stats->m_nMoney);
                ImGui::InputFloat("Age", &stats->m_fAge);
                if (hero)
                {
                    ImGui::Checkbox("Can Use Weapons", &hero->m_bCanUseWeapons);
                    ImGui::Checkbox("Can Use Will", &hero->m_bCanUseWill);

                    ImGui::SeparatorText("Renown");

                    ImGui::InputInt("Renown", &stats->m_nRenownTotal);

                    if (ImGui::SliderInt("Renown Level", &stats->m_nRenownLevel, 1, stats->m_nRenownMaxLevel))
                    {
                        stats->CheckForNewExpressions();
                    }

                    ImGui::InputInt("Renown Points In Level", &stats->m_nRenownPointsInLevel);
                    ImGui::InputInt("Morality", &stats->m_nMorality);

                    static int titleObjectID = 1220;
                    const char* defPrefix = "OBJECT_HERO_TITLE";

                    ImGui::SeparatorText("Title");
                    ImGui::PushItemWidth(-FLT_MIN);
                    if (ImGui::BeginCombo("##title", szObjectsList[titleObjectID]))
                    {
                        for (int n = 0; n < IM_ARRAYSIZE(szObjectsList); n++)
                        {
                            if (strncmp(szObjectsList[n], defPrefix, strlen(defPrefix)) != 0)
                            {
                                continue;
                            }

                            bool is_selected = (titleObjectID == n);
                            if (ImGui::Selectable(szObjectsList[n], is_selected))
                                titleObjectID = n;
                            if (is_selected)
                                ImGui::SetItemDefaultFocus();
                        }

                        ImGui::EndCombo();
                    }
                    ImGui::PopItemWidth();

                    if (ImGui::Button("Set Title", { -FLT_MIN, 0 }))
                    {
                        CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();
                        CCharString titleDef((char*)(szObjectsList[titleObjectID]));

                        int titleDefIndex = defManager->GetDefGlobalIndexFromName(&titleDef);
                        hero->SetTitle(titleDefIndex);
                    }
                }
                if (exp)
                {
                    ImGui::SeparatorText("Experience");

                    ImGui::InputInt("General##exp", &exp->m_nGeneralExperience, 0);
                    ImGui::InputInt("Strength##exp", &exp->m_pExperience[EXPERIENCE_STRENGTH], 0);
                    ImGui::InputInt("Will##exp", &exp->m_pExperience[EXPERIENCE_WILL], 0);
                    ImGui::InputInt("Skill##exp", &exp->m_pExperience[EXPERIENCE_SKILL], 0);

                    if (ImGui::Button("Learn All Abilities"))
                    {
                        for (int i = 1; i < MAX_NUMBER_OF_HERO_ABILITIES; i++)
                        {
                            t->LearnAbility((EHeroAbility)i, 1, -1, 1);
                        }
                    }
                    ImGui::SameLine();
                    if (ImGui::Button("Abilities To Max Level"))
                    {
                        CTCInventoryAbilities* abilities = (CTCInventoryAbilities*)t->GetTC(TCI_HERO_ABILITIES);

                        if (abilities)
                            abilities->ForceAllAbilitesToMaxLevel();
                    }
                    if (ImGui::Button("Learn All Expressions", { -FLT_MIN, 0 }))
                    {
                        for (auto expression : expressionNames)
                        {
                            CCharString expressionName((char*)expression);
                            t->LearnExpression(&expressionName, -1, 1);
                        }
                    }
                }
                if (stats)
                {
                    ImGui::SeparatorText("Misc.");

                    ImGui::InputFloat("Sound Radius Multiplier", &stats->m_fSoundRadiusMultiplier);
                    ImGui::InputFloat("Visibility Multiplier", &stats->m_fVisibilityMultiplier);
                    ImGui::InputFloat("Max Chicken Throw", &stats->m_fMaxChickenThrow);
                    ImGui::Checkbox("Had Scripted Sex", &stats->m_bHadScriptedSex);
                    ImGui::Checkbox("Had Scripted Gay Sex", &stats->m_bHadScriptedGaySex);
                }
            }
        }
        if (morph)
        {
            if (ImGui::CollapsingHeader("Morph"))
            {
                ImGui::SliderFloat("Strength", &morph->m_fStrength, 0.00f, 1.0f);
                ImGui::SliderFloat("Berserk", &morph->m_fBerserk, 0.00f, 1.0f);
                ImGui::SliderFloat("Will", &morph->m_fWill, 0.00f, 1.0f);
                ImGui::SliderFloat("Skill", &morph->m_fSkill, 0.00f, 1.0f);
                ImGui::SliderFloat("Age##morph", &morph->m_fAge, 0.00f, 1.0f);
                ImGui::SliderFloat("Alignment", &morph->m_fAlign, 0.00f, 1.0f);
                ImGui::SliderFloat("Fatness", &morph->m_fFat, 0.00f, 1.0f);

                ImGui::Checkbox("Kid", &morph->m_bKid);
                if (ImGui::Button("Update##Morph", ImVec2(-FLT_MIN, 0)))
                    morph->m_bUpdate = true;
            }
        }
        if (carrying)
        {
            if (ImGui::CollapsingHeader("Weapon"))
            {
                CThing* thingPrimarySlot = carrying->GetThingInPrimarySlot();

                if (thingPrimarySlot && thingPrimarySlot->HasTC(TCI_WEAPON))
                {
                    ImGui::SeparatorText("Augmentations");

                    CTCObjectAugmentations* augObject = (CTCObjectAugmentations*)thingPrimarySlot->GetTC(TCI_OBJECT_AUGMENTATIONS);
                    int numberOfSlots = augObject->GetNumberOfSlots();
                    static int selectedAug = 0;
                    const char* augmentationDefs[] = {
                        "OBJECT_SHARPENING_AUGMENTATION",
                        "OBJECT_PIERCING_AUGMENTATION",
                        "OBJECT_SILVER_AUGMENTATION",
                        "OBJECT_FLAME_AUGMENTATION",
                        "OBJECT_LIGHTNING_AUGMENTATION",
                        "OBJECT_EXPERIENCE_AUGMENTATION",
                        "OBJECT_HEALTH_AUGMENTATION",
                        "OBJECT_MANA_AUGMENTATION"
                    };

                    ImGui::Text("Damage Multiplier: %f", augObject->GetDamageMultiplier());
                    ImGui::Text("Expirience Multiplier: %f", augObject->GetExperienceMultiplier());

                    float childHeight = 0;

                    if (numberOfSlots > 0)
                    {
                        childHeight = (ImGui::GetFrameHeightWithSpacing() * numberOfSlots) + 5;
                    }
                    else
                    {
                        childHeight = ImGui::GetTextLineHeightWithSpacing() + ImGui::GetStyle().WindowPadding.y * 2;
                    }

                    ImGui::BeginChild("Augmention Slots", { 0, childHeight }, true);

                    if (numberOfSlots == 0)
                    {
                        ImGui::LabelText("", "No slots available");
                    }
                    else
                    {
                        for (int i = 0; i < numberOfSlots; i++)
                        {
                            CWideString name;
                            augObject->GetAugmentationNameInSlot(&name, i);

                            ImGui::LabelText("", "%s", GetUTF8String(name.GetWideStringData()));

                            ImGui::SameLine();
                            ImGui::PushID(i);
                            if (ImGui::Button("Set"))
                            {
                                CCharString augDefName((char*)augmentationDefs[selectedAug]);
                                int augIndex = CGameDefinitionManager::GetDefinitionManager()->GetDefGlobalIndexFromName(&augDefName);
                                augObject->AttachAugmentationToSlot(augIndex, i);
                            }
                            ImGui::SameLine();
                            if (ImGui::Button("Clear"))
                            {
                                augObject->RemoveAugmentationFromSlot(i);
                            }
                            ImGui::PopID();
                        }
                    }
                    ImGui::EndChild();
                    ImGui::LabelText("", "Augmentation Name");
                    ImGui::PushItemWidth(-FLT_MIN);
                    if (ImGui::BeginCombo("##augmentation", augmentationDefs[selectedAug]))
                    {
                        for (int n = 0; n < IM_ARRAYSIZE(augmentationDefs); n++)
                        {
                            bool is_selected = (selectedAug == n);
                            if (ImGui::Selectable(augmentationDefs[n], is_selected))
                                selectedAug = n;
                            if (is_selected)
                                ImGui::SetItemDefaultFocus();
                        }

                        ImGui::EndCombo();
                    }
                    ImGui::PopItemWidth();

                    if (ImGui::Button("Add New Slot", { -FLT_MIN, 0 }))
                    {
                        augObject->AddNewSlot();
                    }
                }
                else
                {
                    ImGui::Text("No selected weapon");
                }
            }
        }
        if (haste)
        {
            if (ImGui::CollapsingHeader("Haste"))
            {
                static float combatSpeed = 1.f;
                ImGui::InputFloat("Adrenaline Multiplier", &combatSpeed);
                if (ImGui::Button("Set Adrenaline", { -FLT_MIN, 0 }))
                {
                    haste->UnsetActionSpeedMultiplier(t);
                    haste->SetActionSpeedMultiplier(t, combatSpeed);
                }
                ImGui::SeparatorText("Movement");

                static const char* movementNames[] = {
                    "Slow Walk",
                    "Walk",
                    "Jog",
                    "Run",
                    "Roll"
                };
                for (int i = 0; i < TOTAL_MOVEMENT_TYPES - 1; i++)
                {
                    float& speed = *(float*)((int)t + 0x18C + (i * sizeof(int)));

                    ImGui::InputFloat(movementNames[i], &speed);
                }

                static int movementType = -1;

                ImGui::Separator();
                ImGui::Text("Movement Type:");
                ImGui::Separator();

                ImGui::RadioButton("Default", &movementType, DEFAULT_MOVEMENT);
                ImGui::SameLine();
                ImGui::RadioButton("Walk Movement", &movementType, WALK_MOVEMENT);
                ImGui::SameLine();
                ImGui::RadioButton("Jog Movement", &movementType, JOG_MOVEMENT);
                ImGui::SameLine();
                ImGui::RadioButton("Run Movement", &movementType, RUN_MOVEMENT);

                ChangeMovementTypePatch((EMovementType)movementType);
            }
        }
        if (ImGui::CollapsingHeader("Spell Data"))
        {
            int& curSummonCreature = *(int*)(0x138306C);
            ImGui::TextWrapped("Current Summon Creature ID");
            ImGui::SameLine();
            ShowHelpMarker("You can get desired creature ID from World->Creatures section.");
            ImGui::PushItemWidth(-FLT_MIN);
            ImGui::InputInt("##creaturesumid", &curSummonCreature);
            ImGui::PopItemWidth();
            ImGui::Separator();

        }
        if (ImGui::CollapsingHeader("Input"))
        {
            if (ImGui::Button("Disable Input", { -FLT_MIN, 0 }))
            {
                if (plr)
                    plr->DisableInput();
            }
            if (ImGui::Button("Enable Input", { -FLT_MIN, 0 }))
            {
                if (plr)
                    plr->EnableInput();
            }
        }
        if (ImGui::CollapsingHeader("Appearance"))
        {
            DrawAppearanceCollapse(t);
        }
        if (physics)
        {
            if (ImGui::CollapsingHeader("Physics"))
            {
                DrawPhysicsCollapse(t);
                ImGui::Checkbox("Enable Player Collision", NGlobalConsole::EnableHeroThingCollision);
            }
        }
    }
}

void FableMenu::DrawPlayerTab()
{
    CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();

    ImGui::SetWindowFontScale(0.85f);
    ImGui::Text("Player Number: %d", plr->m_dNumber);
    ImGui::SameLine();
    ImGui::Text("Current Mode: %d", plr->GetCurrentMode());
    ImGui::SetWindowFontScale(1.0f);
    ImGui::Separator();

    if (ImGui::CollapsingHeader("Modes"))
    {
        std::list<enum EPlayerMode> playerModes = plr->m_listPlayerModes;
        int removeID = 0;

        for (EPlayerMode mode : playerModes)
        {
            ImGui::LabelText("", szPlayerModeNames[mode]);
           
            if (playerModes.size() > 1)
            {
                ImGui::SameLine();
                ImGui::PushID(removeID);
                if (ImGui::Button("Remove"))
                {
                    plr->RemoveMode(mode);
                }
                ImGui::PopID();
                removeID++;
            }
        }

        static int modeID = 0;

        if (ImGui::BeginCombo("Mode Name", szPlayerModeNames[modeID]))
        {
            for (int n = 0; n < IM_ARRAYSIZE(szPlayerModeNames); n++)
            {
                bool is_selected = (modeID == n);
                if (ImGui::Selectable(szPlayerModeNames[n], is_selected))
                    modeID = n;
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }

        if (ImGui::Button("Add Mode"))
        {
            plr->AddMode((EPlayerMode)modeID, 0);
        }
        ImGui::Separator();

        static bool aggressiveMode;

        if (ImGui::Checkbox("Aggressive Mode", &aggressiveMode))
        {
            if (!*FGlobals::GUsePassiveAggressiveMode)
            {
                *FGlobals::GUsePassiveAggressiveMode = 1;
            }

            plr->SetAgressiveMode(aggressiveMode);
        }
    }
    if (ImGui::CollapsingHeader("Actions"))
    {
        DrawActionsCollapse(plr->GetCharacterThing());
    }
    if (ImGui::CollapsingHeader("Character Swap"))
    {
        static bool manualInput;
        static bool uninitPlayerCharacter = true;
        static bool playerCharacterDefinitionError;
        static int characterID;
        static char selectedPlayerDefManually[256];

        if (playerCharacterDefinitionError)
        {
            ImGui::TextColored({ 1, 0, 0, 1 }, "Error: undefined character definition name");
        }

        static const char* playerCharacterDefs[] =
        {
            "CREATURE_HERO",
            "CREATURE_HERO_BALVERINE",
            "CREATURE_HERO_TRAINING",
            "CREATURE_HERO_CHILD"
        };

        if (!manualInput)
        {
            if (ImGui::BeginCombo("Creature Definition", playerCharacterDefs[characterID]))
            {
                for (int n = 0; n < IM_ARRAYSIZE(playerCharacterDefs); n++)
                {
                    bool is_selected = (characterID == n);
                    if (ImGui::Selectable(playerCharacterDefs[n], is_selected))
                        characterID = n;
                    if (is_selected)
                        ImGui::SetItemDefaultFocus();
                }
                ImGui::EndCombo();
            }
        }
        else
        {
            ImGui::TextWrapped("NOTE: Enter a definition specific to hero, otherwise it may cause crashes.");
            ImGui::InputText("Creature Definition", selectedPlayerDefManually, sizeof(selectedPlayerDefManually));
        }

        ImGui::Checkbox("Manual Input##mode", &manualInput);
        ImGui::SameLine();
        ImGui::Checkbox("Uninit Character", &uninitPlayerCharacter);
        ImGui::InputFloat3("Repawn Position", &FGlobals::GOverridePlayerStartPos->X);
        if (ImGui::Button("Get Player Position"))
        {
            *FGlobals::GOverridePlayerStartPos = *plr->GetCharacterThing()->GetPosition();
        }
        if (ImGui::Button("Respawn Hero", { -FLT_MIN, 0 }))
        {
            if (!*FGlobals::GOverridePlayerStartPosFromConsole)
            {
                *FGlobals::GOverridePlayerStartPosFromConsole = 1;
            }

            *FGlobals::GUseRubbishMovementMethod = characterID != 1;

            CCharString defName(manualInput ? selectedPlayerDefManually : (char*)playerCharacterDefs[characterID]);

            if (!CGameDefinitionManager::GetDefinitionManager()->GetDefGlobalIndexFromName(&defName))
            {
                playerCharacterDefinitionError = true;
                return;
            }
            else
            {
                playerCharacterDefinitionError = false;
            }

            if (uninitPlayerCharacter)
            {
                plr->UninitCharacter();
            }

            Patch(0x48A0A6, { { (unsigned char)((BYTE)!uninitPlayerCharacter + 0x74) } });

            plr->InitCharacterAs(&defName);
            plr->AddMode(PLAYER_MODE_VIEW_HERO, 0);
        }
    }
}

void FableMenu::DrawCreaturesTab()
{
    CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
    CThing* playerCharacter = plr->GetCharacterThing();
    CThingSearchTools* search = CMainGameComponent::Get()->GetWorld()->GetThingSearchTools();
    std::list<CThing*> regionCreatures = *search->PeekTypeList(1);

    static char creatureName[512] = { };
    static CVector creaturePosition = {};
    static int creatureId;
    static bool advanced;
    static bool playerFollower;
    ImGui::SeparatorText("Create Entity");
    ImGui::TextWrapped("Spawn Position (X | Y | Z)");
    ImGui::PushItemWidth(-FLT_MIN);
    ImGui::InputFloat3("", &creaturePosition.X);
    ImGui::PopItemWidth();

    if (ImGui::Button("Get Player Position", { -FLT_MIN, 0 }))
    {
        if (plr)
            creaturePosition = *playerCharacter->GetPosition();
    }
    ImGui::Text("Creature Name");
    ImGui::SameLine();
    ShowHelpMarker("Creature list is available in Help menu.");
    ImGui::PushItemWidth(-FLT_MIN);
    ImGui::InputText("##creature", creatureName, sizeof(creatureName));
    ImGui::PopItemWidth();

    if (ImGui::Button("Get ID", { -FLT_MIN, 0 }))
    {
        CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();
        CCharString ccsCreatureName((char*)creatureName);
        creatureId = defManager->GetDefGlobalIndexFromName(&ccsCreatureName);
    }

    ImGui::InputInt("Creature ID", &creatureId);

    if (!creatureId)
        ImGui::TextColored({ 1,0,0,1 }, "Error: Invalid creature ID");
    else
    {
        if (ImGui::Button("Spawn Creature", { -FLT_MIN, 0 }))
        {
            CThing* creature = CreateCreature(creatureId, &creaturePosition, 0);
            if (creature && advanced)
            {
                if (plr)
                {
                    CTCEnemy* enemy = (CTCEnemy*)creature->GetTC(TCI_ENEMY);
                    CCharString faction(szFactionName);
                    enemy->SetFaction(&faction);

                    if (playerFollower)
                    {
                        CTCRegionFollower* rf = (CTCRegionFollower*)plr->GetCharacterThing()->GetTC(TCI_REGION_FOLLOWER);
                        enemy->AddAlly(plr->GetCharacterThing());
                        CIntelligentPointer ptr(creature);

                        rf->AddFollower(*ptr);
                    }
                    else
                    {
                        if (strcmp(szFactionName, "FACTION_HERO") == 0)
                            enemy->AddAlly(plr->GetCharacterThing());
                    }
                }

            }
        }
    }
    ImGui::Checkbox("Advanced Settings", &advanced);
    if (advanced)
    {
        ImGui::Separator();
        ImGui::InputInt("Owner ID##creatures", &creatureId);

        ImGui::TextWrapped("Faction");
        ImGui::PushItemWidth(-FLT_MIN);
        if (ImGui::BeginCombo("##faclist", szFactionName))
        {
            for (int n = 0; n < IM_ARRAYSIZE(szFactions); n++)
            {
                bool is_selected = (szFactionName == szFactions[n]);
                if (ImGui::Selectable(szFactions[n], is_selected))
                    sprintf(szFactionName, szFactions[n]);
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        ImGui::Checkbox("Create as player follower", &playerFollower);
        ImGui::SameLine();
        ShowHelpMarker("Creature will follow and defend player, this only works with some creatures (usually those that are simple enough, eg. swords or spirits)");
    }
    ImGui::Separator();
    if (ImGui::CollapsingHeader("Region Creatures"))
    {
        static std::list<CThing*> filteredCreatures;
        static std::vector<char> creatureDataWindowsOpen;
        static bool displayCreatureFilterOptions;
        static int creatureType = 0;

        std::list<CThing*> creatureList;
        filteredCreatures.clear();

        size_t creaturesInLocation = regionCreatures.size();
        ImGui::Text("Creatures In Location: %d", creaturesInLocation);
        ImGui::Separator();

        int i = 0;
        if (!displayCreatureFilterOptions || creatureType == -1)
        {
            creatureList = regionCreatures;
        }
        else
        {
            for (auto it = regionCreatures.begin(); it != regionCreatures.end(); ++it, ++i)
            {
                CThing* a = *it;
                switch (creatureType)
                {
                case 0:
                    if (a->GetCreatureType() == NOT_HUMAN)
                        filteredCreatures.push_back(a);
                    break;
                case 1:
                    if (a->GetCreatureType() == HUMAN_CHILD)
                        filteredCreatures.push_back(a);
                    break;
                case 2:
                    if (a->GetCreatureType() == HUMAN_ADULT)
                        filteredCreatures.push_back(a);
                    break;
                case 3:
                    if (a->GetCreatureType() == HUMAN_ELDERLY)
                        filteredCreatures.push_back(a);
                    break;
                case 4:
                    if (a->HasTC(TCI_GUARD))
                        filteredCreatures.push_back(a);
                    break;
                case 5:
                    if (a->HasTC(TCI_BANDIT))
                        filteredCreatures.push_back(a);
                    break;
                case 6:
                    if (a->HasTC(TCI_VILLAGE_MEMBER))
                        filteredCreatures.push_back(a);
                    break;
                case 7:
                    if (a->HasTC(TCI_SHOP_KEEPER))
                        filteredCreatures.push_back(a);
                    break;
                case 8:
                    if (a->HasTC(TCI_HERO))
                        filteredCreatures.push_back(a);
                    break;
                default:
                    break;
                }
            }
            creatureList = filteredCreatures;
        }

        ImGui::Checkbox("Creature Filter", &displayCreatureFilterOptions);
        if (displayCreatureFilterOptions)
        {
            ImGui::RadioButton("All", &creatureType, -1);
            ImGui::SameLine();
            ImGui::RadioButton("Not Humans", &creatureType, 0);
            ImGui::SameLine();
            ImGui::RadioButton("Children", &creatureType, 1);
            ImGui::RadioButton("Adults", &creatureType, 2);
            ImGui::SameLine();
            ImGui::RadioButton("Elderly", &creatureType, 3);
            ImGui::SameLine();
            ImGui::RadioButton("Guards", &creatureType, 4);
            ImGui::RadioButton("Bandits", &creatureType, 5);
            ImGui::SameLine();
            ImGui::RadioButton("Traders", &creatureType, 7);
            ImGui::SameLine();
            ImGui::RadioButton("Heroes", &creatureType, 8);
        }

        if (ImGui::Button("Kill All"))
        {
            for (auto creature : creatureList)
            {
                creature->Kill(true);
            }
        }

        ImGui::SameLine();

        if (ImGui::Button("Teleport All"))
        {
            for (auto creature : creatureList)
            {
                CTCPhysicsStandard* physics = (CTCPhysicsStandard*)creature->GetTC(TCI_PHYSICS);
                physics->SetPosition(playerCharacter->GetPosition());
            }
        }
        ImGui::Separator();

        size_t creatureCount = creatureList.size();
        creatureDataWindowsOpen.resize(creatureCount, false);

        if (creatureCount != 0)
        {
            int i = 0;

            for (CThing* creature : creatureList)
            {
                CDefString* defName = creature->GetDefName();
                CCharString buffer;
                CDefString::GetString(&buffer, defName->m_nTablePos);
                char* charDefName = buffer.GetStringData();
                const char* thingName = (const char*)charDefName;

                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.15f, 0.75f, 0.35f, 1.0f));
                ImGui::PushItemWidth(420.f);
                ImGui::LabelText("", thingName);
                ImGui::PopStyleColor();
                ImGui::PopItemWidth();
                ImGui::SameLine();
                char* isOpen = &creatureDataWindowsOpen[i];
                ImGui::PushID(i);
                if (ImGui::Button("Open Data"))
                {
                    *isOpen = !(*isOpen);
                }
                ImGui::PopID();

                char windowTitle[256];
                snprintf(windowTitle, sizeof(windowTitle), "%s##%d", thingName, i);

                if (*isOpen)
                {
                    DrawCreatureData(windowTitle, creature, (bool*)isOpen);
                }
                i++;
            }
        }
        else
        {
            ImGui::TextColored({ 1,0,0,1 }, "No creatures found");
        }
    }
    if (ImGui::CollapsingHeader("Village"))
    {
        ImGui::Separator();
        ImGui::Text("Village Members");
        ImGui::Separator();

        CTCVillage* village = nullptr;

        for (CThing* creature : regionCreatures)
        {
            if (creature->HasTC(TCI_VILLAGE_MEMBER))
            {
                CTCVillageMember* member = (CTCVillageMember*)creature->GetTC(TCI_VILLAGE_MEMBER);

                if (member)
                {
                    village = member->GetPVillage();
                    break;
                }
            }
        }

        if (village == nullptr)
        {
            ImGui::TextColored({ 1, 0, 0, 1 }, "No Village");
            return;
        }

        static char villagerDef[256];
        static bool disableVillager = true;
        static bool toggleGuardVillagers = true;
        static bool villageLimbo = true;

        ImGui::InputText("Villager Name", villagerDef, sizeof(villagerDef));

        if (ImGui::Button((const char*)(disableVillager ? "Disable Villager" : "Enable Villager")))
        {
            CCharString defName(villagerDef);
            village->EnableVillagerDefTypes(villagerDef, &defName);

            disableVillager = !disableVillager;
        }
        ImGui::SameLine(); ShowHelpMarker("Disables creature by definition, works only for village member.");
        if (ImGui::Button("Clear Crimes", { -FLT_MIN, 0 }))
        {
            village->ClearCrimes();
        }
        if (ImGui::Button("Village Limbo", { -FLT_MIN, 0 }))
        {
            village->SetVillageLimbo(villageLimbo);
            //villageLimbo = !villageLimbo;
        }
        ImGui::Separator();
        if (ImGui::Checkbox("Enable Guards", &toggleGuardVillagers))
        {
            village->EnableGuards(toggleGuardVillagers);
        }
        ImGui::Text("Gay Villagers: %d", village->GetNumberOfGayVillagers());
    }
}

void FableMenu::DrawObjectsTab()
{
    static CVector position = {};
    static int objectId = 0;
    static char objectName[512] = { };
    CPlayer* player = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
    ImGui::SeparatorText("Create Object");
    ImGui::TextWrapped("Spawn Position (X | Y | Z)");
    ImGui::PushItemWidth(-FLT_MIN);
    ImGui::InputFloat3("", &position.X);
    ImGui::PopItemWidth();
    if (ImGui::Button("Get Player Position", { -FLT_MIN, 0 }))
    {
        if (player)
            position = *player->GetCharacterThing()->GetPosition();
    }

    ImGui::Text("Object Name");
    ImGui::SameLine();
    ShowHelpMarker("Object list is available in Help menu.");
    ImGui::PushItemWidth(-FLT_MIN);
    ImGui::InputText("##object", objectName, sizeof(objectName));
    ImGui::PopItemWidth();

    if (ImGui::Button("Get ID", { -FLT_MIN, 0 }))
        objectId = GetThingID(objectName);

    ImGui::InputInt("Object ID", &objectId);

    if (objectId <= 0)
        ImGui::TextColored({ 1,0,0,1 }, "Error: Invalid object ID");
    else
        if (ImGui::Button("Create Object"))
            CreateThing(objectId, &position, 0, 0, 0, "newObj");
    ImGui::Separator();
    if (ImGui::CollapsingHeader("Buildings"))
    {
        static std::vector<char> objectDataWindowsOpen;
        CThingSearchTools* searchTools = CMainGameComponent::Get()->GetWorld()->GetThingSearchTools();
        std::list<CThing*> regionBuildings = *searchTools->PeekTypeList(3);
        size_t buildingCount = regionBuildings.size();
        CTCHeroStats* heroStats = (CTCHeroStats*)player->GetCharacterThing()->GetTC(TCI_HERO_STATS);
        int shopsCount = 0;
        objectDataWindowsOpen.resize(buildingCount, false);

        ImGui::Text("Shops Owned: %d", heroStats->m_nNumberOfShopsOwned);
        ImGui::Text("Houses Owned: %d", heroStats->m_nNumberOfHousesOwned);
        for (auto building : regionBuildings)
        {
            if (building->HasTC(TCI_SHOP))
                shopsCount++;
        }
        ImGui::Text("Shops In Region: %d", shopsCount);
        if (ImGui::Button("Unlock All Doors"))
        {
            std::list<CThing*> allObjects = *searchTools->PeekTypeList(5);
            for (auto object : allObjects)
            {
                CTCDoor* door = (CTCDoor*)object->GetTC(TCI_DOOR);
                if (door)
                {
                    door->Open((CTCAnimationComplex*)1);
                }
            }
        }
        if (ImGui::Button("Evict All"))
        {
            for (auto building : regionBuildings)
            {
                CTCBuyableHouse* buyable = (CTCBuyableHouse*)building->GetTC(TCI_BUYABLE_HOUSE);

                if (buyable)
                {
                    buyable->Evict();
                }
            }
        }
        ImGui::SameLine();
        if (ImGui::Button("Own All Buildings"))
        {
            for (auto building : regionBuildings)
            {
                if (building->HasTC(TCI_BUYABLE_HOUSE))
                {
                    CTCBuyableHouse* buyable = (CTCBuyableHouse*)building->GetTC(TCI_BUYABLE_HOUSE);
                    buyable->SetOwnedByPlayer(heroStats);
                }
            }
        }
        ImGui::Separator();
        if (buildingCount != 0)
        {
            int i = 0;
            for (CThing* object : regionBuildings)
            {
                CDefString* defName = object->GetDefName();
                CCharString buffer;
                CDefString::GetString(&buffer, defName->m_nTablePos);
                char* charDefName = buffer.GetStringData();
                const char* thingName = (const char*)charDefName;
                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.15f, 0.75f, 0.35f, 1.0f));
                ImGui::LabelText("", thingName);
                ImGui::PopStyleColor();
                ImGui::SameLine();
                char* isOpen = &objectDataWindowsOpen[i];
                ImGui::PushID(i);
                if (ImGui::Button("Open Data"))
                {
                    *isOpen = !(*isOpen);
                }
                ImGui::PopID();

                char windowTitle[256];
                snprintf(windowTitle, sizeof(windowTitle), "%s##%d", thingName, i);

                if (*isOpen)
                {
                    FableMenu::DrawObjectData(windowTitle, object, (bool*)isOpen);
                }
                i++;
            }
        }
    }

    if (ImGui::CollapsingHeader("Region Objects"))
    {
        static std::vector<char> objectDataWindowsOpen;
        CThingSearchTools* searchTools = CMainGameComponent::Get()->GetWorld()->GetThingSearchTools();
        std::list<CThing*> allObjects = *searchTools->PeekTypeList(5);
        size_t objectCount = allObjects.size();
        objectDataWindowsOpen.resize(objectCount, false);
        static ImGuiTextFilter filter;
        static bool canTakeStockItems;
        if (ImGui::Checkbox("Can Take Stock Items", &canTakeStockItems))
        {
            std::list<CThing*> stockItems;
            for (CThing* object : allObjects)
            {
                if (object->HasTC(TCI_STOCK_ITEM))
                    stockItems.push_back(object);
            }
            if (canTakeStockItems)
            {
                for (CThing* stockItem : stockItems)
                {
                    CCharString onActionUse((char*)"CTCActionUsePutInInventory");
                    stockItem->AddTC(&onActionUse, 0, 0);
                }
                Patch<char>(0x773538, 0x75);
            }
            else
            {
                for (CThing* stockItem : stockItems)
                {
                    if (stockItem->HasTC(TCI_ON_ACTION_USE))
                        stockItem->RemoveTC(TCI_ON_ACTION_USE);
                }
                Patch<char>(0x773538, 0x74);
            }
        }
        ImGui::Text("Search");
        ImGui::PushItemWidth(-FLT_MIN);
        filter.Draw("##rolist");
        ImGui::PopItemWidth();
        ImGui::BeginChild("##regionObjectsList", { 0, -ImGui::GetFrameHeightWithSpacing() + 200 }, true);
        if (objectCount != 0)
        {
            int i = 0;
            for (CThing* object : allObjects)
            {
                CDefString* defName = object->GetDefName();
                CCharString buffer;
                CDefString::GetString(&buffer, defName->m_nTablePos);
                char* charDefName = buffer.GetStringData();
                const char* thingName = (const char*)charDefName;
                if (filter.PassFilter(thingName))
                {
                    ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.15f, 0.75f, 0.35f, 1.0f));
                    ImGui::LabelText("", thingName);
                    ImGui::PopStyleColor();
                    ImGui::SameLine();
                    char* isOpen = &objectDataWindowsOpen[i];
                    ImGui::PushID(i);
                    if (ImGui::Button("Open Data"))
                    {
                        *isOpen = !(*isOpen);
                    }
                    ImGui::PopID();

                    char windowTitle[256];
                    snprintf(windowTitle, sizeof(windowTitle), "%s##%d", thingName, i);

                    if (*isOpen)
                    {
                        FableMenu::DrawObjectData(windowTitle, object, (bool*)isOpen);
                    }
                    ++i;
                }
            }
        }
        ImGui::EndChild();
    }
}

void FableMenu::DrawAppearanceCollapse(CThing* thing)
{
    static int alpha = 255;
    ImGui::SliderInt("Alpha", &alpha, 0, 255);

    static ImVec4 meshColor = { 1.0, 1.0, 1.0, 1.0 };
    ImGui::ColorEdit3("Color", (float*)&meshColor);

    static ImVec4 highlightColor = { 1.0, 1.0, 1.0, 1.0 };
    ImGui::ColorEdit4("Highlight", (float*)&highlightColor);

    CRGBAFloat mcolor(meshColor.x, meshColor.y, meshColor.z, meshColor.w);
    CRGBAFloat hcolor(highlightColor.x, highlightColor.y, highlightColor.z, highlightColor.w);

    static float scale = 1.0f;

    CTCGraphicAppearance* ga = (CTCGraphicAppearance*)thing->GetTC(TCI_GRAPHIC_APPEARANCE_NEW);

    ImGui::InputFloat("Scale", &scale);

    if (ImGui::Button("Update##Appearance", { -FLT_MIN, 0 }))
    {
        if (ga)
        {
            ga->SetAlpha(alpha);
            ga->SetColor(&mcolor.GetUINTColor(), ga);
            ga->SetAsHighlighted(5, 0, &hcolor.GetUINTColor(), 1, 1, MESH_EFFECT_PRIORITY_SHIELD_SPELL_SPECIAL_OVERRIDE, ga);
            ga->SetScale(scale);
        }
    }

    if (ImGui::Button("Clear Highlight", { -FLT_MIN, 0 }))
    {
        ga->ClearHighlighted(ga);
    }

    CTCLight* light = (CTCLight*)thing->GetTC(TCI_LIGHT);

    if(light)
    { 
        ImGui::SeparatorText("Light");
        static float lightFlicker = 1.0f;
        static float innerRadius = 1.0f;
        static float outerRadius = 10.0f;
        static ImVec4 lightColor = { 1.0, 1.0, 1.0, 1.0 };

        ImGui::InputFloat("Inner Radius", &innerRadius);
        ImGui::InputFloat("Outer Radius", &outerRadius);

        ImGui::ColorEdit3("Light Color", (float*)&lightColor);

        CRGBAFloat lcolor = { lightColor.x, lightColor.y, lightColor.z, lightColor.w };

        if (ImGui::Checkbox("Enable Light", &light->m_bActive))
        {
            light->SetOverridden(1);
            light->SetColour(&lcolor.GetUINTColor());
            light->SetInnerRadius(innerRadius);
            light->SetOuterRadius(outerRadius);
            light->SetActive(light->m_bActive);
        }
    }
}

void DrawAnimationCollapse(CThing* thing)
{
    static char animInputName[256] = {};
    static bool useInput;
    static int selectedAnimation;
    static bool stayOnLastFrame;
    static bool useMovement;
    static bool addAsQeuedAction;
    static bool waitForAnimToFinish;
    static bool usePhysics;
    static bool allowLooking;
    static bool looping;
    static int numLoops;
    static int animPriority;

    ImGui::SeparatorText("Animations");
    if (!useInput)
    {
        if (ImGui::BeginCombo("##Animations", szCreatureAnimations[selectedAnimation]))
        {
            size_t arraySize = sizeof(szCreatureAnimations) / sizeof(szCreatureAnimations[0]);

            for (int i = 0; i < arraySize; i++)
            {
                bool isSelected = (selectedAnimation == i);

                if (ImGui::Selectable(szCreatureAnimations[i], isSelected))
                {
                    selectedAnimation = i;

                    if (isSelected)
                    {
                        ImGui::SetItemDefaultFocus();
                    }
                }
            }
            ImGui::EndCombo();
        }
    }
    else
    {
        ImGui::InputText("##anim", animInputName, sizeof(animInputName));
    }
    ImGui::SameLine();
    ImGui::Text("Animation Name");
    ImGui::Checkbox("Manual Input##anim", &useInput);
    ImGui::SameLine();
    ImGui::Checkbox("Looping", &looping);
    if (looping)
    {
        ImGui::InputInt("Number Loops", &numLoops);
    }
    ImGui::Checkbox("Use Physics", &usePhysics);
    ImGui::SameLine();
    ImGui::Checkbox("Use Movement", &useMovement);
    ImGui::Checkbox("Allow Looking", &allowLooking);
    ImGui::SameLine();
    ImGui::Checkbox("Stay In Last Frame", &stayOnLastFrame);
    ImGui::Checkbox("Add As Qeued Action", &addAsQeuedAction);
    ImGui::SameLine();
    ImGui::Checkbox("Wait For Anim To Finish", &waitForAnimToFinish);
    ImGui::InputInt("Animation Priority", &animPriority);

    if (ImGui::Button("Play Animation"))
    {
        CTCScriptedControl* scriptControl = (CTCScriptedControl*)thing->GetTC(TCI_SCRIPTED_CONTROL);
        CTCScriptedControl::CActionBase* animation = (CTCScriptedControl::CActionBase*)GameMalloc(180);
        char* animationName = nullptr;
        if (!useInput)
            animationName = (char*)szCreatureAnimations[selectedAnimation];
        else
            animationName = animInputName;
        CCharString name(animationName);
        new CActionPlayAnimation(animation, &name, stayOnLastFrame, looping, numLoops, useMovement, animPriority, addAsQeuedAction, waitForAnimToFinish, usePhysics, false, allowLooking);
        scriptControl->AddAction(animation);
    }
}

void FableMenu::DrawActionsCollapse(CThing* thing)
{
    DrawAnimationCollapse(thing);
    if (ImGui::Button("Finish Current Action"))
    {
        thing->FinishCurrentAction();
    }
    ImGui::SeparatorText("Carrying");
    static bool destroyDropped = true;
    ImGui::Checkbox("Destroy Dropped Weapon", &destroyDropped);
    if (ImGui::Button("Take Crate"))
    {
        FableMenu::TakeActionItem(thing, (char*)"OBJECT_CRATE_SMALL_EXPLOSIVE_01_USABLE");
    }
    ImGui::SameLine();
    if (ImGui::Button("Drop Carried"))
    {
        // Patch to make it work for swords
        Patch<char>(0x845D86 + 1, 0x84);

        CCreatureAction_DropWeapon* drop = (CCreatureAction_DropWeapon*)GameMalloc(100);
        new CCreatureAction_DropWeapon(drop, thing);

        thing->SetCurrentAction((CTCBase*)drop);

        CTCCarrying* carrying = (CTCCarrying*)thing->GetTC(TCI_CARRYING);

        if (carrying)
        {
            CThing* primarySlotThing = carrying->GetThingInPrimarySlot();

            if (destroyDropped && primarySlotThing)
            {
                if (primarySlotThing->HasTC(TCI_INVENTORY_ITEM))
                {
                    CTCInventoryItem* item = (CTCInventoryItem*)primarySlotThing->GetTC(TCI_INVENTORY_ITEM);
                    item->RemoveFromInventory();
                }
            }
        }
    }
}

void FableMenu::DrawPhysicsCollapse(CThing* thing)
{
    ImGui::SeparatorText("X | Y | Z");
    CTCPhysicsStandard* physics = (CTCPhysicsStandard*)thing->GetTC(TCI_PHYSICS);
    ImGui::InputFloat3("Position", &physics->GetPosition()->X);
    if (thing->HasTC(TCI_HERO_STATS))
        ImGui::InputFloat3("Velocity", &physics->GetVelocity()->X);
    ImGui::Separator();
    ImGui::InputFloat3("Forward", &physics->GetRHSet()->Forward.X);
    ImGui::InputFloat3("Up", &physics->GetRHSet()->Up.X);
    ImGui::Separator();

    bool isPhysicsEnabled = physics->IsPhysicsEnabled();
    bool isGravityEnabled = physics->IsGravityEnabled();

    if (ImGui::Checkbox("Enable Physics", &isPhysicsEnabled))
    {
        physics->EnablePhysics(isPhysicsEnabled);
    }

    if (ImGui::Checkbox("Enable Gravity", &isGravityEnabled))
    {
        physics->EnableGravity(isGravityEnabled);
    }
}

void FableMenu::DrawObjectData(const char* windowTitle, CThing* object, bool* isOpen)
{
    if (!object)
    {
        *isOpen = false;
    }
    if (*isOpen)
    {
        ImGui::SetNextWindowPos({ 700,200 }, ImGuiCond_FirstUseEver);
        ImGui::SetNextWindowSize({ 600,600 }, ImGuiCond_FirstUseEver);
        if (ImGui::Begin(windowTitle, isOpen));
        {
            CTCBuyableHouse* buyableHouse = (CTCBuyableHouse*)object->GetTC(TCI_BUYABLE_HOUSE);

            ImGui::SeparatorText("Object");
            if (ImGui::Button("Show"))
            {
                object->SetInLimbo(0);
            }
            ImGui::SameLine();
            ImGui::Text("/");
            ImGui::SameLine();
            if (ImGui::Button("Hide"))
            {
                object->SetInLimbo(1);
            }
            if (object->HasTC(TCI_STOCK_ITEM) || object->HasTC(TCI_HERO_RECEIVE_ITEMS))
            {
                if (ImGui::Button("Add To Inventory"))
                {
                    CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
                    CCreatureAction_AddRealObjectToInventory* addToInventory = (CCreatureAction_AddRealObjectToInventory*)GameMalloc(180);
                    CCreatureAction_AddRealObjectToInventory::CCreatureAction_AddRealObjectToInventory(addToInventory, playerCharacter, object);
                    playerCharacter->SetCurrentAction((CTCBase*)addToInventory);
                }
            }
            if (ImGui::Button("Teleport To Player Position"))
            {
                CTCPhysicsStandard* objectPhysics = (CTCPhysicsStandard*)object->GetTC(TCI_PHYSICS);
                CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
                objectPhysics->SetPosition(playerCharacter->GetPosition());
                objectPhysics->EnablePhysics(0);
            }
            ImGui::SameLine();
            ShowWarnMarker("There is a risk of game crash after using this feature on buildings.");
            if (buyableHouse)
            {
                ImGui::SeparatorText("Houses Features");
                bool isUsed = buyableHouse->isBuildingBeingUsed(0);
                ImGui::Text("House Occupied: %s", isUsed ? "Yes" : "No");

                if (ImGui::Button("Remove Owner"))
                {
                    buyableHouse->Evict();
                }
                ImGui::SameLine();

                if (ImGui::Button("Set Rented"))
                {
                    buyableHouse->SetRented(1);
                }

                if (ImGui::Button("Set Owned By Player"))
                {
                    CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
                    CTCHeroStats* heroStats = (CTCHeroStats*)playerCharacter->GetTC(TCI_HERO_STATS);
                    if(heroStats)
                        buyableHouse->SetOwnedByPlayer(heroStats);
                }
            }
            ImGui::Separator();
            if (ImGui::CollapsingHeader("Physics"))
            {
                DrawPhysicsCollapse(object);
            }
            if (ImGui::CollapsingHeader("Appearance"))
            {
                DrawAppearanceCollapse(object);
            }
            ImGui::End();
        }
    }
}

void FableMenu::DrawCreatureData(const char* windowTitle, CThing* creature, bool* isOpen)
{
    if (!creature)
    {
        *isOpen = false;
    }
    if (*isOpen)
    {
        ImGui::SetNextWindowPos({ 700,200 }, ImGuiCond_FirstUseEver);
        ImGui::SetNextWindowSize({ 600,600 }, ImGuiCond_FirstUseEver);

        if (ImGui::Begin(windowTitle, isOpen));
        {
            ImGui::SeparatorText("Character Thing");
            ImGui::InputFloat("Health", &creature->m_fHealth);
            if (ImGui::Button("Kill"))
            {
                creature->Kill(true);
                *isOpen = false;
            }
            ImGui::SameLine();
            if (ImGui::Button("Teleport To Player Position"))
            {
                CTCPhysicsStandard* creaturePhysics = (CTCPhysicsStandard*)creature->GetTC(TCI_PHYSICS);
                CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
                creaturePhysics->SetPosition(playerCharacter->GetPosition());
            }
            if (ImGui::Button("Finish Current Action"))
            {
                creature->FinishCurrentAction();
            }
            ImGui::SameLine();
            if (ImGui::Button("Clear Queued Actions"))
            {
                creature->ClearQueuedActions();
            }
            ImGui::SeparatorText("Limbo");
            if (ImGui::Button("Show"))
            {
                creature->SetInLimbo(0);
            }
            ImGui::SameLine();
            ImGui::Text("/");
            ImGui::SameLine();
            if (ImGui::Button("Hide"))
            {
                creature->SetInLimbo(1);
            }
            if (ImGui::CollapsingHeader("Behavior"))
            {
                ImGui::SeparatorText("Brain");

                static int brainID = 0;

                if (ImGui::BeginCombo("##CreatureBrain", szBrainNames[brainID]))
                {
                    for (int i = 0; i < IM_ARRAYSIZE(szBrainNames); i++)
                    {
                        bool isSelected = (brainID == i);

                        if (ImGui::Selectable(szBrainNames[i], isSelected))
                        {
                            brainID = i;

                            if (isSelected)
                            {
                                ImGui::SetItemDefaultFocus();
                            }
                        }
                    }
                    ImGui::EndCombo();
                }

                ImGui::SameLine();
                ImGui::Text("Brain Name");

                if (ImGui::Button("Set Brain"))
                {
                    ImGui::Text("Brain");
                    ImGui::Separator();
                    CCharString brainName((char*)szBrainNames[brainID]);
                    CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();

                    int brainIndex = defManager->GetDefGlobalIndexFromName(&brainName);

                    int brawlik[1];
                    brawlik[0] = 0;

                    defManager->GetOpinionPersonalitDef(brainIndex, brawlik);

                    creature->SetNewBrain(brawlik[0]);
                }

                ImGui::SeparatorText("Combat");
                static int attackStyleID;

                if (ImGui::BeginCombo("##CreatureAttackStyle", szAttackStyleNames[attackStyleID]))
                {
                    for (int i = 0; i < IM_ARRAYSIZE(szAttackStyleNames); i++)
                    {
                        bool isSelected = (attackStyleID == i);

                        if (ImGui::Selectable(szAttackStyleNames[i], isSelected))
                        {
                            attackStyleID = i;

                            if (isSelected)
                            {
                                ImGui::SetItemDefaultFocus();
                            }
                        }
                    }
                    ImGui::EndCombo();
                }

                ImGui::SameLine();
                ImGui::Text("Combat Name");

                if (ImGui::Button("Set Combat"))
                {
                    CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();
                    CCharString combatName((char*)szAttackStyleNames[attackStyleID]);

                    int combatType = 0;
                    defManager->GetBrainDef(&combatName, &combatType);

                    CTCCombat* combat = (CTCCombat*)creature->GetTC(TCI_COMBAT);
                    combat->SetCombatType(&combatType);
                }
                if (creature->HasTC(TCI_ENEMY))
                {
                    ImGui::SeparatorText("Faction");
                    CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
                    CTCEnemy* enemy = (CTCEnemy*)creature->GetTC(TCI_ENEMY);

                    bool isEnemy = enemy->IsEnemyOf(playerCharacter);
                    ImGui::Text("Is Hero Enemy: %s", isEnemy ? "Yes" : "No");

                    static int factionID = 0;
                    if (ImGui::BeginCombo("##CreatureFaction", szFactions[factionID]))
                    {
                        for (int i = 0; i < IM_ARRAYSIZE(szFactions); i++)
                        {
                            bool isSelected = (factionID == i);

                            if (ImGui::Selectable(szFactions[i], isSelected))
                            {
                                factionID = i;

                                if (isSelected)
                                {
                                    ImGui::SetItemDefaultFocus();
                                }
                            }
                        }
                        ImGui::EndCombo();
                    }
                    ImGui::SameLine();
                    ImGui::Text("Faction Name");
                    if (ImGui::Button("Set Faction"))
                    {
                        CCharString factionName((char*)szFactions[factionID]);
                        enemy->SetFaction(&factionName);
                    }
                }
            }
            if (ImGui::CollapsingHeader("Physics"))
            {
                DrawPhysicsCollapse(creature);
            }
            if (ImGui::CollapsingHeader("Modes"))
            {
                static int creatureModeID;
                CTCCreatureModeManager* modeManager = (CTCCreatureModeManager*)creature->GetTC(TCI_ENTITY_MODE_MANAGER);
                if (ImGui::BeginCombo("Mode Name", szCreatureModeNames[creatureModeID]))
                {
                    for (int n = 0; n < IM_ARRAYSIZE(szCreatureModeNames); n++)
                    {
                        bool is_selected = (creatureModeID == n);
                        if (ImGui::Selectable(szCreatureModeNames[n], is_selected))
                            creatureModeID = n;
                        if (is_selected)
                            ImGui::SetItemDefaultFocus();
                    }
                    ImGui::EndCombo();
                }

                NCreatureMode creatureMode = (NCreatureMode)creatureModeID;

                if (ImGui::Button("Add Mode"))
                {
                    modeManager->AddMode(creatureMode);
                }
                if (ImGui::Button("Remove Mode"))
                {
                    modeManager->RemoveMode(creatureMode);
                }
                ImGui::SameLine();
                if (ImGui::Button("Reset Modes"))
                {
                    for (int n = 0; n < IM_ARRAYSIZE(szCreatureModeNames); n++)
                    {
                        if (modeManager->isModeActive((NCreatureMode)n))
                            modeManager->RemoveMode((NCreatureMode)n);
                    }
                    modeManager->SetupDefaultMode();
                }
            }

            bool isCarryngEnabled = creature->HasTC(TCI_CARRYING);

            if (!isCarryngEnabled)
            {
                ImGui::BeginDisabled();
            }

            if (ImGui::CollapsingHeader("Animations"))
            {
                DrawAnimationCollapse(creature);
            }
            if (ImGui::CollapsingHeader("Carrying"))
            {
                static int selectedCarrySlot;
                static int selectedWeaponID = 0;
                CTCCarrying* carry = (CTCCarrying*)creature->GetTC(TCI_CARRYING);
                bool isCarryWeapon = carry->IsCarryingWeapon(creature);

                ImGui::Text("Is Carrying Weapons: %s", isCarryWeapon ? "Yes" : "No");

                if (ImGui::BeginCombo("##WeaponType", szCreatureWeapons[selectedWeaponID]))
                {
                    for (int i = 0; i < IM_ARRAYSIZE(szCreatureWeapons); i++)
                    {
                        bool isSelected = (selectedWeaponID == i);

                        if (ImGui::Selectable(szCreatureWeapons[i], isSelected))
                        {
                            selectedWeaponID = i;

                            if (isSelected)
                            {
                                ImGui::SetItemDefaultFocus();
                            }
                        }
                    }
                    ImGui::EndCombo();
                }
                ImGui::RadioButton("Right Hand", &selectedCarrySlot, 0);
                ImGui::SameLine();
                ImGui::RadioButton("Left Hand", &selectedCarrySlot, 1);
                ImGui::SameLine();
                ImGui::RadioButton("Both Hands", &selectedCarrySlot, 2);

                static const char* szCarrySlots[] = {
                    "CARRY_SLOT_RIGHT_HAND",
                    "CARRY_SLOT_LEFT_HAND"
                };

                if (ImGui::Button("Add Thing"))
                {
                    CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();
                    CCharString thingName((char*)szCreatureWeapons[selectedWeaponID]);
                    int thingIndex = defManager->GetDefGlobalIndexFromName(&thingName);
                    CThing* thing = CreateThing(thingIndex, creature->GetPosition(), 0, 0, 0, (char*)"obj");
                    if (selectedCarrySlot != 2)
                    {
                        CCharString slotName((char*)szCarrySlots[selectedCarrySlot]);
                        int index = defManager->GetDefGlobalIndexFromName(&slotName);
                        if (!carry->IsCarrySlotFree(index))
                        {
                            CThing* thingInSlot = carry->GetThingInCarrySlot(index);
                            carry->RemoveThingInCarrySlot(index, true);
                            thingInSlot->Kill(0);
                        }
                        carry->AddThingInCarrySlot(thing, index, true);
                    }
                    else // used action cuz original class have a broken "both hands" mode.
                    {
                        creature->ClearQueuedActions();
                        creature->FinishCurrentAction();
                        CCreatureAction_PickUpGenericBox* genericBox = (CCreatureAction_PickUpGenericBox*)malloc(180);
                        CCreatureAction_PickUpGenericBox construct(genericBox, creature, thing);
                        creature->SetCurrentAction((CTCBase*)genericBox);
                    }
                }

                if (ImGui::Button("Remove Thing"))
                {
                    if (selectedCarrySlot != 2)
                    {
                        CGameDefinitionManager* defManager = CGameDefinitionManager::GetDefinitionManager();
                        CCharString slotName((char*)szCarrySlots[selectedCarrySlot]);
                        int index = defManager->GetDefGlobalIndexFromName(&slotName);
                        CThing* thingInSlot = carry->GetThingInCarrySlot(index);

                        if (!carry->IsCarrySlotFree(index))
                        {
                            carry->RemoveThingInCarrySlot(index, true);
                            thingInSlot->Kill(0);
                        }
                    }
                }
            }
            if (!isCarryngEnabled)
            {
                ImGui::EndDisabled();
            }

            if (ImGui::CollapsingHeader("Wife"))
            {
                CTCWife* wife = (CTCWife*)creature->GetTC(TCI_WIFE);

                if (ImGui::Button("Set As Wife", { -FLT_MIN, 0 }))
                {
                    if (!creature->HasTC(TCI_WIFE))
                    {
                        CCharString tcName((char*)"CTCWife");
                        creature->AddTC(&tcName, 0, 0);
                    }
                }

                if (!wife)
                {
                    ImGui::BeginDisabled();
                }

                if (ImGui::Button("Marry", { -FLT_MIN, 0 }))
                {
                    wife->Marry(0);
                }

                bool isSexDisabled = creature->IsChild() && wife;

                if (isSexDisabled)
                {
                    ImGui::BeginDisabled();
                }

                if (ImGui::Button("Have Sex", { -FLT_MIN, 0 }))
                {
                    wife->HaveSex();
                }

                if (isSexDisabled)
                {
                    ImGui::EndDisabled();
                }

                if (ImGui::Button("Divorce", { -FLT_MIN, 0 }))
                {
                    wife->Divorce();
                }

                if (!wife)
                {
                    ImGui::EndDisabled();
                }
            }

            if (ImGui::CollapsingHeader("Appearance"))
            {
                DrawAppearanceCollapse(creature);
            }
            ImGui::End();
        }
    }
}

void FableMenu::DrawCameraTab()
{
    if (TheCamera)
    {
        ImGui::Checkbox("Set Camera Position", &m_bCustomCameraPos);
        ImGui::InputFloat3("X | Y | Z", &camPos.X);

        ImGui::Checkbox("Set FOV", &m_bCustomCameraFOV);

        if (m_bCustomCameraFOV)
            ImGui::InputFloat("FOV", &TheCamera->FOV);
        ImGui::Separator();
    }

    ImGui::Checkbox("Free Camera", &ms_bFreeCam);
    if (ms_bFreeCam)
    {
        ImGui::Separator();
        if (!m_bCustomCameraPos)
            ImGui::TextColored(ImVec4(1.f, 0.3f, 0.3f, 1.f), "Check \"Set Camera Position\"!");

        ImGui::Text("Free Camera Type");
        ImGui::Separator();
        ImGui::RadioButton("Custom (Recommended)", &m_nFreeCameraMode, FREE_CAMERA_CUSTOM);
        ImGui::SameLine();
        ShowHelpMarker("A custom free camera implementation, uses NUMPAD keys by default to move the camera. Mouse and key settings can be changed in the Settings menu.");
        ImGui::RadioButton("Original", &m_nFreeCameraMode, FREE_CAMERA_ORIGINAL);
        if (m_nFreeCameraMode == FREE_CAMERA_CUSTOM)
        {
            ImGui::Separator();
            ImGui::InputFloat("Free Camera Speed", &m_fFreeCamSpeed);
        }

        ImGui::Separator();
    }

    if (ImGui::Button("Teleport Player To Camera Location", { -FLT_MIN, 0 }))
    {
        CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
        if (plr)
        {
            CThing* t = plr->GetCharacterThing();
            *t->GetPosition() = TheCamera->pos;
        }
    }

}

void FableMenu::DrawWorldTab()
{
    CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
    CWorld* wrld = CMainGameComponent::Get()->GetWorld();
    if (wrld)
    {
        ImGui::SeparatorText("Settings");
        bool* minimap = wrld->GetMinimap();
        ImGui::Checkbox("Minimap", minimap);
        if (plr)
        {
            bool& enemies = *(bool*)((int)plr + 0x21B);
            ImGui::Checkbox("Kill Mode", &enemies);
        }
        ImGui::Checkbox("Enemy God Mode", NGlobalConsole::EnemyGodMode);
        static bool fishingAnywhere;
        if (ImGui::Checkbox("Land Fishing", &fishingAnywhere))
        {
            Patch(0x7F0210, { (unsigned char)((BYTE)fishingAnywhere + 0x74) });
        }
        ImGui::Separator();
    }
    if (wrld)
    {
        if (ImGui::CollapsingHeader("Time"))
        {
            int time = *(int*)((int)wrld + 28);
            if (time)
            {
                float& timeStep = *(float*)((int)time + 16);
                ImGui::SliderFloat("Time Step", &timeStep, 0.001f, 1.0f);

                ImGui::Checkbox("Set Time", &ms_bChangeTime);
                if (ms_bChangeTime)
                {
                    float& curTime = *(float*)((int)time + 8);
                    ImGui::SliderFloat("Time##set", &curTime, 0.0, 1.0f);
                }
            }
        }
    }
    if (ImGui::CollapsingHeader("Region"))
    {
        static int hspID = 0;
        static char hspName[256] = {};
        static bool manualInput = false;
        if (m_bForceLoadRegion)
        {
            ImGui::BeginDisabled();
        }
        ImGui::Text("Hero Spawn Point");
        if(!manualInput)
        {
            if (ImGui::BeginCombo("##hsplist", szHolySites[hspID]))
            {
                for (int n = 0; n < IM_ARRAYSIZE(szHolySites); n++)
                {
                    bool is_selected = (hspID == n);
                    if (ImGui::Selectable(szHolySites[n], is_selected))
                        hspID = n;
                    if (is_selected)
                        ImGui::SetItemDefaultFocus();
                }

                ImGui::EndCombo();
            }
        }
        else
        {
            ImGui::InputText("##hspname", hspName, sizeof(hspName));
        }
        ImGui::Checkbox("Manual Input", &manualInput);
        if (ImGui::Button("Teleport", { -FLT_MIN, 0 }))
        {
            CCharString hsp_name(manualInput ? hspName : (char*)szHolySites[hspID]);
            wrld->TeleportHeroToHSP(&hsp_name);
        }
        if (m_bForceLoadRegion)
        {
            ImGui::EndDisabled();
        }
        if (ImGui::Button("Reload Region", { -FLT_MIN, 0 }))
        {
            NGlobalConsole::ConsoleReloadCurrentRegion();
        }
        ImGui::Separator();
        bool& quest_regions = *(bool*)(0x1375741);
        ImGui::Checkbox("Quest Regions", &quest_regions);
        static bool disableRegionBounds;
        if (ImGui::Checkbox("Disable Region Bounds", &disableRegionBounds))
        {
            if (disableRegionBounds)
            {
                Patch(0x81F3F6, { 0xB0, 0x01 });
            }
            else
            {
                Patch(0x81F3F6, { 0x8A, 0x44 });
            }
        }
        ImGui::Checkbox("Force load region", &m_bForceLoadRegion);
    }
    if (ImGui::CollapsingHeader("Particles"))
    {
        ImGui::TextWrapped("Particle list is available in Help menu.");
        static CVector particlePosition = {};
        static char particleName[512];
        static bool isTemporaryParticle;
        static bool attachParticleToCamera;
        static bool particleNameError;
        ImGui::Checkbox("Enable Particles", NGlobalConsole::EnableParticles);
        ImGui::InputText("Particle Name", particleName, sizeof(particleName));
        ImGui::InputFloat3("Particle Position", &particlePosition.X);
        if (ImGui::Button("Get Player Position"))
        {
            CThing* playerCharacter = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer()->GetCharacterThing();
            particlePosition = *playerCharacter->GetPosition();
        }
        ImGui::Checkbox("Attach To Camera", &attachParticleToCamera);
        ImGui::SameLine(); ShowWarnMarker("Use only for static particles");
        if(ms_bDisableCreateParticle)
            ImGui::BeginDisabled();
        if (ImGui::Button("Create Particle", { -FLT_MIN, 0 }))
        {
            CCharString ccstrParticle(particleName);
            CParticleEmitterDatabase* emitterDatabase = CParticleEmitterDatabase::Get();
            int partId = emitterDatabase->GetEmitterTemplateHandleFromName(&ccstrParticle);
            if (partId <= 0)
            {
                particleNameError = true;
            }
            else
            {
                if (particleNameError)
                {
                    particleNameError = false;
                }
                CThing* particleThing = CTCDParticleEmitter::Create(partId, &particlePosition, false);
                m_createdParticles.push_back(particleThing);
                if (particleThing)
                {
                    if (attachParticleToCamera)
                    {
                        CTCDParticleEmitter* particleEmitter = (CTCDParticleEmitter*)particleThing->GetTC(TCI_PARTICLE_EMITTER);

                        if (*(int*)particleEmitter + 0x34 != 0)
                        {
                            particleEmitter->AttachToCamera(8, 0.0);
                            m_attachedCameraParticles.push_back(particleThing);
                        }
                    }
                }
            }
        }
        if (particleNameError)
        {
            ImGui::TextColored({ 1,0,0,1 }, "Error: undefined particle name");
        }
        if (ms_bDisableCreateParticle)
            ImGui::EndDisabled();
        if (ImGui::Button("Clear Attachments", { 125, 25 }))
        {
            for (auto cameraParticle : m_attachedCameraParticles)
            {
                CTCDParticleEmitter* attached = (CTCDParticleEmitter*)cameraParticle->GetTC(TCI_PARTICLE_EMITTER);
                attached->ClearAttachments();
            }
            m_attachedCameraParticles.clear();
        }
        ImGui::SameLine();
        if (ImGui::Button("Destroy All Created Particles", { 200, 25 }))
        {
            for (auto thing : m_createdParticles)
            {
                thing->Kill(false);
            }
            m_createdParticles.clear();
            m_attachedCameraParticles.clear();
        }
    }
}

void FableMenu::DrawQuestTab()
{
    if (!CQuestManager::Get())
        return;


    CQuestManager* q = CQuestManager::Get();

    ImGui::TextWrapped("NOTE: Quest changes might break your savegame! To be safe, do any quest changes on a backup/alternative save.");

    static char scriptName[256] = {};
    if (ImGui::CollapsingHeader("Status Control"))
    {
        ImGui::Text("Quest Name");
        static bool writeName = false;

        ImGui::PushItemWidth(-FLT_MIN);

        if (!writeName)
        {
            if (ImGui::BeginCombo("#qststatus", scriptName))
            {
                for (int n = 0; n < IM_ARRAYSIZE(szBuiltInQuests); n++)
                {
                    bool is_selected = (scriptName == szBuiltInQuests[n]);
                    if (ImGui::Selectable(szBuiltInQuests[n], is_selected))
                        sprintf(scriptName, szBuiltInQuests[n]);
                    if (is_selected)
                        ImGui::SetItemDefaultFocus();
                }
                ImGui::EndCombo();
            }
        }
        else
        {
            ImGui::InputText("##quest", scriptName, sizeof(scriptName));
        }
        ImGui::Checkbox("Manual Input", &writeName);

        ImGui::PopItemWidth();

        if (strlen(scriptName) > 0)
        {
            if (ImGui::Button("Activate", { -FLT_MIN, 0 }))
            {
                CCharString str(scriptName);
                if (q->IsQuestActive(&str))
                {
                    Notifications->SetNotificationTime(2500);
                    Notifications->PushNotification("Quest \"%s\" is already active!", scriptName);
                }
                else
                {
                    if (q->ActivateQuest(&str, false, true))
                    {
                        Notifications->SetNotificationTime(2500);
                        Notifications->PushNotification("Quest \"%s\" activated!", scriptName);
                    }
                    else
                    {
                        Notifications->SetNotificationTime(2500);
                        Notifications->PushNotification("Failed to activate quest \"%s\"!", scriptName);
                    }
                }

            }
            if (ImGui::Button("Deactivate", { -FLT_MIN, 0 }))
            {
                CCharString str(scriptName);
                if (!q->IsQuestActive(&str))
                {
                    Notifications->SetNotificationTime(2500);
                    Notifications->PushNotification("Quest \"%s\" is not active!", scriptName);
                }
                else
                {
                    q->DeactivateQuest(&str, 0);
                    Notifications->SetNotificationTime(2500);
                    Notifications->PushNotification("Quest \"%s\" deactivated!", scriptName);
                }
            }
        }
    }
    if (ImGui::CollapsingHeader("Active Quests"))
    {
        static bool coreQuest = false;
        static bool optionalQuests = false;
        static bool scriptQuests = false;
        static bool localizedQuests = false;
        int activeQuests = 0;

        ImGui::Checkbox("Core Quests", &coreQuest);
        ImGui::SameLine();
        ImGui::Checkbox("Optinal Quests", &optionalQuests);
        ImGui::SameLine();
        ImGui::Checkbox("Scripts", &scriptQuests);
        ImGui::SameLine();
        ImGui::Checkbox("Localize Names", &localizedQuests);
        ImGui::Separator();

        for (int i = 0; i < IM_ARRAYSIZE(szBuiltInQuests); i++)
        {
            CCharString quest_name((char*)szBuiltInQuests[i]);
            const char* localizedName = "NONAME_QUEST";

            if (q->IsQuestActive(&quest_name))
            {
                activeQuests++;

                CThing* cardThing = q->GetActiveQuestCardFromScriptName(&quest_name);
                bool isScript = !cardThing;

                if (isScript && !scriptQuests)
                {
                    continue;
                }

                if (!isScript)
                {
                    CTCQuestCard* card = (CTCQuestCard*)cardThing->GetTC(TCI_QUEST_CARD);

                    if (localizedQuests)
                    {
                        CWideString name;
                        card->GetQuestName(&name);
                        localizedName = GetUTF8String(name.GetWideStringData());
                    }

                    if (coreQuest || optionalQuests)
                    {
                        bool isCore = (coreQuest && card->IsRouteToAppearOnMinimap());
                        bool isOptional = (optionalQuests && card->IsOptional());

                        if (!isCore && !isOptional)
                        {
                            continue;
                        }
                    }
                }

                if (localizedQuests && !isScript)
                {
                    if (strcmp(localizedName, "NONAME_QUEST") == 0)
                    {
                        continue;
                    }

                    ImGui::LabelText("", localizedName);
                }
                else
                {
                    ImGui::LabelText("", szBuiltInQuests[i]);
                }
                ImGui::SameLine();
                ImGui::PushID(i);
                if (ImGui::Button("Deactivate"))
                {
                    q->DeactivateQuest(&quest_name, 0);

                }
                if (cardThing)
                {
                    ImGui::SameLine();
                    if (ImGui::Button("Complete"))
                    {
                        CTCQuestCard* card = (CTCQuestCard*)cardThing->GetTC(TCI_QUEST_CARD);
                        q->SetQuestAsCompleted(&quest_name, card->IsCore(), 0, 0);
                    }
                }
                ImGui::PopID();
            }
        }
#ifdef _DEBUG
        if (activeQuests > 0)
        {
            if (ImGui::Button("Deactivate All", { -FLT_MIN, 0 }))
            {
                q->DeactivateAllQuests();
                Notifications->SetNotificationTime(2500);
                Notifications->PushNotification("All quests deactivated! (%d)", activeQuests);
                activeQuests = 0;
            }
        }
#endif
    }

    if (ImGui::CollapsingHeader("Tweaks"))
    {
        ImGui::Checkbox("No Bodyguards Limit", &m_bNoBodyGuardsLimit);
        ImGui::SameLine(); ShowHelpMarker("Allows to hire all bodyguards. Default limit is 2.");
        ImGui::Checkbox("Quest Locking Leave Region", NGlobalConsole::GEnableRegionLockingSaveSystem);
    }
}

void FableMenu::DrawMiscTab()
{
    CWorld* wrld = CMainGameComponent::Get()->GetWorld();
    ImGui::SeparatorText("Time");

    if (wrld)
    {
        CBulletTimeManager* time = wrld->GetBulletTime();
        if (time)
        {
            ImGui::Checkbox("Slowmotion", &time->m_bActive);
        }
    }

    ImGui::Checkbox("Update AI", NGlobalConsole::EnableUpdateAI);
    ImGui::Checkbox("Update Objects", NGlobalConsole::EnableUpdateObjects);

    static bool creatureDecay = 1;
    static bool enableShortMelee = 0;
    if (ImGui::Checkbox("Dead Creature Decay", &creatureDecay))
    {
        Patch<char>(0x8362EA + 1, creatureDecay + 0x84);
    }
    ImGui::SeparatorText("Hero");

    ImGui::Checkbox("Hero God Mode", NGlobalConsole::HeroGodMode);
    ImGui::Checkbox("Enable Hero Jump", NGlobalConsole::EnableHeroJump);
    char jumpDesc[256];
    sprintf(jumpDesc, "Jump action assigned to \"%s\" button. Jump key and others can be changed in settings menu.", eKeyboardMan::KeyToString(SettingsMgr->iHeroJumpKey));
    ImGui::SameLine(); ShowHelpMarker(jumpDesc);
    ImGui::Checkbox("Enable Hero Sprint", NGlobalConsole::EnableHeroSprint);
    if (ImGui::Checkbox("Enable Hero Short Melee", &enableShortMelee))
    {
        const char* meleeType = "STRIKE_MEDIUM_FRONT";

        if (enableShortMelee)
        {
            meleeType = "STRIKE_SHORT_FRONT";
        }

        for (int i = 0; i <= strlen(meleeType); i++)
        {
            Patch<char>(0x12778B0 + i, meleeType[i]);
        }
    }

    ImGui::SeparatorText("Display");

    ImGui::Checkbox("Display HUD", &GetHud()->m_bDisplay);
    if (ImGui::Checkbox("Hide Auto Save Progress", FGlobals::GDoNotCallStartAutoSaveProgress))
    {
        // Patch SaveGameState variable reset
        Patch(0x4A073B, { (BYTE)*FGlobals::GDoNotCallStartAutoSaveProgress });
    }
    ImGui::Checkbox("Hide Load Game State", FGlobals::GDisplaySavingGameState);

    ImGui::SeparatorText("Cheats");
    ImGui::Checkbox("Infinite Health", &m_bGodMode);
    ImGui::Checkbox("Infinite Will", &m_bInfiniteWill);

    ImGui::SeparatorText("Console");
    ImGui::InputFloat("Trading Price Multiplier", CTCAIScratchPad::TradingPriceMult);

    if (ImGui::InputInt("Primitive Fade Distance", NGlobalConsole::PrimitiveFadeDistance))
    {
        *NGlobalConsole::ForcePrimitiveFadeDistance = (NGlobalConsole::PrimitiveFadeDistance > 0);
    }
    ImGui::InputFloat("Override Multipliyer Speed", NGlobalConsole::ConsoleOverrideMultiplier);
    ImGui::Checkbox("Debug Stress Test", NGlobalConsole::GCombatStressTestDebug);
#ifdef _DEBUG
    if (TheCamera)
    {
        ImGui::Text("Camera: 0x%X", TheCamera);
    }
    if (wrld)
    {
        ImGui::Text("World Pointer: 0x%X", wrld);
        ImGui::Text("Game Component Pointer: 0x%X", CMainGameComponent::Get());
        ImGui::Text("Weather Settings: 0x%X", WeatherSettings);
    }

    CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
    if (plr)
    {
        CThing* t = plr->GetCharacterThing();
        ImGui::Text("Player Stats: 0x%X", t->GetHeroStats());
        ImGui::Text("Player Morph: 0x%X\n", t->GetHeroMorph());
        ImGui::Text("Player Experience: 0x%X\n", t->GetHeroExperience());
        ImGui::Text("Player Thing: 0x%X\n", t);
        ImGui::Text("Player Physics: 0x%X\n", t->GetPhysicsStandard());
        ImGui::Text("Player: 0x%X\n", plr);
        ImGui::Text("Draw: 0x%X\n", t->GetGraphicAppearance());
        ImGui::Text("Script Manager: 0x%X\n", wrld->GetScriptInfoManager());
    }
#endif
}

void FableMenu::DrawSettings()
{
    ImGui::PushStyleVar(ImGuiStyleVar_ButtonTextAlign, { 0.5f, 0.5f });
    ImGui::SetNextWindowPos({ ImGui::GetIO().DisplaySize.x / 2.0f, ImGui::GetIO().DisplaySize.y / 2.0f }, ImGuiCond_Once, { 0.5f, 0.5f });
    ImGui::SetNextWindowSize({ 700,700 }, ImGuiCond_Once);
    ImGui::Begin("Settings", &m_bSubmenuActive[SM_Settings]);

    static int settingID = 0;
    static const char* settingNames[] = {
        "Menu",
        "INI",
        "Keys",
        "Mouse"
    };

    enum eSettings {
        MENU,
        INI,
        KEYS,
        MOUSE
    };

    ImGui::BeginChild("##settings", { 12 * ImGui::GetFontSize(), 0 }, true);

    for (int n = 0; n < IM_ARRAYSIZE(settingNames); n++)
    {
        bool is_selected = (settingID == n);
        if (ImGui::Selectable(settingNames[n], is_selected))
            settingID = n;
        if (is_selected)
            ImGui::SetItemDefaultFocus();
    }

    ImGui::EndChild();

    ImGui::SameLine();
    ImGui::BeginChild("##content", { 0, -ImGui::GetFrameHeightWithSpacing() });

    switch (settingID)
    {
    case MENU:
        ImGui::TextWrapped("All user settings are saved to fablemenu_user.ini.");
        ImGui::Text("Menu Scale");
        ImGui::PushItemWidth(-FLT_MIN);
        ImGui::InputFloat("", &SettingsMgr->fMenuScale);
        ImGui::PopItemWidth();
        break;
    case INI:
        ImGui::TextWrapped("These settings control FableMenu.ini options. Any changes require game restart to take effect.");
        ImGui::LabelText("", "Core");
        ImGui::Separator();
        ImGui::Checkbox("Slowmotion Spell/Effect Affects Everything", &SettingsMgr->bSlowMotionEffectsEverything);
        ImGui::Checkbox("Windowed Mode", &SettingsMgr->bUseBuiltInWindowedMode);
        ImGui::Separator();

        break;
    case KEYS:
        if (m_bPressingKey)
            ImGui::TextColored(ImVec4(0.f, 1.f, 0.3f, 1.f), "Press a key!");

        if (ImGui::Button("Reset Keys", { -FLT_MIN, 0 }))
        {
            SettingsMgr->ResetKeys();
            Notifications->SetNotificationTime(2500);
            Notifications->PushNotification("Keys reset! Remember to save.");
        }

        ImGui::Separator();
        ImGui::LabelText("", "Core");
        ImGui::Separator();
        KeyBind(&SettingsMgr->iMenuOpenKey, "Open/Close Menu", "menu");
        ImGui::Separator();
        ImGui::LabelText("", "Camera");
        ImGui::Separator();

        KeyBind(&SettingsMgr->iFreeCameraKeyForward, "Forward", "x_plus");
        KeyBind(&SettingsMgr->iFreeCameraKeyBack, "Back", "x_minus");
        KeyBind(&SettingsMgr->iFreeCameraKeyLeft, "Left", "y_plus");
        KeyBind(&SettingsMgr->iFreeCameraKeyRight, "Right", "y_minus");
        KeyBind(&SettingsMgr->iFreeCameraKeyUp, "Up", "z_plus");
        KeyBind(&SettingsMgr->iFreeCameraKeyDown, "Down", "z_minus");
        
        ImGui::SeparatorText("Game Action");
        GameKeyBind(&SettingsMgr->iHeroJumpKey, "Jump", "jump_action", GAME_ACTION_JUMP);
        ImGui::Separator();

        if (m_bPressingKey)
        {
            eVKKeyCode result = eKeyboardMan::GetLastKey();

            if (result >= VK_BACKSPACE && result < VK_KEY_NONE)
            {
                *m_pCurrentVarToChange = result;
                m_bPressingKey = false;
            }

        }
        break;
    case MOUSE:
        ImGui::TextWrapped("All user settings are saved to fablemenu_user.ini.");
        ImGui::Text("Sensitivity");
        ImGui::PushItemWidth(-FLT_MIN);
        ImGui::SliderFloat("", &SettingsMgr->mouse.sens, 0, 10.0f);
        ImGui::PopItemWidth();
        ImGui::Checkbox("Invert X", &SettingsMgr->mouse.invert_x);
        ImGui::Checkbox("Invert Y", &SettingsMgr->mouse.invert_y);
        break;
    default:
        break;
    }

    if (ImGui::Button("Save", { -FLT_MIN, 0 }))
    {
        Notifications->SetNotificationTime(2500);
        Notifications->PushNotification("Settings saved to FableMenu.ini and fablemenu_user.ini!");
        eDirectX9Hook::ms_bShouldReloadFonts = true;
        SettingsMgr->SaveSettings();
    }

    ImGui::EndChild();
    ImGui::PopStyleVar();

    ImGui::End();
}

void FableMenu::DrawCreatureList()
{
    ImGui::PushStyleVar(ImGuiStyleVar_ButtonTextAlign, { 0.5f, 0.5f });
    ImGui::SetNextWindowPos({ ImGui::GetIO().DisplaySize.x / 2.0f, ImGui::GetIO().DisplaySize.y / 2.0f }, ImGuiCond_Once, { 0.5f, 0.5f });
    ImGui::SetNextWindowSize({ 700,700 }, ImGuiCond_Once);
    ImGui::Begin("Creature List", &m_bSubmenuActive[SM_Creature_List]);

    static ImGuiTextFilter filter;
    ImGui::TextWrapped("Click on any entry to copy to clipboard.");
    ImGui::Text("Search");
    ImGui::PushItemWidth(-FLT_MIN);
    filter.Draw("##wclist");
    ImGui::PopItemWidth();

    ImGui::BeginChild("##list", { 0, -ImGui::GetFrameHeightWithSpacing() }, true);

    static int selectID = 0;
    for (int n = 0; n < IM_ARRAYSIZE(szCreatureList); n++)
    {
        if (filter.PassFilter(szCreatureList[n]))
        {
            bool is_selected = (selectID == n);
            if (ImGui::Selectable(szCreatureList[n], is_selected))
            {
                selectID = n;

                char name[256] = {};
                sprintf(name, "%s", szCreatureList[selectID]);
                CopyToClipboard(name);
            }
        }

    }

    ImGui::EndChild();
    ImGui::PopStyleVar();

    ImGui::End();
}

void FableMenu::DrawObjectList()
{
    ImGui::PushStyleVar(ImGuiStyleVar_ButtonTextAlign, { 0.5f, 0.5f });
    ImGui::SetNextWindowPos({ ImGui::GetIO().DisplaySize.x / 2.0f, ImGui::GetIO().DisplaySize.y / 2.0f }, ImGuiCond_Once, { 0.5f, 0.5f });
    ImGui::SetNextWindowSize({ 700,700 }, ImGuiCond_Once);
    ImGui::Begin("Object List", &m_bSubmenuActive[SM_Object_List]);

    static ImGuiTextFilter filter;
    ImGui::TextWrapped("Click on any entry to copy to clipboard.");
    ImGui::Text("Search");
    ImGui::PushItemWidth(-FLT_MIN);
    filter.Draw("");
    ImGui::PopItemWidth();

    ImGui::BeginChild("##olist", { 0, -ImGui::GetFrameHeightWithSpacing() }, true);

    static int selectID = 0;
    for (int n = 0; n < IM_ARRAYSIZE(szObjectsList); n++)
    {
        if (filter.PassFilter(szObjectsList[n]))
        {
            bool is_selected = (selectID == n);
            if (ImGui::Selectable(szObjectsList[n], is_selected))
            {
                selectID = n;

                char name[256] = {};
                sprintf(name, "%s", szObjectsList[selectID]);
                CopyToClipboard(name);

            }
        }

    }

    ImGui::EndChild();
    ImGui::PopStyleVar();

    ImGui::End();
}

void FableMenu::DrawParticleList()
{
    ImGui::PushStyleVar(ImGuiStyleVar_ButtonTextAlign, { 0.5f, 0.5f });
    ImGui::SetNextWindowPos({ ImGui::GetIO().DisplaySize.x / 2.0f, ImGui::GetIO().DisplaySize.y / 2.0f }, ImGuiCond_Once, { 0.5f, 0.5f });
    ImGui::SetNextWindowSize({ 700,700 }, ImGuiCond_Once);
    ImGui::Begin("Particle List", &m_bSubmenuActive[SM_Particle_List]);

    static ImGuiTextFilter filter;
    ImGui::TextWrapped("Click on any entry to copy to clipboard.");
    ImGui::Text("Search");
    ImGui::PushItemWidth(-FLT_MIN);
    filter.Draw("");
    ImGui::PopItemWidth();

    ImGui::BeginChild("##plist", { 0, -ImGui::GetFrameHeightWithSpacing() }, true);

    static int selectID = 0;
    for (int n = 0; n < IM_ARRAYSIZE(szParticleList); n++)
    {
        if (filter.PassFilter(szParticleList[n]))
        {
            bool is_selected = (selectID == n);
            if (ImGui::Selectable(szParticleList[n], is_selected))
            {
                selectID = n;

                char name[256] = {};
                sprintf(name, "%s", szParticleList[selectID]);
                CopyToClipboard(name);
            }
        }

    }

    ImGui::EndChild();
    ImGui::PopStyleVar();

    ImGui::End();
}

void FableMenu::DrawKeyBind(char* name, int* var)
{
    ImGui::SameLine();

    static char butName[256] = {};
    sprintf(butName, "%s##key%s", eKeyboardMan::KeyToString(*var), name);
    if (ImGui::Button(butName))
    {
        m_bPressingKey = true;
        m_pCurrentVarToChange = var;
    }
}

void FableMenu::GameKeyBind(int* var, char* bindName, char* name, EGameAction action)
{
    CUserProfileManager* profile = CUserProfileManager::Get();
    CActionInputControl input;
    profile->GetAssignedInputForAction(action, !*FGlobals::GUsePassiveAggressiveMode, &input);

    if (gameKeyCodes[input.KeyboardKey] != *var)
    {
        EInputKey key = eKeyboardMan::GetInputFromVKKeyCode(*var);
        
        if (key)
        {
            profile->SetAssignedInputKeyboard(action, key, !*FGlobals::GUsePassiveAggressiveMode);
        }
    }
    else
    {
        *var = gameKeyCodes[input.KeyboardKey];
    }

    ImGui::LabelText("", bindName);
    DrawKeyBind(name, var);
}

void FableMenu::KeyBind(int* var, char* bindName, char* name)
{
    ImGui::LabelText("", bindName);
    DrawKeyBind(name, var);
}

void HookWorldUpdate()
{
    if (!InGame())
        return;

    CWorld* wrld = CMainGameComponent::Get()->GetWorld();
    if (wrld)
    {
        if (wrld->isLoadRegion())
        {
            FableMenu::m_attachedCameraParticles.clear();
            FableMenu::m_createdParticles.clear();
            
            CBulletTimeManager* time = wrld->GetBulletTime();

            if(time->m_bActive)
                time->m_bActive = 0;
        }
        CPlayer* plr = CMainGameComponent::Get()->GetPlayerManager()->GetMainPlayer();
        if (plr)
        {
            CThing* t = plr->GetCharacterThing();

            if (TheMenu->m_bIsActive && !TheMenu->m_bFrozeControls)
            {
                plr->DisableInput();
                TheMenu->m_bFrozeControls = true;
            }
            else if (!TheMenu->m_bIsActive && TheMenu->m_bFrozeControls)
            {
                plr->EnableInput();
                TheMenu->m_bFrozeControls = false;
            }

            if (TheMenu->m_bGodMode)
            {
                CThing* t = plr->GetCharacterThing();
                if (t)
                    t->m_fHealth = 1000.0f;
            }

            if (TheMenu->m_bInfiniteWill)
            {
                if (t)
                {
                    CTCHeroStats* stats = (CTCHeroStats*)t->GetTC(TCI_HERO_STATS);
                    stats->m_nStamina = 10000;
                }

            }

            if (TheMenu->m_bCustomCameraPos && TheMenu->ms_bFreeCam && TheMenu->m_nFreeCameraMode == FREE_CAMERA_CUSTOM)
                FreeCamera::Update();
        }

    }
}

void HookMainGameComponent()
{
    if (!InGame())
        return;
    CWorld* wrld = CMainGameComponent::Get()->GetWorld();
    if (wrld)
    {
        if (wrld->isLoadSave())
        {
            FableMenu::ms_bDisableCreateParticle = true;
            FableMenu::m_createdParticles.clear();
            FableMenu::m_attachedCameraParticles.clear();
        }
        else if(FableMenu::ms_bDisableCreateParticle)
            FableMenu::ms_bDisableCreateParticle = false;
    }
}

void FableMenu::ChangeMovementTypePatch(EMovementType moveType)
{
    if (moveType != DEFAULT_MOVEMENT)
    {
        Memory::VP::Patch(0x6AB514, { 0xB8, (unsigned char)moveType });
        Memory::VP::Patch(0x6AB5BC, { 0xB8, (unsigned char)moveType });
    }
    else
    {
        Memory::VP::Patch(0x6AB514, { 0xB8, (unsigned char)JOG_MOVEMENT });
        Memory::VP::Patch(0x6AB5BC, { 0xB8, (unsigned char)RUN_MOVEMENT });
    }
}

void FableMenu::TakeActionItem(CThing* creature, char* objectName)
{
    int id = CThing::GetThingID(objectName);
    CThing* thing = CreateThing(id, creature->GetPosition(), 0, 0, 0, (char*)"thing");
    CTCBase* base = (CTCBase*)GameMalloc(100);
    CTCBase* action = (CTCBase*)GameMalloc(180);

    creature->ClearQueuedActions();
    creature->FinishCurrentAction();
    if (objectName == "OBJECT_VILLAGE_TAVERN_JUG")
        new CCreatureAction_PickUpJugToFill((CCreatureAction_PickUpJugToFill*)action, creature, thing);
    else if (objectName == "OBJECT_CRATE_SMALL_EXPLOSIVE_01_USABLE")
        new CCreatureAction_PickUpGenericBox((CCreatureAction_PickUpGenericBox*)action, creature, thing);
    creature->SetCurrentAction(action);
}

bool InGame()
{
    if (CMainGameComponent::Get())
    {
        if (CMainGameComponent::Get()->GetWorld())
            return true;
    }
    return false;
}

float GetDeltaTime()
{
    float delta = 1.0f / 60.0f;

    if (eDirectX9Hook::ms_bInit)
        delta = 1.0f / ImGui::GetIO().Framerate;

    return delta;
}

bool IsWindowFocused()
{
    return TheMenu->m_bIsFocused;
}

char* GetUTF8String(wchar_t* name)
{
    char utf8Buff[256] = {};
    int size = WideCharToMultiByte(CP_UTF8, 0, name, -1, NULL, 0, NULL, NULL);

    WideCharToMultiByte(CP_UTF8, 0, name, -1, utf8Buff, size, NULL, NULL);

    return utf8Buff;
}

void CopyToClipboard(char* name)
{
    const size_t len = strlen(name) + 1;
    HGLOBAL hMem = GlobalAlloc(GMEM_MOVEABLE, len);
    memcpy(GlobalLock(hMem), name, len);
    GlobalUnlock(hMem);
    OpenClipboard(NULL);
    EmptyClipboard();
    SetClipboardData(CF_TEXT, hMem);
    CloseClipboard();
    Notifications->SetNotificationTime(2500);
    Notifications->PushNotification("Copied %s to clipboard!", name);
}
